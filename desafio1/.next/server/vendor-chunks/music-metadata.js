"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/music-metadata";
exports.ids = ["vendor-chunks/music-metadata"];
exports.modules = {

/***/ "(ssr)/./node_modules/music-metadata/lib/ParserFactory.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ParserFactory.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParserFactory = exports.parseHttpContentType = void 0;\nconst FileType = __webpack_require__(/*! file-type/core */ \"(ssr)/./node_modules/file-type/core.js\");\nconst ContentType = __webpack_require__(/*! content-type */ \"(ssr)/./node_modules/content-type/index.js\");\nconst MimeType = __webpack_require__(/*! media-typer */ \"(ssr)/./node_modules/music-metadata/node_modules/media-typer/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst MetadataCollector_1 = __webpack_require__(/*! ./common/MetadataCollector */ \"(ssr)/./node_modules/music-metadata/lib/common/MetadataCollector.js\");\nconst AiffParser_1 = __webpack_require__(/*! ./aiff/AiffParser */ \"(ssr)/./node_modules/music-metadata/lib/aiff/AiffParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ./apev2/APEv2Parser */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst AsfParser_1 = __webpack_require__(/*! ./asf/AsfParser */ \"(ssr)/./node_modules/music-metadata/lib/asf/AsfParser.js\");\nconst FlacParser_1 = __webpack_require__(/*! ./flac/FlacParser */ \"(ssr)/./node_modules/music-metadata/lib/flac/FlacParser.js\");\nconst MP4Parser_1 = __webpack_require__(/*! ./mp4/MP4Parser */ \"(ssr)/./node_modules/music-metadata/lib/mp4/MP4Parser.js\");\nconst MpegParser_1 = __webpack_require__(/*! ./mpeg/MpegParser */ \"(ssr)/./node_modules/music-metadata/lib/mpeg/MpegParser.js\");\nconst musepack_1 = __webpack_require__(/*! ./musepack */ \"(ssr)/./node_modules/music-metadata/lib/musepack/index.js\");\nconst OggParser_1 = __webpack_require__(/*! ./ogg/OggParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/OggParser.js\");\nconst WaveParser_1 = __webpack_require__(/*! ./wav/WaveParser */ \"(ssr)/./node_modules/music-metadata/lib/wav/WaveParser.js\");\nconst WavPackParser_1 = __webpack_require__(/*! ./wavpack/WavPackParser */ \"(ssr)/./node_modules/music-metadata/lib/wavpack/WavPackParser.js\");\nconst DsfParser_1 = __webpack_require__(/*! ./dsf/DsfParser */ \"(ssr)/./node_modules/music-metadata/lib/dsf/DsfParser.js\");\nconst DsdiffParser_1 = __webpack_require__(/*! ./dsdiff/DsdiffParser */ \"(ssr)/./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js\");\nconst MatroskaParser_1 = __webpack_require__(/*! ./matroska/MatroskaParser */ \"(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:factory');\nfunction parseHttpContentType(contentType) {\n    const type = ContentType.parse(contentType);\n    const mime = MimeType.parse(type.type);\n    return {\n        type: mime.type,\n        subtype: mime.subtype,\n        suffix: mime.suffix,\n        parameters: type.parameters\n    };\n}\nexports.parseHttpContentType = parseHttpContentType;\nasync function parse(tokenizer, parserId, opts = {}) {\n    // Parser found, execute parser\n    const parser = await ParserFactory.loadParser(parserId);\n    const metadata = new MetadataCollector_1.MetadataCollector(opts);\n    await parser.init(metadata, tokenizer, opts).parse();\n    return metadata.toCommonMetadata();\n}\nclass ParserFactory {\n    /**\n     * Parse metadata from tokenizer\n     * @param tokenizer - Tokenizer\n     * @param opts - Options\n     * @returns Native metadata\n     */\n    static async parseOnContentType(tokenizer, opts) {\n        const { mimeType, path, url } = await tokenizer.fileInfo;\n        // Resolve parser based on MIME-type or file extension\n        const parserId = ParserFactory.getParserIdForMimeType(mimeType) || ParserFactory.getParserIdForExtension(path) || ParserFactory.getParserIdForExtension(url);\n        if (!parserId) {\n            debug('No parser found for MIME-type / extension: ' + mimeType);\n        }\n        return this.parse(tokenizer, parserId, opts);\n    }\n    static async parse(tokenizer, parserId, opts) {\n        if (!parserId) {\n            // Parser could not be determined on MIME-type or extension\n            debug('Guess parser on content...');\n            const buf = Buffer.alloc(4100);\n            await tokenizer.peekBuffer(buf, { mayBeLess: true });\n            if (tokenizer.fileInfo.path) {\n                parserId = this.getParserIdForExtension(tokenizer.fileInfo.path);\n            }\n            if (!parserId) {\n                const guessedType = await FileType.fromBuffer(buf);\n                if (!guessedType) {\n                    throw new Error('Failed to determine audio format');\n                }\n                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);\n                parserId = ParserFactory.getParserIdForMimeType(guessedType.mime);\n                if (!parserId) {\n                    throw new Error('Guessed MIME-type not supported: ' + guessedType.mime);\n                }\n            }\n        }\n        // Parser found, execute parser\n        return parse(tokenizer, parserId, opts);\n    }\n    /**\n     * @param filePath - Path, filename or extension to audio file\n     * @return Parser sub-module name\n     */\n    static getParserIdForExtension(filePath) {\n        if (!filePath)\n            return;\n        const extension = this.getExtension(filePath).toLocaleLowerCase() || filePath;\n        switch (extension) {\n            case '.mp2':\n            case '.mp3':\n            case '.m2a':\n            case '.aac': // Assume it is ADTS-container\n                return 'mpeg';\n            case '.ape':\n                return 'apev2';\n            case '.mp4':\n            case '.m4a':\n            case '.m4b':\n            case '.m4pa':\n            case '.m4v':\n            case '.m4r':\n            case '.3gp':\n                return 'mp4';\n            case '.wma':\n            case '.wmv':\n            case '.asf':\n                return 'asf';\n            case '.flac':\n                return 'flac';\n            case '.ogg':\n            case '.ogv':\n            case '.oga':\n            case '.ogm':\n            case '.ogx':\n            case '.opus': // recommended filename extension for Ogg Opus\n            case '.spx': // recommended filename extension for Ogg Speex\n                return 'ogg';\n            case '.aif':\n            case '.aiff':\n            case '.aifc':\n                return 'aiff';\n            case '.wav':\n            case '.bwf': // Broadcast Wave Format\n                return 'riff';\n            case '.wv':\n            case '.wvp':\n                return 'wavpack';\n            case '.mpc':\n                return 'musepack';\n            case '.dsf':\n                return 'dsf';\n            case '.dff':\n                return 'dsdiff';\n            case '.mka':\n            case '.mkv':\n            case '.mk3d':\n            case '.mks':\n            case '.webm':\n                return 'matroska';\n        }\n    }\n    static async loadParser(moduleName) {\n        switch (moduleName) {\n            case 'aiff': return new AiffParser_1.AIFFParser();\n            case 'adts':\n            case 'mpeg':\n                return new MpegParser_1.MpegParser();\n            case 'apev2': return new APEv2Parser_1.APEv2Parser();\n            case 'asf': return new AsfParser_1.AsfParser();\n            case 'dsf': return new DsfParser_1.DsfParser();\n            case 'dsdiff': return new DsdiffParser_1.DsdiffParser();\n            case 'flac': return new FlacParser_1.FlacParser();\n            case 'mp4': return new MP4Parser_1.MP4Parser();\n            case 'musepack': return new musepack_1.default();\n            case 'ogg': return new OggParser_1.OggParser();\n            case 'riff': return new WaveParser_1.WaveParser();\n            case 'wavpack': return new WavPackParser_1.WavPackParser();\n            case 'matroska': return new MatroskaParser_1.MatroskaParser();\n            default:\n                throw new Error(`Unknown parser type: ${moduleName}`);\n        }\n    }\n    static getExtension(fname) {\n        const i = fname.lastIndexOf('.');\n        return i === -1 ? '' : fname.slice(i);\n    }\n    /**\n     * @param httpContentType - HTTP Content-Type, extension, path or filename\n     * @returns Parser sub-module name\n     */\n    static getParserIdForMimeType(httpContentType) {\n        let mime;\n        try {\n            mime = parseHttpContentType(httpContentType);\n        }\n        catch (err) {\n            debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);\n            return;\n        }\n        const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;\n        switch (mime.type) {\n            case 'audio':\n                switch (subType) {\n                    case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object\n                    case 'mpeg':\n                        return 'mpeg';\n                    case 'aac':\n                    case 'aacp':\n                        return 'adts';\n                    case 'flac':\n                        return 'flac';\n                    case 'ape':\n                    case 'monkeys-audio':\n                        return 'apev2';\n                    case 'mp4':\n                    case 'm4a':\n                        return 'mp4';\n                    case 'ogg': // RFC 7845\n                    case 'opus': // RFC 6716\n                    case 'speex': // RFC 5574\n                        return 'ogg';\n                    case 'ms-wma':\n                    case 'ms-wmv':\n                    case 'ms-asf':\n                        return 'asf';\n                    case 'aiff':\n                    case 'aif':\n                    case 'aifc':\n                        return 'aiff';\n                    case 'vnd.wave':\n                    case 'wav':\n                    case 'wave':\n                        return 'riff';\n                    case 'wavpack':\n                        return 'wavpack';\n                    case 'musepack':\n                        return 'musepack';\n                    case 'matroska':\n                    case 'webm':\n                        return 'matroska';\n                    case 'dsf':\n                        return 'dsf';\n                }\n                break;\n            case 'video':\n                switch (subType) {\n                    case 'ms-asf':\n                    case 'ms-wmv':\n                        return 'asf';\n                    case 'm4v':\n                    case 'mp4':\n                        return 'mp4';\n                    case 'ogg':\n                        return 'ogg';\n                    case 'matroska':\n                    case 'webm':\n                        return 'matroska';\n                }\n                break;\n            case 'application':\n                switch (subType) {\n                    case 'vnd.ms-asf':\n                        return 'asf';\n                    case 'ogg':\n                        return 'ogg';\n                }\n                break;\n        }\n    }\n}\nexports.ParserFactory = ParserFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ParserFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/aiff/AiffParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffParser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AIFFParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst AiffToken = __webpack_require__(/*! ./AiffToken */ \"(ssr)/./node_modules/music-metadata/lib/aiff/AiffToken.js\");\nconst iff = __webpack_require__(/*! ../iff */ \"(ssr)/./node_modules/music-metadata/lib/iff/index.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:aiff');\nconst compressionTypes = {\n    NONE: 'not compressed\tPCM\tApple Computer',\n    sowt: 'PCM (byte swapped)',\n    fl32: '32-bit floating point IEEE 32-bit float',\n    fl64: '64-bit floating point IEEE 64-bit float\tApple Computer',\n    alaw: 'ALaw 2:1\t8-bit ITU-T G.711 A-law',\n    ulaw: 'µLaw 2:1\t8-bit ITU-T G.711 µ-law\tApple Computer',\n    ULAW: 'CCITT G.711 u-law 8-bit ITU-T G.711 µ-law',\n    ALAW: 'CCITT G.711 A-law 8-bit ITU-T G.711 A-law',\n    FL32: 'Float 32\tIEEE 32-bit float '\n};\n/**\n * AIFF - Audio Interchange File Format\n *\n * Ref:\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html\n * - http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf\n */\nclass AIFFParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(iff.Header);\n        if (header.chunkID !== 'FORM')\n            throw new Error('Invalid Chunk-ID, expected \\'FORM\\''); // Not AIFF format\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        switch (type) {\n            case 'AIFF':\n                this.metadata.setFormat('container', type);\n                this.isCompressed = false;\n                break;\n            case 'AIFC':\n                this.metadata.setFormat('container', 'AIFF-C');\n                this.isCompressed = true;\n                break;\n            default:\n                throw Error('Unsupported AIFF type: ' + type);\n        }\n        this.metadata.setFormat('lossless', !this.isCompressed);\n        try {\n            while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= iff.Header.len) {\n                debug('Reading AIFF chunk at offset=' + this.tokenizer.position);\n                const chunkHeader = await this.tokenizer.readToken(iff.Header);\n                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);\n                const bytesRead = await this.readData(chunkHeader);\n                await this.tokenizer.ignore(nextChunk - bytesRead);\n            }\n        }\n        catch (err) {\n            if (err instanceof strtok3.EndOfStreamError) {\n                debug(`End-of-stream`);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    async readData(header) {\n        var _a;\n        switch (header.chunkID) {\n            case 'COMM': // The Common Chunk\n                const common = await this.tokenizer.readToken(new AiffToken.Common(header, this.isCompressed));\n                this.metadata.setFormat('bitsPerSample', common.sampleSize);\n                this.metadata.setFormat('sampleRate', common.sampleRate);\n                this.metadata.setFormat('numberOfChannels', common.numChannels);\n                this.metadata.setFormat('numberOfSamples', common.numSampleFrames);\n                this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);\n                this.metadata.setFormat('codec', (_a = common.compressionName) !== null && _a !== void 0 ? _a : compressionTypes[common.compressionType]);\n                return header.chunkSize;\n            case 'ID3 ': // ID3-meta-data\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n                return header.chunkSize;\n            case 'SSND': // Sound Data Chunk\n                if (this.metadata.format.duration) {\n                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);\n                }\n                return 0;\n            case 'NAME': // Sample name chunk\n            case 'AUTH': // Author chunk\n            case '(c) ': // Copyright chunk\n            case 'ANNO': // Annotation chunk\n                return this.readTextChunk(header);\n            default:\n                debug(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);\n                return 0;\n        }\n    }\n    async readTextChunk(header) {\n        const value = await this.tokenizer.readToken(new Token.StringType(header.chunkSize, 'ascii'));\n        value.split('\\0').map(v => v.trim()).filter(v => v && v.length > 0).forEach(v => {\n            this.metadata.addTag('AIFF', header.chunkID, v.trim());\n        });\n        return header.chunkSize;\n    }\n}\nexports.AIFFParser = AIFFParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/aiff/AiffParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/aiff/AiffTagMap.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffTagMap.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AiffTagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * ID3v1 tag mappings\n */\nconst tagMap = {\n    NAME: 'title',\n    AUTH: 'artist',\n    '(c) ': 'copyright',\n    ANNO: 'comment'\n};\nclass AiffTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    constructor() {\n        super(['AIFF'], tagMap);\n    }\n}\nexports.AiffTagMapper = AiffTagMapper;\n//# sourceMappingURL=AiffTagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FpZmYvQWlmZlRhZ01hcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsMkJBQTJCLG1CQUFPLENBQUMsc0dBQTRCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvYWlmZi9BaWZmVGFnTWFwLmpzPzkyOTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFpZmZUYWdNYXBwZXIgPSB2b2lkIDA7XG5jb25zdCBHZW5lcmljVGFnTWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0dlbmVyaWNUYWdNYXBwZXJcIik7XG4vKipcbiAqIElEM3YxIHRhZyBtYXBwaW5nc1xuICovXG5jb25zdCB0YWdNYXAgPSB7XG4gICAgTkFNRTogJ3RpdGxlJyxcbiAgICBBVVRIOiAnYXJ0aXN0JyxcbiAgICAnKGMpICc6ICdjb3B5cmlnaHQnLFxuICAgIEFOTk86ICdjb21tZW50J1xufTtcbmNsYXNzIEFpZmZUYWdNYXBwZXIgZXh0ZW5kcyBHZW5lcmljVGFnTWFwcGVyXzEuQ29tbW9uVGFnTWFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoWydBSUZGJ10sIHRhZ01hcCk7XG4gICAgfVxufVxuZXhwb3J0cy5BaWZmVGFnTWFwcGVyID0gQWlmZlRhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFpZmZUYWdNYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/aiff/AiffTagMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/aiff/AiffToken.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/aiff/AiffToken.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Common = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nclass Common {\n    constructor(header, isAifc) {\n        this.isAifc = isAifc;\n        const minimumChunkSize = isAifc ? 22 : 18;\n        if (header.chunkSize < minimumChunkSize)\n            throw new Error(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n        const shift = buf.readUInt16BE(off + 8) - 16398;\n        const baseSampleRate = buf.readUInt16BE(off + 8 + 2);\n        const res = {\n            numChannels: buf.readUInt16BE(off),\n            numSampleFrames: buf.readUInt32BE(off + 2),\n            sampleSize: buf.readUInt16BE(off + 6),\n            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift\n        };\n        if (this.isAifc) {\n            res.compressionType = FourCC_1.FourCcToken.get(buf, off + 18);\n            if (this.len > 22) {\n                const strLen = buf.readInt8(off + 22);\n                if (strLen > 0) {\n                    const padding = (strLen + 1) % 2;\n                    if (23 + strLen + padding === this.len) {\n                        res.compressionName = new Token.StringType(strLen, 'binary').get(buf, off + 23);\n                    }\n                    else {\n                        throw new Error('Illegal pstring length');\n                    }\n                }\n                else {\n                    res.compressionName = undefined;\n                }\n            }\n        }\n        else {\n            res.compressionName = 'PCM';\n        }\n        return res;\n    }\n}\nexports.Common = Common;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FpZmYvQWlmZlRva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsaUJBQWlCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvYWlmZi9BaWZmVG9rZW4uanM/NjM3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tbW9uID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBGb3VyQ0NfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRm91ckNDXCIpO1xuY2xhc3MgQ29tbW9uIHtcbiAgICBjb25zdHJ1Y3RvcihoZWFkZXIsIGlzQWlmYykge1xuICAgICAgICB0aGlzLmlzQWlmYyA9IGlzQWlmYztcbiAgICAgICAgY29uc3QgbWluaW11bUNodW5rU2l6ZSA9IGlzQWlmYyA/IDIyIDogMTg7XG4gICAgICAgIGlmIChoZWFkZXIuY2h1bmtTaXplIDwgbWluaW11bUNodW5rU2l6ZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ09NTU9OIENIVU5LIHNpemUgc2hvdWxkIGFsd2F5cyBiZSBhdCBsZWFzdCAke21pbmltdW1DaHVua1NpemV9YCk7XG4gICAgICAgIHRoaXMubGVuID0gaGVhZGVyLmNodW5rU2l6ZTtcbiAgICB9XG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9jeWNsaW5nNzQuY29tL2ZvcnVtcy9haWZmcy04MC1iaXQtc2FtcGxlLXJhdGUtdmFsdWVcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBidWYucmVhZFVJbnQxNkJFKG9mZiArIDgpIC0gMTYzOTg7XG4gICAgICAgIGNvbnN0IGJhc2VTYW1wbGVSYXRlID0gYnVmLnJlYWRVSW50MTZCRShvZmYgKyA4ICsgMik7XG4gICAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgICAgIG51bUNoYW5uZWxzOiBidWYucmVhZFVJbnQxNkJFKG9mZiksXG4gICAgICAgICAgICBudW1TYW1wbGVGcmFtZXM6IGJ1Zi5yZWFkVUludDMyQkUob2ZmICsgMiksXG4gICAgICAgICAgICBzYW1wbGVTaXplOiBidWYucmVhZFVJbnQxNkJFKG9mZiArIDYpLFxuICAgICAgICAgICAgc2FtcGxlUmF0ZTogc2hpZnQgPCAwID8gYmFzZVNhbXBsZVJhdGUgPj4gTWF0aC5hYnMoc2hpZnQpIDogYmFzZVNhbXBsZVJhdGUgPDwgc2hpZnRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuaXNBaWZjKSB7XG4gICAgICAgICAgICByZXMuY29tcHJlc3Npb25UeXBlID0gRm91ckNDXzEuRm91ckNjVG9rZW4uZ2V0KGJ1Ziwgb2ZmICsgMTgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubGVuID4gMjIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJMZW4gPSBidWYucmVhZEludDgob2ZmICsgMjIpO1xuICAgICAgICAgICAgICAgIGlmIChzdHJMZW4gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSAoc3RyTGVuICsgMSkgJSAyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMjMgKyBzdHJMZW4gKyBwYWRkaW5nID09PSB0aGlzLmxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmNvbXByZXNzaW9uTmFtZSA9IG5ldyBUb2tlbi5TdHJpbmdUeXBlKHN0ckxlbiwgJ2JpbmFyeScpLmdldChidWYsIG9mZiArIDIzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBwc3RyaW5nIGxlbmd0aCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMuY29tcHJlc3Npb25OYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5jb21wcmVzc2lvbk5hbWUgPSAnUENNJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tbW9uID0gQ29tbW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/aiff/AiffToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2Parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.APEv2Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst token_types_1 = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Token_1 = __webpack_require__(/*! ./APEv2Token */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Token.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:APEv2');\nconst tagFormat = 'APEv2';\nconst preamble = 'APETAGEX';\nclass APEv2Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.ape = {};\n    }\n    static tryParseApeHeader(metadata, tokenizer, options) {\n        const apeParser = new APEv2Parser();\n        apeParser.init(metadata, tokenizer, options);\n        return apeParser.tryParseApeHeader();\n    }\n    /**\n     * Calculate the media file duration\n     * @param ah ApeHeader\n     * @return {number} duration in seconds\n     */\n    static calculateDuration(ah) {\n        let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;\n        duration += ah.finalFrameBlocks;\n        return duration / ah.sampleRate;\n    }\n    /**\n     * Calculates the APEv1 / APEv2 first field offset\n     * @param reader\n     * @param offset\n     */\n    static async findApeFooterOffset(reader, offset) {\n        // Search for APE footer header at the end of the file\n        const apeBuf = Buffer.alloc(APEv2Token_1.TagFooter.len);\n        await reader.randomRead(apeBuf, 0, APEv2Token_1.TagFooter.len, offset - APEv2Token_1.TagFooter.len);\n        const tagFooter = APEv2Token_1.TagFooter.get(apeBuf, 0);\n        if (tagFooter.ID === 'APETAGEX') {\n            debug(`APE footer header at offset=${offset}`);\n            return { footer: tagFooter, offset: offset - tagFooter.size };\n        }\n    }\n    static parseTagFooter(metadata, buffer, options) {\n        const footer = APEv2Token_1.TagFooter.get(buffer, buffer.length - APEv2Token_1.TagFooter.len);\n        if (footer.ID !== preamble)\n            throw new Error('Unexpected APEv2 Footer ID preamble value.');\n        strtok3.fromBuffer(buffer);\n        const apeParser = new APEv2Parser();\n        apeParser.init(metadata, strtok3.fromBuffer(buffer), options);\n        return apeParser.parseTags(footer);\n    }\n    /**\n     * Parse APEv1 / APEv2 header if header signature found\n     */\n    async tryParseApeHeader() {\n        if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < APEv2Token_1.TagFooter.len) {\n            debug(`No APEv2 header found, end-of-file reached`);\n            return;\n        }\n        const footer = await this.tokenizer.peekToken(APEv2Token_1.TagFooter);\n        if (footer.ID === preamble) {\n            await this.tokenizer.ignore(APEv2Token_1.TagFooter.len);\n            return this.parseTags(footer);\n        }\n        else {\n            debug(`APEv2 header not found at offset=${this.tokenizer.position}`);\n            if (this.tokenizer.fileInfo.size) {\n                // Try to read the APEv2 header using just the footer-header\n                const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account\n                const buffer = Buffer.alloc(remaining);\n                await this.tokenizer.readBuffer(buffer);\n                return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);\n            }\n        }\n    }\n    async parse() {\n        const descriptor = await this.tokenizer.readToken(APEv2Token_1.DescriptorParser);\n        if (descriptor.ID !== 'MAC ')\n            throw new Error('Unexpected descriptor ID');\n        this.ape.descriptor = descriptor;\n        const lenExp = descriptor.descriptorBytes - APEv2Token_1.DescriptorParser.len;\n        const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());\n        await this.tokenizer.ignore(header.forwardBytes);\n        return this.tryParseApeHeader();\n    }\n    async parseTags(footer) {\n        const keyBuffer = Buffer.alloc(256); // maximum tag key length\n        let bytesRemaining = footer.size - APEv2Token_1.TagFooter.len;\n        debug(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);\n        for (let i = 0; i < footer.fields; i++) {\n            if (bytesRemaining < APEv2Token_1.TagItemHeader.len) {\n                this.metadata.addWarning(`APEv2 Tag-header: ${footer.fields - i} items remaining, but no more tag data to read.`);\n                break;\n            }\n            // Only APEv2 tag has tag item headers\n            const tagItemHeader = await this.tokenizer.readToken(APEv2Token_1.TagItemHeader);\n            bytesRemaining -= APEv2Token_1.TagItemHeader.len + tagItemHeader.size;\n            await this.tokenizer.peekBuffer(keyBuffer, { length: Math.min(keyBuffer.length, bytesRemaining) });\n            let zero = util.findZero(keyBuffer, 0, keyBuffer.length);\n            const key = await this.tokenizer.readToken(new token_types_1.StringType(zero, 'ascii'));\n            await this.tokenizer.ignore(1);\n            bytesRemaining -= key.length + 1;\n            switch (tagItemHeader.flags.dataType) {\n                case APEv2Token_1.DataType.text_utf8: { // utf-8 text-string\n                    const value = await this.tokenizer.readToken(new token_types_1.StringType(tagItemHeader.size, 'utf8'));\n                    const values = value.split(/\\x00/g);\n                    for (const val of values) {\n                        this.metadata.addTag(tagFormat, key, val);\n                    }\n                    break;\n                }\n                case APEv2Token_1.DataType.binary: // binary (probably artwork)\n                    if (this.options.skipCovers) {\n                        await this.tokenizer.ignore(tagItemHeader.size);\n                    }\n                    else {\n                        const picData = Buffer.alloc(tagItemHeader.size);\n                        await this.tokenizer.readBuffer(picData);\n                        zero = util.findZero(picData, 0, picData.length);\n                        const description = picData.toString('utf8', 0, zero);\n                        const data = Buffer.from(picData.slice(zero + 1));\n                        this.metadata.addTag(tagFormat, key, {\n                            description,\n                            data\n                        });\n                    }\n                    break;\n                case APEv2Token_1.DataType.external_info:\n                    debug(`Ignore external info ${key}`);\n                    await this.tokenizer.ignore(tagItemHeader.size);\n                    break;\n                case APEv2Token_1.DataType.reserved:\n                    debug(`Ignore external info ${key}`);\n                    this.metadata.addWarning(`APEv2 header declares a reserved datatype for \"${key}\"`);\n                    await this.tokenizer.ignore(tagItemHeader.size);\n                    break;\n            }\n        }\n    }\n    async parseDescriptorExpansion(lenExp) {\n        await this.tokenizer.ignore(lenExp);\n        return this.parseHeader();\n    }\n    async parseHeader() {\n        const header = await this.tokenizer.readToken(APEv2Token_1.Header);\n        // ToDo before\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('container', 'Monkey\\'s Audio');\n        this.metadata.setFormat('bitsPerSample', header.bitsPerSample);\n        this.metadata.setFormat('sampleRate', header.sampleRate);\n        this.metadata.setFormat('numberOfChannels', header.channel);\n        this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));\n        return {\n            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes +\n                this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes\n        };\n    }\n}\nexports.APEv2Parser = APEv2Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.APEv2TagMapper = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * ID3v2.2 tag mappings\n */\nconst apev2TagMap = {\n    Title: 'title',\n    Artist: 'artist',\n    Artists: 'artists',\n    'Album Artist': 'albumartist',\n    Album: 'album',\n    Year: 'date',\n    Originalyear: 'originalyear',\n    Originaldate: 'originaldate',\n    Comment: 'comment',\n    Track: 'track',\n    Disc: 'disk',\n    DISCNUMBER: 'disk',\n    Genre: 'genre',\n    'Cover Art (Front)': 'picture',\n    'Cover Art (Back)': 'picture',\n    Composer: 'composer',\n    Lyrics: 'lyrics',\n    ALBUMSORT: 'albumsort',\n    TITLESORT: 'titlesort',\n    WORK: 'work',\n    ARTISTSORT: 'artistsort',\n    ALBUMARTISTSORT: 'albumartistsort',\n    COMPOSERSORT: 'composersort',\n    Lyricist: 'lyricist',\n    Writer: 'writer',\n    Conductor: 'conductor',\n    // 'Performer=artist (instrument)': 'performer:instrument',\n    MixArtist: 'remixer',\n    Arranger: 'arranger',\n    Engineer: 'engineer',\n    Producer: 'producer',\n    DJMixer: 'djmixer',\n    Mixer: 'mixer',\n    Label: 'label',\n    Grouping: 'grouping',\n    Subtitle: 'subtitle',\n    DiscSubtitle: 'discsubtitle',\n    Compilation: 'compilation',\n    BPM: 'bpm',\n    Mood: 'mood',\n    Media: 'media',\n    CatalogNumber: 'catalognumber',\n    MUSICBRAINZ_ALBUMSTATUS: 'releasestatus',\n    MUSICBRAINZ_ALBUMTYPE: 'releasetype',\n    RELEASECOUNTRY: 'releasecountry',\n    Script: 'script',\n    Language: 'language',\n    Copyright: 'copyright',\n    LICENSE: 'license',\n    EncodedBy: 'encodedby',\n    EncoderSettings: 'encodersettings',\n    Barcode: 'barcode',\n    ISRC: 'isrc',\n    ASIN: 'asin',\n    musicbrainz_trackid: 'musicbrainz_recordingid',\n    musicbrainz_releasetrackid: 'musicbrainz_trackid',\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\n    Acoustid_Id: 'acoustid_id',\n    ACOUSTID_FINGERPRINT: 'acoustid_fingerprint',\n    MUSICIP_PUID: 'musicip_puid',\n    Weblink: 'website',\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\n    MP3GAIN_MINMAX: 'replaygain_track_minmax',\n    MP3GAIN_UNDO: 'replaygain_undo'\n};\nclass APEv2TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super(['APEv2'], apev2TagMap);\n    }\n}\nexports.APEv2TagMapper = APEv2TagMapper;\n//# sourceMappingURL=APEv2TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FwZXYyL0FQRXYyVGFnTWFwcGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixnQ0FBZ0MsbUJBQU8sQ0FBQyxnSEFBaUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FwZXYyL0FQRXYyVGFnTWFwcGVyLmpzPzRiZWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFQRXYyVGFnTWFwcGVyID0gdm9pZCAwO1xuY29uc3QgQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0Nhc2VJbnNlbnNpdGl2ZVRhZ01hcFwiKTtcbi8qKlxuICogSUQzdjIuMiB0YWcgbWFwcGluZ3NcbiAqL1xuY29uc3QgYXBldjJUYWdNYXAgPSB7XG4gICAgVGl0bGU6ICd0aXRsZScsXG4gICAgQXJ0aXN0OiAnYXJ0aXN0JyxcbiAgICBBcnRpc3RzOiAnYXJ0aXN0cycsXG4gICAgJ0FsYnVtIEFydGlzdCc6ICdhbGJ1bWFydGlzdCcsXG4gICAgQWxidW06ICdhbGJ1bScsXG4gICAgWWVhcjogJ2RhdGUnLFxuICAgIE9yaWdpbmFseWVhcjogJ29yaWdpbmFseWVhcicsXG4gICAgT3JpZ2luYWxkYXRlOiAnb3JpZ2luYWxkYXRlJyxcbiAgICBDb21tZW50OiAnY29tbWVudCcsXG4gICAgVHJhY2s6ICd0cmFjaycsXG4gICAgRGlzYzogJ2Rpc2snLFxuICAgIERJU0NOVU1CRVI6ICdkaXNrJyxcbiAgICBHZW5yZTogJ2dlbnJlJyxcbiAgICAnQ292ZXIgQXJ0IChGcm9udCknOiAncGljdHVyZScsXG4gICAgJ0NvdmVyIEFydCAoQmFjayknOiAncGljdHVyZScsXG4gICAgQ29tcG9zZXI6ICdjb21wb3NlcicsXG4gICAgTHlyaWNzOiAnbHlyaWNzJyxcbiAgICBBTEJVTVNPUlQ6ICdhbGJ1bXNvcnQnLFxuICAgIFRJVExFU09SVDogJ3RpdGxlc29ydCcsXG4gICAgV09SSzogJ3dvcmsnLFxuICAgIEFSVElTVFNPUlQ6ICdhcnRpc3Rzb3J0JyxcbiAgICBBTEJVTUFSVElTVFNPUlQ6ICdhbGJ1bWFydGlzdHNvcnQnLFxuICAgIENPTVBPU0VSU09SVDogJ2NvbXBvc2Vyc29ydCcsXG4gICAgTHlyaWNpc3Q6ICdseXJpY2lzdCcsXG4gICAgV3JpdGVyOiAnd3JpdGVyJyxcbiAgICBDb25kdWN0b3I6ICdjb25kdWN0b3InLFxuICAgIC8vICdQZXJmb3JtZXI9YXJ0aXN0wqAoaW5zdHJ1bWVudCknOiAncGVyZm9ybWVyOmluc3RydW1lbnQnLFxuICAgIE1peEFydGlzdDogJ3JlbWl4ZXInLFxuICAgIEFycmFuZ2VyOiAnYXJyYW5nZXInLFxuICAgIEVuZ2luZWVyOiAnZW5naW5lZXInLFxuICAgIFByb2R1Y2VyOiAncHJvZHVjZXInLFxuICAgIERKTWl4ZXI6ICdkam1peGVyJyxcbiAgICBNaXhlcjogJ21peGVyJyxcbiAgICBMYWJlbDogJ2xhYmVsJyxcbiAgICBHcm91cGluZzogJ2dyb3VwaW5nJyxcbiAgICBTdWJ0aXRsZTogJ3N1YnRpdGxlJyxcbiAgICBEaXNjU3VidGl0bGU6ICdkaXNjc3VidGl0bGUnLFxuICAgIENvbXBpbGF0aW9uOiAnY29tcGlsYXRpb24nLFxuICAgIEJQTTogJ2JwbScsXG4gICAgTW9vZDogJ21vb2QnLFxuICAgIE1lZGlhOiAnbWVkaWEnLFxuICAgIENhdGFsb2dOdW1iZXI6ICdjYXRhbG9nbnVtYmVyJyxcbiAgICBNVVNJQ0JSQUlOWl9BTEJVTVNUQVRVUzogJ3JlbGVhc2VzdGF0dXMnLFxuICAgIE1VU0lDQlJBSU5aX0FMQlVNVFlQRTogJ3JlbGVhc2V0eXBlJyxcbiAgICBSRUxFQVNFQ09VTlRSWTogJ3JlbGVhc2Vjb3VudHJ5JyxcbiAgICBTY3JpcHQ6ICdzY3JpcHQnLFxuICAgIExhbmd1YWdlOiAnbGFuZ3VhZ2UnLFxuICAgIENvcHlyaWdodDogJ2NvcHlyaWdodCcsXG4gICAgTElDRU5TRTogJ2xpY2Vuc2UnLFxuICAgIEVuY29kZWRCeTogJ2VuY29kZWRieScsXG4gICAgRW5jb2RlclNldHRpbmdzOiAnZW5jb2RlcnNldHRpbmdzJyxcbiAgICBCYXJjb2RlOiAnYmFyY29kZScsXG4gICAgSVNSQzogJ2lzcmMnLFxuICAgIEFTSU46ICdhc2luJyxcbiAgICBtdXNpY2JyYWluel90cmFja2lkOiAnbXVzaWNicmFpbnpfcmVjb3JkaW5naWQnLFxuICAgIG11c2ljYnJhaW56X3JlbGVhc2V0cmFja2lkOiAnbXVzaWNicmFpbnpfdHJhY2tpZCcsXG4gICAgTVVTSUNCUkFJTlpfQUxCVU1JRDogJ211c2ljYnJhaW56X2FsYnVtaWQnLFxuICAgIE1VU0lDQlJBSU5aX0FSVElTVElEOiAnbXVzaWNicmFpbnpfYXJ0aXN0aWQnLFxuICAgIE1VU0lDQlJBSU5aX0FMQlVNQVJUSVNUSUQ6ICdtdXNpY2JyYWluel9hbGJ1bWFydGlzdGlkJyxcbiAgICBNVVNJQ0JSQUlOWl9SRUxFQVNFR1JPVVBJRDogJ211c2ljYnJhaW56X3JlbGVhc2Vncm91cGlkJyxcbiAgICBNVVNJQ0JSQUlOWl9XT1JLSUQ6ICdtdXNpY2JyYWluel93b3JraWQnLFxuICAgIE1VU0lDQlJBSU5aX1RSTUlEOiAnbXVzaWNicmFpbnpfdHJtaWQnLFxuICAgIE1VU0lDQlJBSU5aX0RJU0NJRDogJ211c2ljYnJhaW56X2Rpc2NpZCcsXG4gICAgQWNvdXN0aWRfSWQ6ICdhY291c3RpZF9pZCcsXG4gICAgQUNPVVNUSURfRklOR0VSUFJJTlQ6ICdhY291c3RpZF9maW5nZXJwcmludCcsXG4gICAgTVVTSUNJUF9QVUlEOiAnbXVzaWNpcF9wdWlkJyxcbiAgICBXZWJsaW5rOiAnd2Vic2l0ZScsXG4gICAgUkVQTEFZR0FJTl9UUkFDS19HQUlOOiAncmVwbGF5Z2Fpbl90cmFja19nYWluJyxcbiAgICBSRVBMQVlHQUlOX1RSQUNLX1BFQUs6ICdyZXBsYXlnYWluX3RyYWNrX3BlYWsnLFxuICAgIE1QM0dBSU5fTUlOTUFYOiAncmVwbGF5Z2Fpbl90cmFja19taW5tYXgnLFxuICAgIE1QM0dBSU5fVU5ETzogJ3JlcGxheWdhaW5fdW5kbydcbn07XG5jbGFzcyBBUEV2MlRhZ01hcHBlciBleHRlbmRzIENhc2VJbnNlbnNpdGl2ZVRhZ01hcF8xLkNhc2VJbnNlbnNpdGl2ZVRhZ01hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsnQVBFdjInXSwgYXBldjJUYWdNYXApO1xuICAgIH1cbn1cbmV4cG9ydHMuQVBFdjJUYWdNYXBwZXIgPSBBUEV2MlRhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFQRXYyVGFnTWFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/apev2/APEv2Token.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBitSet = exports.parseTagFlags = exports.TagField = exports.TagItemHeader = exports.TagFooter = exports.Header = exports.DescriptorParser = exports.DataType = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"text_utf8\"] = 0] = \"text_utf8\";\n    DataType[DataType[\"binary\"] = 1] = \"binary\";\n    DataType[DataType[\"external_info\"] = 2] = \"external_info\";\n    DataType[DataType[\"reserved\"] = 3] = \"reserved\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n/**\n * APE_DESCRIPTOR: defines the sizes (and offsets) of all the pieces, as well as the MD5 checksum\n */\nexports.DescriptorParser = {\n    len: 52,\n    get: (buf, off) => {\n        return {\n            // should equal 'MAC '\n            ID: FourCC_1.FourCcToken.get(buf, off),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            version: Token.UINT32_LE.get(buf, off + 4) / 1000,\n            // the number of descriptor bytes (allows later expansion of this header)\n            descriptorBytes: Token.UINT32_LE.get(buf, off + 8),\n            // the number of header APE_HEADER bytes\n            headerBytes: Token.UINT32_LE.get(buf, off + 12),\n            // the number of header APE_HEADER bytes\n            seekTableBytes: Token.UINT32_LE.get(buf, off + 16),\n            // the number of header data bytes (from original file)\n            headerDataBytes: Token.UINT32_LE.get(buf, off + 20),\n            // the number of bytes of APE frame data\n            apeFrameDataBytes: Token.UINT32_LE.get(buf, off + 24),\n            // the high order number of APE frame data bytes\n            apeFrameDataBytesHigh: Token.UINT32_LE.get(buf, off + 28),\n            // the terminating data of the file (not including tag data)\n            terminatingDataBytes: Token.UINT32_LE.get(buf, off + 32),\n            // the MD5 hash of the file (see notes for usage... it's a little tricky)\n            fileMD5: new Token.Uint8ArrayType(16).get(buf, off + 36)\n        };\n    }\n};\n/**\n * APE_HEADER: describes all of the necessary information about the APE file\n */\nexports.Header = {\n    len: 24,\n    get: (buf, off) => {\n        return {\n            // the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)\n            compressionLevel: Token.UINT16_LE.get(buf, off),\n            // any format flags (for future use)\n            formatFlags: Token.UINT16_LE.get(buf, off + 2),\n            // the number of audio blocks in one frame\n            blocksPerFrame: Token.UINT32_LE.get(buf, off + 4),\n            // the number of audio blocks in the final frame\n            finalFrameBlocks: Token.UINT32_LE.get(buf, off + 8),\n            // the total number of frames\n            totalFrames: Token.UINT32_LE.get(buf, off + 12),\n            // the bits per sample (typically 16)\n            bitsPerSample: Token.UINT16_LE.get(buf, off + 16),\n            // the number of channels (1 or 2)\n            channel: Token.UINT16_LE.get(buf, off + 18),\n            // the sample rate (typically 44100)\n            sampleRate: Token.UINT32_LE.get(buf, off + 20)\n        };\n    }\n};\n/**\n * APE Tag Header/Footer Version 2.0\n * TAG: describes all the properties of the file [optional]\n */\nexports.TagFooter = {\n    len: 32,\n    get: (buf, off) => {\n        return {\n            // should equal 'APETAGEX'\n            ID: new Token.StringType(8, 'ascii').get(buf, off),\n            // equals CURRENT_APE_TAG_VERSION\n            version: Token.UINT32_LE.get(buf, off + 8),\n            // the complete size of the tag, including this footer (excludes header)\n            size: Token.UINT32_LE.get(buf, off + 12),\n            // the number of fields in the tag\n            fields: Token.UINT32_LE.get(buf, off + 16),\n            // reserved for later use (must be zero),\n            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 20))\n        };\n    }\n};\n/**\n * APE Tag v2.0 Item Header\n */\nexports.TagItemHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Length of assigned value in bytes\n            size: Token.UINT32_LE.get(buf, off),\n            // reserved for later use (must be zero),\n            flags: parseTagFlags(Token.UINT32_LE.get(buf, off + 4))\n        };\n    }\n};\nconst TagField = footer => {\n    return new Token.Uint8ArrayType(footer.size - exports.TagFooter.len);\n};\nexports.TagField = TagField;\nfunction parseTagFlags(flags) {\n    return {\n        containsHeader: isBitSet(flags, 31),\n        containsFooter: isBitSet(flags, 30),\n        isHeader: isBitSet(flags, 31),\n        readOnly: isBitSet(flags, 0),\n        dataType: (flags & 6) >> 1\n    };\n}\nexports.parseTagFlags = parseTagFlags;\n/**\n * @param num {number}\n * @param bit 0 is least significant bit (LSB)\n * @return {boolean} true if bit is 1; otherwise false\n */\nfunction isBitSet(num, bit) {\n    return (num & 1 << bit) !== 0;\n}\nexports.isBitSet = isBitSet;\n//# sourceMappingURL=APEv2Token.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FwZXYyL0FQRXYyVG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcscUJBQXFCLEdBQUcsZ0JBQWdCLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsY0FBYyxHQUFHLHdCQUF3QixHQUFHLGdCQUFnQjtBQUN0SyxjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0NBQWtDLGdCQUFnQixLQUFLO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsWUFBWSxTQUFTLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9hcGV2Mi9BUEV2MlRva2VuLmpzPzEwZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQml0U2V0ID0gZXhwb3J0cy5wYXJzZVRhZ0ZsYWdzID0gZXhwb3J0cy5UYWdGaWVsZCA9IGV4cG9ydHMuVGFnSXRlbUhlYWRlciA9IGV4cG9ydHMuVGFnRm9vdGVyID0gZXhwb3J0cy5IZWFkZXIgPSBleHBvcnRzLkRlc2NyaXB0b3JQYXJzZXIgPSBleHBvcnRzLkRhdGFUeXBlID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBGb3VyQ0NfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRm91ckNDXCIpO1xudmFyIERhdGFUeXBlO1xuKGZ1bmN0aW9uIChEYXRhVHlwZSkge1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1widGV4dF91dGY4XCJdID0gMF0gPSBcInRleHRfdXRmOFwiO1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1wiYmluYXJ5XCJdID0gMV0gPSBcImJpbmFyeVwiO1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1wiZXh0ZXJuYWxfaW5mb1wiXSA9IDJdID0gXCJleHRlcm5hbF9pbmZvXCI7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJyZXNlcnZlZFwiXSA9IDNdID0gXCJyZXNlcnZlZFwiO1xufSkoRGF0YVR5cGUgPSBleHBvcnRzLkRhdGFUeXBlIHx8IChleHBvcnRzLkRhdGFUeXBlID0ge30pKTtcbi8qKlxuICogQVBFX0RFU0NSSVBUT1I6IGRlZmluZXMgdGhlIHNpemVzIChhbmQgb2Zmc2V0cykgb2YgYWxsIHRoZSBwaWVjZXMsIGFzIHdlbGwgYXMgdGhlIE1ENSBjaGVja3N1bVxuICovXG5leHBvcnRzLkRlc2NyaXB0b3JQYXJzZXIgPSB7XG4gICAgbGVuOiA1MixcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gc2hvdWxkIGVxdWFsICdNQUMgJ1xuICAgICAgICAgICAgSUQ6IEZvdXJDQ18xLkZvdXJDY1Rva2VuLmdldChidWYsIG9mZiksXG4gICAgICAgICAgICAvLyB2ZXJzaW9uSW5kZXggbnVtYmVyICogMTAwMCAoMy44MSA9IDM4MTApIChyZW1lbWJlciB0aGF0IDQtYnl0ZSBhbGlnbm1lbnQgY2F1c2VzIHRoaXMgdG8gdGFrZSA0LWJ5dGVzKVxuICAgICAgICAgICAgdmVyc2lvbjogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDQpIC8gMTAwMCxcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2YgZGVzY3JpcHRvciBieXRlcyAoYWxsb3dzIGxhdGVyIGV4cGFuc2lvbiBvZiB0aGlzIGhlYWRlcilcbiAgICAgICAgICAgIGRlc2NyaXB0b3JCeXRlczogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDgpLFxuICAgICAgICAgICAgLy8gdGhlIG51bWJlciBvZiBoZWFkZXIgQVBFX0hFQURFUiBieXRlc1xuICAgICAgICAgICAgaGVhZGVyQnl0ZXM6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAxMiksXG4gICAgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIGhlYWRlciBBUEVfSEVBREVSIGJ5dGVzXG4gICAgICAgICAgICBzZWVrVGFibGVCeXRlczogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDE2KSxcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2YgaGVhZGVyIGRhdGEgYnl0ZXMgKGZyb20gb3JpZ2luYWwgZmlsZSlcbiAgICAgICAgICAgIGhlYWRlckRhdGFCeXRlczogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDIwKSxcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2YgYnl0ZXMgb2YgQVBFIGZyYW1lIGRhdGFcbiAgICAgICAgICAgIGFwZUZyYW1lRGF0YUJ5dGVzOiBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjQpLFxuICAgICAgICAgICAgLy8gdGhlIGhpZ2ggb3JkZXIgbnVtYmVyIG9mIEFQRSBmcmFtZSBkYXRhIGJ5dGVzXG4gICAgICAgICAgICBhcGVGcmFtZURhdGFCeXRlc0hpZ2g6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAyOCksXG4gICAgICAgICAgICAvLyB0aGUgdGVybWluYXRpbmcgZGF0YSBvZiB0aGUgZmlsZSAobm90IGluY2x1ZGluZyB0YWcgZGF0YSlcbiAgICAgICAgICAgIHRlcm1pbmF0aW5nRGF0YUJ5dGVzOiBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMzIpLFxuICAgICAgICAgICAgLy8gdGhlIE1ENSBoYXNoIG9mIHRoZSBmaWxlIChzZWUgbm90ZXMgZm9yIHVzYWdlLi4uIGl0J3MgYSBsaXR0bGUgdHJpY2t5KVxuICAgICAgICAgICAgZmlsZU1ENTogbmV3IFRva2VuLlVpbnQ4QXJyYXlUeXBlKDE2KS5nZXQoYnVmLCBvZmYgKyAzNilcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBBUEVfSEVBREVSOiBkZXNjcmliZXMgYWxsIG9mIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gYWJvdXQgdGhlIEFQRSBmaWxlXG4gKi9cbmV4cG9ydHMuSGVhZGVyID0ge1xuICAgIGxlbjogMjQsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIHRoZSBjb21wcmVzc2lvbiBsZXZlbCAoc2VlIGRlZmluZXMgSS5FLiBDT01QUkVTU0lPTl9MRVZFTF9GQVNUKVxuICAgICAgICAgICAgY29tcHJlc3Npb25MZXZlbDogVG9rZW4uVUlOVDE2X0xFLmdldChidWYsIG9mZiksXG4gICAgICAgICAgICAvLyBhbnkgZm9ybWF0IGZsYWdzIChmb3IgZnV0dXJlIHVzZSlcbiAgICAgICAgICAgIGZvcm1hdEZsYWdzOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KGJ1Ziwgb2ZmICsgMiksXG4gICAgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIGF1ZGlvIGJsb2NrcyBpbiBvbmUgZnJhbWVcbiAgICAgICAgICAgIGJsb2Nrc1BlckZyYW1lOiBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgNCksXG4gICAgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIGF1ZGlvIGJsb2NrcyBpbiB0aGUgZmluYWwgZnJhbWVcbiAgICAgICAgICAgIGZpbmFsRnJhbWVCbG9ja3M6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyA4KSxcbiAgICAgICAgICAgIC8vIHRoZSB0b3RhbCBudW1iZXIgb2YgZnJhbWVzXG4gICAgICAgICAgICB0b3RhbEZyYW1lczogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDEyKSxcbiAgICAgICAgICAgIC8vIHRoZSBiaXRzIHBlciBzYW1wbGUgKHR5cGljYWxseSAxNilcbiAgICAgICAgICAgIGJpdHNQZXJTYW1wbGU6IFRva2VuLlVJTlQxNl9MRS5nZXQoYnVmLCBvZmYgKyAxNiksXG4gICAgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzICgxIG9yIDIpXG4gICAgICAgICAgICBjaGFubmVsOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTgpLFxuICAgICAgICAgICAgLy8gdGhlIHNhbXBsZSByYXRlICh0eXBpY2FsbHkgNDQxMDApXG4gICAgICAgICAgICBzYW1wbGVSYXRlOiBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjApXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogQVBFIFRhZyBIZWFkZXIvRm9vdGVyIFZlcnNpb24gMi4wXG4gKiBUQUc6IGRlc2NyaWJlcyBhbGwgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGZpbGUgW29wdGlvbmFsXVxuICovXG5leHBvcnRzLlRhZ0Zvb3RlciA9IHtcbiAgICBsZW46IDMyLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBzaG91bGQgZXF1YWwgJ0FQRVRBR0VYJ1xuICAgICAgICAgICAgSUQ6IG5ldyBUb2tlbi5TdHJpbmdUeXBlKDgsICdhc2NpaScpLmdldChidWYsIG9mZiksXG4gICAgICAgICAgICAvLyBlcXVhbHMgQ1VSUkVOVF9BUEVfVEFHX1ZFUlNJT05cbiAgICAgICAgICAgIHZlcnNpb246IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyA4KSxcbiAgICAgICAgICAgIC8vIHRoZSBjb21wbGV0ZSBzaXplIG9mIHRoZSB0YWcsIGluY2x1ZGluZyB0aGlzIGZvb3RlciAoZXhjbHVkZXMgaGVhZGVyKVxuICAgICAgICAgICAgc2l6ZTogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDEyKSxcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2YgZmllbGRzIGluIHRoZSB0YWdcbiAgICAgICAgICAgIGZpZWxkczogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDE2KSxcbiAgICAgICAgICAgIC8vIHJlc2VydmVkIGZvciBsYXRlciB1c2UgKG11c3QgYmUgemVybyksXG4gICAgICAgICAgICBmbGFnczogcGFyc2VUYWdGbGFncyhUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjApKVxuICAgICAgICB9O1xuICAgIH1cbn07XG4vKipcbiAqIEFQRSBUYWcgdjIuMCBJdGVtIEhlYWRlclxuICovXG5leHBvcnRzLlRhZ0l0ZW1IZWFkZXIgPSB7XG4gICAgbGVuOiA4LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBMZW5ndGggb2YgYXNzaWduZWQgdmFsdWUgaW4gYnl0ZXNcbiAgICAgICAgICAgIHNpemU6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgLy8gcmVzZXJ2ZWQgZm9yIGxhdGVyIHVzZSAobXVzdCBiZSB6ZXJvKSxcbiAgICAgICAgICAgIGZsYWdzOiBwYXJzZVRhZ0ZsYWdzKFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyA0KSlcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgVGFnRmllbGQgPSBmb290ZXIgPT4ge1xuICAgIHJldHVybiBuZXcgVG9rZW4uVWludDhBcnJheVR5cGUoZm9vdGVyLnNpemUgLSBleHBvcnRzLlRhZ0Zvb3Rlci5sZW4pO1xufTtcbmV4cG9ydHMuVGFnRmllbGQgPSBUYWdGaWVsZDtcbmZ1bmN0aW9uIHBhcnNlVGFnRmxhZ3MoZmxhZ3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb250YWluc0hlYWRlcjogaXNCaXRTZXQoZmxhZ3MsIDMxKSxcbiAgICAgICAgY29udGFpbnNGb290ZXI6IGlzQml0U2V0KGZsYWdzLCAzMCksXG4gICAgICAgIGlzSGVhZGVyOiBpc0JpdFNldChmbGFncywgMzEpLFxuICAgICAgICByZWFkT25seTogaXNCaXRTZXQoZmxhZ3MsIDApLFxuICAgICAgICBkYXRhVHlwZTogKGZsYWdzICYgNikgPj4gMVxuICAgIH07XG59XG5leHBvcnRzLnBhcnNlVGFnRmxhZ3MgPSBwYXJzZVRhZ0ZsYWdzO1xuLyoqXG4gKiBAcGFyYW0gbnVtIHtudW1iZXJ9XG4gKiBAcGFyYW0gYml0IDAgaXMgbGVhc3Qgc2lnbmlmaWNhbnQgYml0IChMU0IpXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGJpdCBpcyAxOyBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCaXRTZXQobnVtLCBiaXQpIHtcbiAgICByZXR1cm4gKG51bSAmIDEgPDwgYml0KSAhPT0gMDtcbn1cbmV4cG9ydHMuaXNCaXRTZXQgPSBpc0JpdFNldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFQRXYyVG9rZW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/asf/AsfObject.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfObject.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// ASF Objects\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WmPictureToken = exports.MetadataLibraryObjectState = exports.MetadataObjectState = exports.ExtendedStreamPropertiesObjectState = exports.ExtendedContentDescriptionObjectState = exports.ContentDescriptionObjectState = exports.readCodecEntries = exports.HeaderExtensionObject = exports.StreamPropertiesObject = exports.FilePropertiesObject = exports.IgnoreObjectState = exports.State = exports.HeaderObjectToken = exports.TopLevelHeaderObjectToken = exports.DataType = void 0;\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst GUID_1 = __webpack_require__(/*! ./GUID */ \"(ssr)/./node_modules/music-metadata/lib/asf/GUID.js\");\nconst AsfUtil_1 = __webpack_require__(/*! ./AsfUtil */ \"(ssr)/./node_modules/music-metadata/lib/asf/AsfUtil.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ../id3v2/ID3v2Token */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/**\n * Data Type: Specifies the type of information being stored. The following values are recognized.\n */\nvar DataType;\n(function (DataType) {\n    /**\n     * Unicode string. The data consists of a sequence of Unicode characters.\n     */\n    DataType[DataType[\"UnicodeString\"] = 0] = \"UnicodeString\";\n    /**\n     * BYTE array. The type of data is implementation-specific.\n     */\n    DataType[DataType[\"ByteArray\"] = 1] = \"ByteArray\";\n    /**\n     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.\n     */\n    DataType[DataType[\"Bool\"] = 2] = \"Bool\";\n    /**\n     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.\n     */\n    DataType[DataType[\"DWord\"] = 3] = \"DWord\";\n    /**\n     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.\n     */\n    DataType[DataType[\"QWord\"] = 4] = \"QWord\";\n    /**\n     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.\n     */\n    DataType[DataType[\"Word\"] = 5] = \"Word\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n/**\n * Token for: 3. ASF top-level Header Object\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3\n */\nexports.TopLevelHeaderObjectToken = {\n    len: 30,\n    get: (buf, off) => {\n        return {\n            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),\n            objectSize: Number(Token.UINT64_LE.get(buf, off + 16)),\n            numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)\n            // Reserved: 2 bytes\n        };\n    }\n};\n/**\n * Token for: 3.1 Header Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1\n */\nexports.HeaderObjectToken = {\n    len: 24,\n    get: (buf, off) => {\n        return {\n            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),\n            objectSize: Number(Token.UINT64_LE.get(buf, off + 16))\n        };\n    }\n};\nclass State {\n    constructor(header) {\n        this.len = Number(header.objectSize) - exports.HeaderObjectToken.len;\n    }\n    postProcessTag(tags, name, valueType, data) {\n        if (name === 'WM/Picture') {\n            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });\n        }\n        else {\n            const parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(valueType);\n            if (!parseAttr) {\n                throw new Error('unexpected value headerType: ' + valueType);\n            }\n            tags.push({ id: name, value: parseAttr(data) });\n        }\n    }\n}\nexports.State = State;\n// ToDo: use ignore type\nclass IgnoreObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return null;\n    }\n}\nexports.IgnoreObjectState = IgnoreObjectState;\n/**\n * Token for: 3.2: File Properties Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2\n */\nclass FilePropertiesObject extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return {\n            fileId: GUID_1.default.fromBin(buf, off),\n            fileSize: Token.UINT64_LE.get(buf, off + 16),\n            creationDate: Token.UINT64_LE.get(buf, off + 24),\n            dataPacketsCount: Token.UINT64_LE.get(buf, off + 32),\n            playDuration: Token.UINT64_LE.get(buf, off + 40),\n            sendDuration: Token.UINT64_LE.get(buf, off + 48),\n            preroll: Token.UINT64_LE.get(buf, off + 56),\n            flags: {\n                broadcast: util.getBit(buf, off + 64, 24),\n                seekable: util.getBit(buf, off + 64, 25)\n            },\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n            minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),\n            maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),\n            maximumBitrate: Token.UINT32_LE.get(buf, off + 76)\n        };\n    }\n}\nFilePropertiesObject.guid = GUID_1.default.FilePropertiesObject;\nexports.FilePropertiesObject = FilePropertiesObject;\n/**\n * Token for: 3.3 Stream Properties Object (mandatory, one per stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3\n */\nclass StreamPropertiesObject extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return {\n            streamType: GUID_1.default.decodeMediaType(GUID_1.default.fromBin(buf, off)),\n            errorCorrectionType: GUID_1.default.fromBin(buf, off + 8)\n            // ToDo\n        };\n    }\n}\nStreamPropertiesObject.guid = GUID_1.default.StreamPropertiesObject;\nexports.StreamPropertiesObject = StreamPropertiesObject;\n/**\n * 3.4: Header Extension Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4\n */\nclass HeaderExtensionObject {\n    constructor() {\n        this.len = 22;\n    }\n    get(buf, off) {\n        return {\n            reserved1: GUID_1.default.fromBin(buf, off),\n            reserved2: buf.readUInt16LE(off + 16),\n            extensionDataSize: buf.readUInt32LE(off + 18)\n        };\n    }\n}\nHeaderExtensionObject.guid = GUID_1.default.HeaderExtensionObject;\nexports.HeaderExtensionObject = HeaderExtensionObject;\n/**\n * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\n */\nconst CodecListObjectHeader = {\n    len: 20,\n    get: (buf, off) => {\n        return {\n            entryCount: buf.readUInt16LE(off + 16)\n        };\n    }\n};\nasync function readString(tokenizer) {\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\n    return (await tokenizer.readToken(new Token.StringType(length * 2, 'utf16le'))).replace('\\0', '');\n}\n/**\n * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5\n */\nasync function readCodecEntries(tokenizer) {\n    const codecHeader = await tokenizer.readToken(CodecListObjectHeader);\n    const entries = [];\n    for (let i = 0; i < codecHeader.entryCount; ++i) {\n        entries.push(await readCodecEntry(tokenizer));\n    }\n    return entries;\n}\nexports.readCodecEntries = readCodecEntries;\nasync function readInformation(tokenizer) {\n    const length = await tokenizer.readNumber(Token.UINT16_LE);\n    const buf = Buffer.alloc(length);\n    await tokenizer.readBuffer(buf);\n    return buf;\n}\n/**\n * Read Codec-Entries\n * @param tokenizer\n */\nasync function readCodecEntry(tokenizer) {\n    const type = await tokenizer.readNumber(Token.UINT16_LE);\n    return {\n        type: {\n            videoCodec: (type & 0x0001) === 0x0001,\n            audioCodec: (type & 0x0002) === 0x0002\n        },\n        codecName: await readString(tokenizer),\n        description: await readString(tokenizer),\n        information: await readInformation(tokenizer)\n    };\n}\n/**\n * 3.10 Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10\n */\nclass ContentDescriptionObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        const tags = [];\n        let pos = off + 10;\n        for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {\n            const length = buf.readUInt16LE(off + i * 2);\n            if (length > 0) {\n                const tagName = ContentDescriptionObjectState.contentDescTags[i];\n                const end = pos + length;\n                tags.push({ id: tagName, value: AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, end)) });\n                pos = end;\n            }\n        }\n        return tags;\n    }\n}\nContentDescriptionObjectState.guid = GUID_1.default.ContentDescriptionObject;\nContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];\nexports.ContentDescriptionObjectState = ContentDescriptionObjectState;\n/**\n * 3.11 Extended Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11\n */\nclass ExtendedContentDescriptionObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        const tags = [];\n        const attrCount = buf.readUInt16LE(off);\n        let pos = off + 2;\n        for (let i = 0; i < attrCount; i += 1) {\n            const nameLen = buf.readUInt16LE(pos);\n            pos += 2;\n            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\n            pos += nameLen;\n            const valueType = buf.readUInt16LE(pos);\n            pos += 2;\n            const valueLen = buf.readUInt16LE(pos);\n            pos += 2;\n            const value = buf.slice(pos, pos + valueLen);\n            pos += valueLen;\n            this.postProcessTag(tags, name, valueType, value);\n        }\n        return tags;\n    }\n}\nExtendedContentDescriptionObjectState.guid = GUID_1.default.ExtendedContentDescriptionObject;\nexports.ExtendedContentDescriptionObjectState = ExtendedContentDescriptionObjectState;\n/**\n * 4.1 Extended Stream Properties Object (optional, 1 per media stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1\n */\nclass ExtendedStreamPropertiesObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(buf, off) {\n        return {\n            startTime: Token.UINT64_LE.get(buf, off),\n            endTime: Token.UINT64_LE.get(buf, off + 8),\n            dataBitrate: buf.readInt32LE(off + 12),\n            bufferSize: buf.readInt32LE(off + 16),\n            initialBufferFullness: buf.readInt32LE(off + 20),\n            alternateDataBitrate: buf.readInt32LE(off + 24),\n            alternateBufferSize: buf.readInt32LE(off + 28),\n            alternateInitialBufferFullness: buf.readInt32LE(off + 32),\n            maximumObjectSize: buf.readInt32LE(off + 36),\n            flags: {\n                reliableFlag: util.getBit(buf, off + 40, 0),\n                seekableFlag: util.getBit(buf, off + 40, 1),\n                resendLiveCleanpointsFlag: util.getBit(buf, off + 40, 2)\n            },\n            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n            streamNumber: buf.readInt16LE(off + 42),\n            streamLanguageId: buf.readInt16LE(off + 44),\n            averageTimePerFrame: buf.readInt32LE(off + 52),\n            streamNameCount: buf.readInt32LE(off + 54),\n            payloadExtensionSystems: buf.readInt32LE(off + 56),\n            streamNames: [],\n            streamPropertiesObject: null\n        };\n    }\n}\nExtendedStreamPropertiesObjectState.guid = GUID_1.default.ExtendedStreamPropertiesObject;\nexports.ExtendedStreamPropertiesObjectState = ExtendedStreamPropertiesObjectState;\n/**\n * 4.7  Metadata Object (optional, 0 or 1)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7\n */\nclass MetadataObjectState extends State {\n    constructor(header) {\n        super(header);\n    }\n    get(uint8Array, off) {\n        const tags = [];\n        const buf = Buffer.from(uint8Array);\n        const descriptionRecordsCount = buf.readUInt16LE(off);\n        let pos = off + 2;\n        for (let i = 0; i < descriptionRecordsCount; i += 1) {\n            pos += 4;\n            const nameLen = buf.readUInt16LE(pos);\n            pos += 2;\n            const dataType = buf.readUInt16LE(pos);\n            pos += 2;\n            const dataLen = buf.readUInt32LE(pos);\n            pos += 4;\n            const name = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\n            pos += nameLen;\n            const data = buf.slice(pos, pos + dataLen);\n            pos += dataLen;\n            this.postProcessTag(tags, name, dataType, data);\n        }\n        return tags;\n    }\n}\nMetadataObjectState.guid = GUID_1.default.MetadataObject;\nexports.MetadataObjectState = MetadataObjectState;\n// 4.8\tMetadata Library Object (optional, 0 or 1)\nclass MetadataLibraryObjectState extends MetadataObjectState {\n    constructor(header) {\n        super(header);\n    }\n}\nMetadataLibraryObjectState.guid = GUID_1.default.MetadataLibraryObject;\nexports.MetadataLibraryObjectState = MetadataLibraryObjectState;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx\n */\nclass WmPictureToken {\n    static fromBase64(base64str) {\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\n    }\n    static fromBuffer(buffer) {\n        const pic = new WmPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const typeId = buffer.readUInt8(offset++);\n        const size = buffer.readInt32LE(offset);\n        let index = 5;\n        while (buffer.readUInt16BE(index) !== 0) {\n            index += 2;\n        }\n        const format = buffer.slice(5, index).toString('utf16le');\n        while (buffer.readUInt16BE(index) !== 0) {\n            index += 2;\n        }\n        const description = buffer.slice(5, index).toString('utf16le');\n        return {\n            type: ID3v2Token_1.AttachedPictureType[typeId],\n            format,\n            description,\n            size,\n            data: buffer.slice(index + 4)\n        };\n    }\n}\nexports.WmPictureToken = WmPictureToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/asf/AsfObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/asf/AsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsfParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst type_1 = __webpack_require__(/*! ../type */ \"(ssr)/./node_modules/music-metadata/lib/type.js\");\nconst GUID_1 = __webpack_require__(/*! ./GUID */ \"(ssr)/./node_modules/music-metadata/lib/asf/GUID.js\");\nconst AsfObject = __webpack_require__(/*! ./AsfObject */ \"(ssr)/./node_modules/music-metadata/lib/asf/AsfObject.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ASF');\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n * - Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01\n * - https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\nclass AsfParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n        }\n        try {\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\n        }\n        catch (err) {\n            debug('Error while parsing ASF: %s', err);\n        }\n    }\n    async parseObjectHeader(numberOfObjectHeaders) {\n        let tags;\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            // Parse data part of the ASF Object\n            debug('header GUID=%s', header.objectId.str);\n            switch (header.objectId.str) {\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n                    this.metadata.setFormat('duration', Number(fpo.playDuration / BigInt(1000)) / 10000 - Number(fpo.preroll) / 1000);\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n                    break;\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n                    break;\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\n                    break;\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case GUID_1.default.CodecListObject.str:\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n                    codecs.forEach(codec => {\n                        this.metadata.addStreamInfo({\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n                            codecName: codec.codecName\n                        });\n                    });\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n                    this.metadata.setFormat('codec', audioCodecs);\n                    break;\n                case GUID_1.default.StreamBitratePropertiesObject.str:\n                    // ToDo?\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n            }\n        } while (--numberOfObjectHeaders);\n        // done\n    }\n    addTags(tags) {\n        tags.forEach(tag => {\n            this.metadata.addTag(headerType, tag.id, tag.value);\n        });\n    }\n    async parseExtensionObject(extensionSize) {\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            const remaining = header.objectSize - AsfObject.HeaderObjectToken.len;\n            // Parse data part of the ASF Object\n            switch (header.objectId.str) {\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\n                    // ToDo: extended stream header properties are ignored\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n                    break;\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n                    this.addTags(moTags);\n                    break;\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n                    this.addTags(mlTags);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                case GUID_1.default.CompatibilityObject.str:\n                    this.tokenizer.ignore(remaining);\n                    break;\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\n                    await this.tokenizer.ignore(remaining);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n                    break;\n            }\n            extensionSize -= header.objectSize;\n        } while (extensionSize > 0);\n    }\n}\nexports.AsfParser = AsfParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9Bc2ZQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQyxnRUFBUztBQUNoQyxlQUFlLG1CQUFPLENBQUMsbUVBQVE7QUFDL0Isa0JBQWtCLG1CQUFPLENBQUMsNkVBQWE7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsNEZBQXVCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELG1CQUFtQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvYXNmL0FzZlBhcnNlci5qcz85OTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc2ZQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgdHlwZV8xID0gcmVxdWlyZShcIi4uL3R5cGVcIik7XG5jb25zdCBHVUlEXzEgPSByZXF1aXJlKFwiLi9HVUlEXCIpO1xuY29uc3QgQXNmT2JqZWN0ID0gcmVxdWlyZShcIi4vQXNmT2JqZWN0XCIpO1xuY29uc3QgQmFzaWNQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQmFzaWNQYXJzZXJcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6QVNGJyk7XG5jb25zdCBoZWFkZXJUeXBlID0gJ2FzZic7XG4vKipcbiAqIFdpbmRvd3MgTWVkaWEgTWV0YWRhdGEgVXNhZ2UgR3VpZGVsaW5lc1xuICogLSBSZWY6IGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM4Njc3MDIuYXNweFxuICpcbiAqIFJlZjpcbiAqIC0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWZsZWlzY2htYW4tYXNmLTAxXG4gKiAtIGh0dHBzOi8vaHdpZWdtYW4uaG9tZS54czRhbGwubmwvZmlsZWZvcm1hdHMvYXNmL0FTRl9TcGVjaWZpY2F0aW9uLnBkZlxuICogLSBodHRwOi8vZHJhbmcuczQueHJlYS5jb20vcHJvZ3JhbS90aXBzL2lkM3RhZy93bXAvaW5kZXguaHRtbFxuICogLSBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9lZTY2MzU3NSh2PXZzLjg1KS5hc3B4XG4gKi9cbmNsYXNzIEFzZlBhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyXzEuQmFzaWNQYXJzZXIge1xuICAgIGFzeW5jIHBhcnNlKCkge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oQXNmT2JqZWN0LlRvcExldmVsSGVhZGVyT2JqZWN0VG9rZW4pO1xuICAgICAgICBpZiAoIWhlYWRlci5vYmplY3RJZC5lcXVhbHMoR1VJRF8xLmRlZmF1bHQuSGVhZGVyT2JqZWN0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhc2YgaGVhZGVyOyBidXQgd2FzIG5vdCBmb3VuZDsgZ290OiAnICsgaGVhZGVyLm9iamVjdElkLnN0cik7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGFyc2VPYmplY3RIZWFkZXIoaGVhZGVyLm51bWJlck9mSGVhZGVyT2JqZWN0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZGVidWcoJ0Vycm9yIHdoaWxlIHBhcnNpbmcgQVNGOiAlcycsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcGFyc2VPYmplY3RIZWFkZXIobnVtYmVyT2ZPYmplY3RIZWFkZXJzKSB7XG4gICAgICAgIGxldCB0YWdzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBQYXJzZSBjb21tb24gaGVhZGVyIG9mIHRoZSBBU0YgT2JqZWN0ICgzLjEpXG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oQXNmT2JqZWN0LkhlYWRlck9iamVjdFRva2VuKTtcbiAgICAgICAgICAgIC8vIFBhcnNlIGRhdGEgcGFydCBvZiB0aGUgQVNGIE9iamVjdFxuICAgICAgICAgICAgZGVidWcoJ2hlYWRlciBHVUlEPSVzJywgaGVhZGVyLm9iamVjdElkLnN0cik7XG4gICAgICAgICAgICBzd2l0Y2ggKGhlYWRlci5vYmplY3RJZC5zdHIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEFzZk9iamVjdC5GaWxlUHJvcGVydGllc09iamVjdC5ndWlkLnN0cjogLy8gMy4yXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZwbyA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXNmT2JqZWN0LkZpbGVQcm9wZXJ0aWVzT2JqZWN0KGhlYWRlcikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBOdW1iZXIoZnBvLnBsYXlEdXJhdGlvbiAvIEJpZ0ludCgxMDAwKSkgLyAxMDAwMCAtIE51bWJlcihmcG8ucHJlcm9sbCkgLyAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCBmcG8ubWF4aW11bUJpdHJhdGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEFzZk9iamVjdC5TdHJlYW1Qcm9wZXJ0aWVzT2JqZWN0Lmd1aWQuc3RyOiAvLyAzLjNcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BvID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBBc2ZPYmplY3QuU3RyZWFtUHJvcGVydGllc09iamVjdChoZWFkZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvbnRhaW5lcicsICdBU0YvJyArIHNwby5zdHJlYW1UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBBc2ZPYmplY3QuSGVhZGVyRXh0ZW5zaW9uT2JqZWN0Lmd1aWQuc3RyOiAvLyAzLjRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0SGVhZGVyID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBBc2ZPYmplY3QuSGVhZGVyRXh0ZW5zaW9uT2JqZWN0KCkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBhcnNlRXh0ZW5zaW9uT2JqZWN0KGV4dEhlYWRlci5leHRlbnNpb25EYXRhU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQXNmT2JqZWN0LkNvbnRlbnREZXNjcmlwdGlvbk9iamVjdFN0YXRlLmd1aWQuc3RyOiAvLyAzLjEwXG4gICAgICAgICAgICAgICAgICAgIHRhZ3MgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEFzZk9iamVjdC5Db250ZW50RGVzY3JpcHRpb25PYmplY3RTdGF0ZShoZWFkZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYWdzKHRhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEFzZk9iamVjdC5FeHRlbmRlZENvbnRlbnREZXNjcmlwdGlvbk9iamVjdFN0YXRlLmd1aWQuc3RyOiAvLyAzLjExXG4gICAgICAgICAgICAgICAgICAgIHRhZ3MgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEFzZk9iamVjdC5FeHRlbmRlZENvbnRlbnREZXNjcmlwdGlvbk9iamVjdFN0YXRlKGhlYWRlcikpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhZ3ModGFncyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgR1VJRF8xLmRlZmF1bHQuQ29kZWNMaXN0T2JqZWN0LnN0cjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZWNzID0gYXdhaXQgQXNmT2JqZWN0LnJlYWRDb2RlY0VudHJpZXModGhpcy50b2tlbml6ZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZm9yRWFjaChjb2RlYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFN0cmVhbUluZm8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNvZGVjLnR5cGUudmlkZW9Db2RlYyA/IHR5cGVfMS5UcmFja1R5cGUudmlkZW8gOiB0eXBlXzEuVHJhY2tUeXBlLmF1ZGlvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjTmFtZTogY29kZWMuY29kZWNOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvQ29kZWNzID0gY29kZWNzLmZpbHRlcihjb2RlYyA9PiBjb2RlYy50eXBlLmF1ZGlvQ29kZWMpLm1hcChjb2RlYyA9PiBjb2RlYy5jb2RlY05hbWUpLmpvaW4oJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvZGVjJywgYXVkaW9Db2RlY3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdVSURfMS5kZWZhdWx0LlN0cmVhbUJpdHJhdGVQcm9wZXJ0aWVzT2JqZWN0LnN0cjpcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9Ebz9cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlbml6ZXIuaWdub3JlKGhlYWRlci5vYmplY3RTaXplIC0gQXNmT2JqZWN0LkhlYWRlck9iamVjdFRva2VuLmxlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgR1VJRF8xLmRlZmF1bHQuUGFkZGluZ09iamVjdC5zdHI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvRG86IHJlZ2lzdGVyIGJ5dGVzIHBhZFxuICAgICAgICAgICAgICAgICAgICBkZWJ1ZygnUGFkZGluZzogJXMgYnl0ZXMnLCBoZWFkZXIub2JqZWN0U2l6ZSAtIEFzZk9iamVjdC5IZWFkZXJPYmplY3RUb2tlbi5sZW4pO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoaGVhZGVyLm9iamVjdFNpemUgLSBBc2ZPYmplY3QuSGVhZGVyT2JqZWN0VG9rZW4ubGVuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5hZGRXYXJuaW5nKCdJZ25vcmUgQVNGLU9iamVjdC1HVUlEOiAnICsgaGVhZGVyLm9iamVjdElkLnN0cik7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKCdJZ25vcmUgQVNGLU9iamVjdC1HVUlEOiAlcycsIGhlYWRlci5vYmplY3RJZC5zdHIpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IEFzZk9iamVjdC5JZ25vcmVPYmplY3RTdGF0ZShoZWFkZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoLS1udW1iZXJPZk9iamVjdEhlYWRlcnMpO1xuICAgICAgICAvLyBkb25lXG4gICAgfVxuICAgIGFkZFRhZ3ModGFncykge1xuICAgICAgICB0YWdzLmZvckVhY2godGFnID0+IHtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkVGFnKGhlYWRlclR5cGUsIHRhZy5pZCwgdGFnLnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlRXh0ZW5zaW9uT2JqZWN0KGV4dGVuc2lvblNpemUpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLy8gUGFyc2UgY29tbW9uIGhlYWRlciBvZiB0aGUgQVNGIE9iamVjdCAoMy4xKVxuICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKEFzZk9iamVjdC5IZWFkZXJPYmplY3RUb2tlbik7XG4gICAgICAgICAgICBjb25zdCByZW1haW5pbmcgPSBoZWFkZXIub2JqZWN0U2l6ZSAtIEFzZk9iamVjdC5IZWFkZXJPYmplY3RUb2tlbi5sZW47XG4gICAgICAgICAgICAvLyBQYXJzZSBkYXRhIHBhcnQgb2YgdGhlIEFTRiBPYmplY3RcbiAgICAgICAgICAgIHN3aXRjaCAoaGVhZGVyLm9iamVjdElkLnN0cikge1xuICAgICAgICAgICAgICAgIGNhc2UgQXNmT2JqZWN0LkV4dGVuZGVkU3RyZWFtUHJvcGVydGllc09iamVjdFN0YXRlLmd1aWQuc3RyOiAvLyA0LjFcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9EbzogZXh0ZW5kZWQgc3RyZWFtIGhlYWRlciBwcm9wZXJ0aWVzIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXNmT2JqZWN0LkV4dGVuZGVkU3RyZWFtUHJvcGVydGllc09iamVjdFN0YXRlKGhlYWRlcikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEFzZk9iamVjdC5NZXRhZGF0YU9iamVjdFN0YXRlLmd1aWQuc3RyOiAvLyA0LjdcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9UYWdzID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBBc2ZPYmplY3QuTWV0YWRhdGFPYmplY3RTdGF0ZShoZWFkZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYWdzKG1vVGFncyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQXNmT2JqZWN0Lk1ldGFkYXRhTGlicmFyeU9iamVjdFN0YXRlLmd1aWQuc3RyOiAvLyA0LjhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWxUYWdzID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKG5ldyBBc2ZPYmplY3QuTWV0YWRhdGFMaWJyYXJ5T2JqZWN0U3RhdGUoaGVhZGVyKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFncyhtbFRhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdVSURfMS5kZWZhdWx0LlBhZGRpbmdPYmplY3Quc3RyOlxuICAgICAgICAgICAgICAgICAgICAvLyBUb0RvOiByZWdpc3RlciBieXRlcyBwYWRcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlbml6ZXIuaWdub3JlKHJlbWFpbmluZyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgR1VJRF8xLmRlZmF1bHQuQ29tcGF0aWJpbGl0eU9iamVjdC5zdHI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLmlnbm9yZShyZW1haW5pbmcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEdVSURfMS5kZWZhdWx0LkFTRl9JbmRleF9QbGFjZWhvbGRlcl9PYmplY3Quc3RyOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUocmVtYWluaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5hZGRXYXJuaW5nKCdJZ25vcmUgQVNGLU9iamVjdC1HVUlEOiAnICsgaGVhZGVyLm9iamVjdElkLnN0cik7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiSWdub3JlIEFTRi1PYmplY3QtR1VJRDogJXNcIiwgaGVhZGVyLm9iamVjdElkLnN0cik7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgQXNmT2JqZWN0Lklnbm9yZU9iamVjdFN0YXRlKGhlYWRlcikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4dGVuc2lvblNpemUgLT0gaGVhZGVyLm9iamVjdFNpemU7XG4gICAgICAgIH0gd2hpbGUgKGV4dGVuc2lvblNpemUgPiAwKTtcbiAgICB9XG59XG5leHBvcnRzLkFzZlBhcnNlciA9IEFzZlBhcnNlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/asf/AsfParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/asf/AsfTagMapper.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfTagMapper.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsfTagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * ASF Metadata tag mappings.\n * See http://msdn.microsoft.com/en-us/library/ms867702.aspx\n */\nconst asfTagMap = {\n    Title: 'title',\n    Author: 'artist',\n    'WM/AlbumArtist': 'albumartist',\n    'WM/AlbumTitle': 'album',\n    'WM/Year': 'date',\n    'WM/OriginalReleaseTime': 'originaldate',\n    'WM/OriginalReleaseYear': 'originalyear',\n    Description: 'comment',\n    'WM/TrackNumber': 'track',\n    'WM/PartOfSet': 'disk',\n    'WM/Genre': 'genre',\n    'WM/Composer': 'composer',\n    'WM/Lyrics': 'lyrics',\n    'WM/AlbumSortOrder': 'albumsort',\n    'WM/TitleSortOrder': 'titlesort',\n    'WM/ArtistSortOrder': 'artistsort',\n    'WM/AlbumArtistSortOrder': 'albumartistsort',\n    'WM/ComposerSortOrder': 'composersort',\n    'WM/Writer': 'lyricist',\n    'WM/Conductor': 'conductor',\n    'WM/ModifiedBy': 'remixer',\n    'WM/Engineer': 'engineer',\n    'WM/Producer': 'producer',\n    'WM/DJMixer': 'djmixer',\n    'WM/Mixer': 'mixer',\n    'WM/Publisher': 'label',\n    'WM/ContentGroupDescription': 'grouping',\n    'WM/SubTitle': 'subtitle',\n    'WM/SetSubTitle': 'discsubtitle',\n    // 'WM/PartOfSet': 'totaldiscs',\n    'WM/IsCompilation': 'compilation',\n    'WM/SharedUserRating': 'rating',\n    'WM/BeatsPerMinute': 'bpm',\n    'WM/Mood': 'mood',\n    'WM/Media': 'media',\n    'WM/CatalogNo': 'catalognumber',\n    'MusicBrainz/Album Status': 'releasestatus',\n    'MusicBrainz/Album Type': 'releasetype',\n    'MusicBrainz/Album Release Country': 'releasecountry',\n    'WM/Script': 'script',\n    'WM/Language': 'language',\n    Copyright: 'copyright',\n    LICENSE: 'license',\n    'WM/EncodedBy': 'encodedby',\n    'WM/EncodingSettings': 'encodersettings',\n    'WM/Barcode': 'barcode',\n    'WM/ISRC': 'isrc',\n    'MusicBrainz/Track Id': 'musicbrainz_recordingid',\n    'MusicBrainz/Release Track Id': 'musicbrainz_trackid',\n    'MusicBrainz/Album Id': 'musicbrainz_albumid',\n    'MusicBrainz/Artist Id': 'musicbrainz_artistid',\n    'MusicBrainz/Album Artist Id': 'musicbrainz_albumartistid',\n    'MusicBrainz/Release Group Id': 'musicbrainz_releasegroupid',\n    'MusicBrainz/Work Id': 'musicbrainz_workid',\n    'MusicBrainz/TRM Id': 'musicbrainz_trmid',\n    'MusicBrainz/Disc Id': 'musicbrainz_discid',\n    'Acoustid/Id': 'acoustid_id',\n    'Acoustid/Fingerprint': 'acoustid_fingerprint',\n    'MusicIP/PUID': 'musicip_puid',\n    'WM/ARTISTS': 'artists',\n    'WM/InitialKey': 'key',\n    ASIN: 'asin',\n    'WM/Work': 'work',\n    'WM/AuthorURL': 'website',\n    'WM/Picture': 'picture'\n};\nclass AsfTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    static toRating(rating) {\n        return {\n            rating: parseFloat(rating + 1) / 5\n        };\n    }\n    constructor() {\n        super(['asf'], asfTagMap);\n    }\n    postMap(tag) {\n        switch (tag.id) {\n            case 'WM/SharedUserRating':\n                const keys = tag.id.split(':');\n                tag.value = AsfTagMapper.toRating(tag.value);\n                tag.id = keys[0];\n                break;\n        }\n    }\n}\nexports.AsfTagMapper = AsfTagMapper;\n//# sourceMappingURL=AsfTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9Bc2ZUYWdNYXBwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLDJCQUEyQixtQkFBTyxDQUFDLHNHQUE0QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvYXNmL0FzZlRhZ01hcHBlci5qcz8wZWY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc2ZUYWdNYXBwZXIgPSB2b2lkIDA7XG5jb25zdCBHZW5lcmljVGFnTWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0dlbmVyaWNUYWdNYXBwZXJcIik7XG4vKipcbiAqIEFTRiBNZXRhZGF0YSB0YWcgbWFwcGluZ3MuXG4gKiBTZWUgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zODY3NzAyLmFzcHhcbiAqL1xuY29uc3QgYXNmVGFnTWFwID0ge1xuICAgIFRpdGxlOiAndGl0bGUnLFxuICAgIEF1dGhvcjogJ2FydGlzdCcsXG4gICAgJ1dNL0FsYnVtQXJ0aXN0JzogJ2FsYnVtYXJ0aXN0JyxcbiAgICAnV00vQWxidW1UaXRsZSc6ICdhbGJ1bScsXG4gICAgJ1dNL1llYXInOiAnZGF0ZScsXG4gICAgJ1dNL09yaWdpbmFsUmVsZWFzZVRpbWUnOiAnb3JpZ2luYWxkYXRlJyxcbiAgICAnV00vT3JpZ2luYWxSZWxlYXNlWWVhcic6ICdvcmlnaW5hbHllYXInLFxuICAgIERlc2NyaXB0aW9uOiAnY29tbWVudCcsXG4gICAgJ1dNL1RyYWNrTnVtYmVyJzogJ3RyYWNrJyxcbiAgICAnV00vUGFydE9mU2V0JzogJ2Rpc2snLFxuICAgICdXTS9HZW5yZSc6ICdnZW5yZScsXG4gICAgJ1dNL0NvbXBvc2VyJzogJ2NvbXBvc2VyJyxcbiAgICAnV00vTHlyaWNzJzogJ2x5cmljcycsXG4gICAgJ1dNL0FsYnVtU29ydE9yZGVyJzogJ2FsYnVtc29ydCcsXG4gICAgJ1dNL1RpdGxlU29ydE9yZGVyJzogJ3RpdGxlc29ydCcsXG4gICAgJ1dNL0FydGlzdFNvcnRPcmRlcic6ICdhcnRpc3Rzb3J0JyxcbiAgICAnV00vQWxidW1BcnRpc3RTb3J0T3JkZXInOiAnYWxidW1hcnRpc3Rzb3J0JyxcbiAgICAnV00vQ29tcG9zZXJTb3J0T3JkZXInOiAnY29tcG9zZXJzb3J0JyxcbiAgICAnV00vV3JpdGVyJzogJ2x5cmljaXN0JyxcbiAgICAnV00vQ29uZHVjdG9yJzogJ2NvbmR1Y3RvcicsXG4gICAgJ1dNL01vZGlmaWVkQnknOiAncmVtaXhlcicsXG4gICAgJ1dNL0VuZ2luZWVyJzogJ2VuZ2luZWVyJyxcbiAgICAnV00vUHJvZHVjZXInOiAncHJvZHVjZXInLFxuICAgICdXTS9ESk1peGVyJzogJ2RqbWl4ZXInLFxuICAgICdXTS9NaXhlcic6ICdtaXhlcicsXG4gICAgJ1dNL1B1Ymxpc2hlcic6ICdsYWJlbCcsXG4gICAgJ1dNL0NvbnRlbnRHcm91cERlc2NyaXB0aW9uJzogJ2dyb3VwaW5nJyxcbiAgICAnV00vU3ViVGl0bGUnOiAnc3VidGl0bGUnLFxuICAgICdXTS9TZXRTdWJUaXRsZSc6ICdkaXNjc3VidGl0bGUnLFxuICAgIC8vICdXTS9QYXJ0T2ZTZXQnOiAndG90YWxkaXNjcycsXG4gICAgJ1dNL0lzQ29tcGlsYXRpb24nOiAnY29tcGlsYXRpb24nLFxuICAgICdXTS9TaGFyZWRVc2VyUmF0aW5nJzogJ3JhdGluZycsXG4gICAgJ1dNL0JlYXRzUGVyTWludXRlJzogJ2JwbScsXG4gICAgJ1dNL01vb2QnOiAnbW9vZCcsXG4gICAgJ1dNL01lZGlhJzogJ21lZGlhJyxcbiAgICAnV00vQ2F0YWxvZ05vJzogJ2NhdGFsb2dudW1iZXInLFxuICAgICdNdXNpY0JyYWluei9BbGJ1bSBTdGF0dXMnOiAncmVsZWFzZXN0YXR1cycsXG4gICAgJ011c2ljQnJhaW56L0FsYnVtIFR5cGUnOiAncmVsZWFzZXR5cGUnLFxuICAgICdNdXNpY0JyYWluei9BbGJ1bSBSZWxlYXNlIENvdW50cnknOiAncmVsZWFzZWNvdW50cnknLFxuICAgICdXTS9TY3JpcHQnOiAnc2NyaXB0JyxcbiAgICAnV00vTGFuZ3VhZ2UnOiAnbGFuZ3VhZ2UnLFxuICAgIENvcHlyaWdodDogJ2NvcHlyaWdodCcsXG4gICAgTElDRU5TRTogJ2xpY2Vuc2UnLFxuICAgICdXTS9FbmNvZGVkQnknOiAnZW5jb2RlZGJ5JyxcbiAgICAnV00vRW5jb2RpbmdTZXR0aW5ncyc6ICdlbmNvZGVyc2V0dGluZ3MnLFxuICAgICdXTS9CYXJjb2RlJzogJ2JhcmNvZGUnLFxuICAgICdXTS9JU1JDJzogJ2lzcmMnLFxuICAgICdNdXNpY0JyYWluei9UcmFjayBJZCc6ICdtdXNpY2JyYWluel9yZWNvcmRpbmdpZCcsXG4gICAgJ011c2ljQnJhaW56L1JlbGVhc2UgVHJhY2sgSWQnOiAnbXVzaWNicmFpbnpfdHJhY2tpZCcsXG4gICAgJ011c2ljQnJhaW56L0FsYnVtIElkJzogJ211c2ljYnJhaW56X2FsYnVtaWQnLFxuICAgICdNdXNpY0JyYWluei9BcnRpc3QgSWQnOiAnbXVzaWNicmFpbnpfYXJ0aXN0aWQnLFxuICAgICdNdXNpY0JyYWluei9BbGJ1bSBBcnRpc3QgSWQnOiAnbXVzaWNicmFpbnpfYWxidW1hcnRpc3RpZCcsXG4gICAgJ011c2ljQnJhaW56L1JlbGVhc2UgR3JvdXAgSWQnOiAnbXVzaWNicmFpbnpfcmVsZWFzZWdyb3VwaWQnLFxuICAgICdNdXNpY0JyYWluei9Xb3JrIElkJzogJ211c2ljYnJhaW56X3dvcmtpZCcsXG4gICAgJ011c2ljQnJhaW56L1RSTSBJZCc6ICdtdXNpY2JyYWluel90cm1pZCcsXG4gICAgJ011c2ljQnJhaW56L0Rpc2MgSWQnOiAnbXVzaWNicmFpbnpfZGlzY2lkJyxcbiAgICAnQWNvdXN0aWQvSWQnOiAnYWNvdXN0aWRfaWQnLFxuICAgICdBY291c3RpZC9GaW5nZXJwcmludCc6ICdhY291c3RpZF9maW5nZXJwcmludCcsXG4gICAgJ011c2ljSVAvUFVJRCc6ICdtdXNpY2lwX3B1aWQnLFxuICAgICdXTS9BUlRJU1RTJzogJ2FydGlzdHMnLFxuICAgICdXTS9Jbml0aWFsS2V5JzogJ2tleScsXG4gICAgQVNJTjogJ2FzaW4nLFxuICAgICdXTS9Xb3JrJzogJ3dvcmsnLFxuICAgICdXTS9BdXRob3JVUkwnOiAnd2Vic2l0ZScsXG4gICAgJ1dNL1BpY3R1cmUnOiAncGljdHVyZSdcbn07XG5jbGFzcyBBc2ZUYWdNYXBwZXIgZXh0ZW5kcyBHZW5lcmljVGFnTWFwcGVyXzEuQ29tbW9uVGFnTWFwcGVyIHtcbiAgICBzdGF0aWMgdG9SYXRpbmcocmF0aW5nKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByYXRpbmc6IHBhcnNlRmxvYXQocmF0aW5nICsgMSkgLyA1XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihbJ2FzZiddLCBhc2ZUYWdNYXApO1xuICAgIH1cbiAgICBwb3N0TWFwKHRhZykge1xuICAgICAgICBzd2l0Y2ggKHRhZy5pZCkge1xuICAgICAgICAgICAgY2FzZSAnV00vU2hhcmVkVXNlclJhdGluZyc6XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IHRhZy5pZC5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgIHRhZy52YWx1ZSA9IEFzZlRhZ01hcHBlci50b1JhdGluZyh0YWcudmFsdWUpO1xuICAgICAgICAgICAgICAgIHRhZy5pZCA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFzZlRhZ01hcHBlciA9IEFzZlRhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzZlRhZ01hcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/asf/AsfTagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/asf/AsfUtil.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/AsfUtil.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AsfUtil = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nclass AsfUtil {\n    static getParserForAttr(i) {\n        return AsfUtil.attributeParsers[i];\n    }\n    static parseUnicodeAttr(uint8Array) {\n        return util.stripNulls(util.decodeString(uint8Array, 'utf16le'));\n    }\n    static parseByteArrayAttr(buf) {\n        return Buffer.from(buf);\n    }\n    static parseBoolAttr(buf, offset = 0) {\n        return AsfUtil.parseWordAttr(buf, offset) === 1;\n    }\n    static parseDWordAttr(buf, offset = 0) {\n        return buf.readUInt32LE(offset);\n    }\n    static parseQWordAttr(buf, offset = 0) {\n        return Token.UINT64_LE.get(buf, offset);\n    }\n    static parseWordAttr(buf, offset = 0) {\n        return buf.readUInt16LE(offset);\n    }\n}\nAsfUtil.attributeParsers = [\n    AsfUtil.parseUnicodeAttr,\n    AsfUtil.parseByteArrayAttr,\n    AsfUtil.parseBoolAttr,\n    AsfUtil.parseDWordAttr,\n    AsfUtil.parseQWordAttr,\n    AsfUtil.parseWordAttr,\n    AsfUtil.parseByteArrayAttr\n];\nexports.AsfUtil = AsfUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2FzZi9Bc2ZVdGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLDhFQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9hc2YvQXNmVXRpbC5qcz9jODZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc2ZVdGlsID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4uL2NvbW1vbi9VdGlsXCIpO1xuY2xhc3MgQXNmVXRpbCB7XG4gICAgc3RhdGljIGdldFBhcnNlckZvckF0dHIoaSkge1xuICAgICAgICByZXR1cm4gQXNmVXRpbC5hdHRyaWJ1dGVQYXJzZXJzW2ldO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VVbmljb2RlQXR0cih1aW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiB1dGlsLnN0cmlwTnVsbHModXRpbC5kZWNvZGVTdHJpbmcodWludDhBcnJheSwgJ3V0ZjE2bGUnKSk7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZUJ5dGVBcnJheUF0dHIoYnVmKSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShidWYpO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VCb29sQXR0cihidWYsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIEFzZlV0aWwucGFyc2VXb3JkQXR0cihidWYsIG9mZnNldCkgPT09IDE7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZURXb3JkQXR0cihidWYsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDMyTEUob2Zmc2V0KTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlUVdvcmRBdHRyKGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gVG9rZW4uVUlOVDY0X0xFLmdldChidWYsIG9mZnNldCk7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZVdvcmRBdHRyKGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZMRShvZmZzZXQpO1xuICAgIH1cbn1cbkFzZlV0aWwuYXR0cmlidXRlUGFyc2VycyA9IFtcbiAgICBBc2ZVdGlsLnBhcnNlVW5pY29kZUF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZUJ5dGVBcnJheUF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZUJvb2xBdHRyLFxuICAgIEFzZlV0aWwucGFyc2VEV29yZEF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZVFXb3JkQXR0cixcbiAgICBBc2ZVdGlsLnBhcnNlV29yZEF0dHIsXG4gICAgQXNmVXRpbC5wYXJzZUJ5dGVBcnJheUF0dHJcbl07XG5leHBvcnRzLkFzZlV0aWwgPSBBc2ZVdGlsO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/asf/AsfUtil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/asf/GUID.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/asf/GUID.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Ref:\n * - https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n *\n * ASF File Structure:\n * - https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n *\n * ASF GUIDs:\n * - http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html\n * - https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c\n */\nclass GUID {\n    static fromBin(bin, offset = 0) {\n        return new GUID(this.decode(bin, offset));\n    }\n    /**\n     * Decode GUID in format like \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\n     * @param objectId Binary GUID\n     * @param offset Read offset in bytes, default 0\n     * @returns GUID as dashed hexadecimal representation\n     */\n    static decode(objectId, offset = 0) {\n        const guid = objectId.readUInt32LE(offset).toString(16) + \"-\" +\n            objectId.readUInt16LE(offset + 4).toString(16) + \"-\" +\n            objectId.readUInt16LE(offset + 6).toString(16) + \"-\" +\n            objectId.readUInt16BE(offset + 8).toString(16) + \"-\" +\n            objectId.slice(offset + 10, offset + 16).toString('hex');\n        return guid.toUpperCase();\n    }\n    /**\n     * Decode stream type\n     * @param mediaType Media type GUID\n     * @returns Media type\n     */\n    static decodeMediaType(mediaType) {\n        switch (mediaType.str) {\n            case GUID.AudioMedia.str: return 'audio';\n            case GUID.VideoMedia.str: return 'video';\n            case GUID.CommandMedia.str: return 'command';\n            case GUID.Degradable_JPEG_Media.str: return 'degradable-jpeg';\n            case GUID.FileTransferMedia.str: return 'file-transfer';\n            case GUID.BinaryMedia.str: return 'binary';\n        }\n    }\n    /**\n     * Encode GUID\n     * @param guid GUID like: \"B503BF5F-2EA9-CF11-8EE3-00C00C205365\"\n     * @returns Encoded Binary GUID\n     */\n    static encode(str) {\n        const bin = Buffer.alloc(16);\n        bin.writeUInt32LE(parseInt(str.slice(0, 8), 16), 0);\n        bin.writeUInt16LE(parseInt(str.slice(9, 13), 16), 4);\n        bin.writeUInt16LE(parseInt(str.slice(14, 18), 16), 6);\n        Buffer.from(str.slice(19, 23), \"hex\").copy(bin, 8);\n        Buffer.from(str.slice(24), \"hex\").copy(bin, 10);\n        return bin;\n    }\n    constructor(str) {\n        this.str = str;\n    }\n    equals(guid) {\n        return this.str === guid.str;\n    }\n    toBin() {\n        return GUID.encode(this.str);\n    }\n}\n// 10.1 Top-level ASF object GUIDs\nGUID.HeaderObject = new GUID(\"75B22630-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.DataObject = new GUID(\"75B22636-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.SimpleIndexObject = new GUID(\"33000890-E5B1-11CF-89F4-00A0C90349CB\");\nGUID.IndexObject = new GUID(\"D6E229D3-35DA-11D1-9034-00A0C90349BE\");\nGUID.MediaObjectIndexObject = new GUID(\"FEB103F8-12AD-4C64-840F-2A1D2F7AD48C\");\nGUID.TimecodeIndexObject = new GUID(\"3CB73FD0-0C4A-4803-953D-EDF7B6228F0C\");\n// 10.2 Header Object GUIDs\nGUID.FilePropertiesObject = new GUID(\"8CABDCA1-A947-11CF-8EE4-00C00C205365\");\nGUID.StreamPropertiesObject = new GUID(\"B7DC0791-A9B7-11CF-8EE6-00C00C205365\");\nGUID.HeaderExtensionObject = new GUID(\"5FBF03B5-A92E-11CF-8EE3-00C00C205365\");\nGUID.CodecListObject = new GUID(\"86D15240-311D-11D0-A3A4-00A0C90348F6\");\nGUID.ScriptCommandObject = new GUID(\"1EFB1A30-0B62-11D0-A39B-00A0C90348F6\");\nGUID.MarkerObject = new GUID(\"F487CD01-A951-11CF-8EE6-00C00C205365\");\nGUID.BitrateMutualExclusionObject = new GUID(\"D6E229DC-35DA-11D1-9034-00A0C90349BE\");\nGUID.ErrorCorrectionObject = new GUID(\"75B22635-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.ContentDescriptionObject = new GUID(\"75B22633-668E-11CF-A6D9-00AA0062CE6C\");\nGUID.ExtendedContentDescriptionObject = new GUID(\"D2D0A440-E307-11D2-97F0-00A0C95EA850\");\nGUID.ContentBrandingObject = new GUID(\"2211B3FA-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.StreamBitratePropertiesObject = new GUID(\"7BF875CE-468D-11D1-8D82-006097C9A2B2\");\nGUID.ContentEncryptionObject = new GUID(\"2211B3FB-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.ExtendedContentEncryptionObject = new GUID(\"298AE614-2622-4C17-B935-DAE07EE9289C\");\nGUID.DigitalSignatureObject = new GUID(\"2211B3FC-BD23-11D2-B4B7-00A0C955FC6E\");\nGUID.PaddingObject = new GUID(\"1806D474-CADF-4509-A4BA-9AABCB96AAE8\");\n// 10.3 Header Extension Object GUIDs\nGUID.ExtendedStreamPropertiesObject = new GUID(\"14E6A5CB-C672-4332-8399-A96952065B5A\");\nGUID.AdvancedMutualExclusionObject = new GUID(\"A08649CF-4775-4670-8A16-6E35357566CD\");\nGUID.GroupMutualExclusionObject = new GUID(\"D1465A40-5A79-4338-B71B-E36B8FD6C249\");\nGUID.StreamPrioritizationObject = new GUID(\"D4FED15B-88D3-454F-81F0-ED5C45999E24\");\nGUID.BandwidthSharingObject = new GUID(\"A69609E6-517B-11D2-B6AF-00C04FD908E9\");\nGUID.LanguageListObject = new GUID(\"7C4346A9-EFE0-4BFC-B229-393EDE415C85\");\nGUID.MetadataObject = new GUID(\"C5F8CBEA-5BAF-4877-8467-AA8C44FA4CCA\");\nGUID.MetadataLibraryObject = new GUID(\"44231C94-9498-49D1-A141-1D134E457054\");\nGUID.IndexParametersObject = new GUID(\"D6E229DF-35DA-11D1-9034-00A0C90349BE\");\nGUID.MediaObjectIndexParametersObject = new GUID(\"6B203BAD-3F11-48E4-ACA8-D7613DE2CFA7\");\nGUID.TimecodeIndexParametersObject = new GUID(\"F55E496D-9797-4B5D-8C8B-604DFE9BFB24\");\nGUID.CompatibilityObject = new GUID(\"26F18B5D-4584-47EC-9F5F-0E651F0452C9\");\nGUID.AdvancedContentEncryptionObject = new GUID(\"43058533-6981-49E6-9B74-AD12CB86D58C\");\n// 10.4 Stream Properties Object Stream Type GUIDs\nGUID.AudioMedia = new GUID(\"F8699E40-5B4D-11CF-A8FD-00805F5C442B\");\nGUID.VideoMedia = new GUID(\"BC19EFC0-5B4D-11CF-A8FD-00805F5C442B\");\nGUID.CommandMedia = new GUID(\"59DACFC0-59E6-11D0-A3AC-00A0C90348F6\");\nGUID.JFIF_Media = new GUID(\"B61BE100-5B4E-11CF-A8FD-00805F5C442B\");\nGUID.Degradable_JPEG_Media = new GUID(\"35907DE0-E415-11CF-A917-00805F5C442B\");\nGUID.FileTransferMedia = new GUID(\"91BD222C-F21C-497A-8B6D-5AA86BFC0185\");\nGUID.BinaryMedia = new GUID(\"3AFB65E2-47EF-40F2-AC2C-70A90D71D343\");\nGUID.ASF_Index_Placeholder_Object = new GUID(\"D9AADE20-7C17-4F9C-BC28-8555DD98E2A2\");\nexports[\"default\"] = GUID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/asf/GUID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/BasicParser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BasicParser = void 0;\nclass BasicParser {\n    /**\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\n     * @param {INativeMetadataCollector} metadata Output\n     * @param {ITokenizer} tokenizer Input\n     * @param {IOptions} options Parsing options\n     */\n    init(metadata, tokenizer, options) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n        this.options = options;\n        return this;\n    }\n}\nexports.BasicParser = BasicParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9CYXNpY1BhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwQkFBMEI7QUFDekMsZUFBZSxZQUFZO0FBQzNCLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9CYXNpY1BhcnNlci5qcz9jMjM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYXNpY1BhcnNlciA9IHZvaWQgMDtcbmNsYXNzIEJhc2ljUGFyc2VyIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHBhcnNlciB3aXRoIG91dHB1dCAobWV0YWRhdGEpLCBpbnB1dCAodG9rZW5pemVyKSAmIHBhcnNpbmcgb3B0aW9ucyAob3B0aW9ucykuXG4gICAgICogQHBhcmFtIHtJTmF0aXZlTWV0YWRhdGFDb2xsZWN0b3J9IG1ldGFkYXRhIE91dHB1dFxuICAgICAqIEBwYXJhbSB7SVRva2VuaXplcn0gdG9rZW5pemVyIElucHV0XG4gICAgICogQHBhcmFtIHtJT3B0aW9uc30gb3B0aW9ucyBQYXJzaW5nIG9wdGlvbnNcbiAgICAgKi9cbiAgICBpbml0KG1ldGFkYXRhLCB0b2tlbml6ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5CYXNpY1BhcnNlciA9IEJhc2ljUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js":
/*!*************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CaseInsensitiveTagMap = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ./GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\nclass CaseInsensitiveTagMap extends GenericTagMapper_1.CommonTagMapper {\n    constructor(tagTypes, tagMap) {\n        const upperCaseMap = {};\n        for (const tag of Object.keys(tagMap)) {\n            upperCaseMap[tag.toUpperCase()] = tagMap[tag];\n        }\n        super(tagTypes, upperCaseMap);\n    }\n    /**\n     * @tag  Native header tag\n     * @return common tag name (alias)\n     */\n    getCommonName(tag) {\n        return this.tagMap[tag.toUpperCase()];\n    }\n}\nexports.CaseInsensitiveTagMap = CaseInsensitiveTagMap;\n//# sourceMappingURL=CaseInsensitiveTagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9DYXNlSW5zZW5zaXRpdmVUYWdNYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLDJCQUEyQixtQkFBTyxDQUFDLDhGQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9jb21tb24vQ2FzZUluc2Vuc2l0aXZlVGFnTWFwLmpzPzgxYjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhc2VJbnNlbnNpdGl2ZVRhZ01hcCA9IHZvaWQgMDtcbmNvbnN0IEdlbmVyaWNUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuL0dlbmVyaWNUYWdNYXBwZXJcIik7XG5jbGFzcyBDYXNlSW5zZW5zaXRpdmVUYWdNYXAgZXh0ZW5kcyBHZW5lcmljVGFnTWFwcGVyXzEuQ29tbW9uVGFnTWFwcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0YWdUeXBlcywgdGFnTWFwKSB7XG4gICAgICAgIGNvbnN0IHVwcGVyQ2FzZU1hcCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiBPYmplY3Qua2V5cyh0YWdNYXApKSB7XG4gICAgICAgICAgICB1cHBlckNhc2VNYXBbdGFnLnRvVXBwZXJDYXNlKCldID0gdGFnTWFwW3RhZ107XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIodGFnVHlwZXMsIHVwcGVyQ2FzZU1hcCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEB0YWcgIE5hdGl2ZSBoZWFkZXIgdGFnXG4gICAgICogQHJldHVybiBjb21tb24gdGFnIG5hbWUgKGFsaWFzKVxuICAgICAqL1xuICAgIGdldENvbW1vbk5hbWUodGFnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZ01hcFt0YWcudG9VcHBlckNhc2UoKV07XG4gICAgfVxufVxuZXhwb3J0cy5DYXNlSW5zZW5zaXRpdmVUYWdNYXAgPSBDYXNlSW5zZW5zaXRpdmVUYWdNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYXNlSW5zZW5zaXRpdmVUYWdNYXAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/CombinedTagMapper.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/CombinedTagMapper.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CombinedTagMapper = void 0;\nconst ID3v1TagMap_1 = __webpack_require__(/*! ../id3v1/ID3v1TagMap */ \"(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js\");\nconst ID3v24TagMapper_1 = __webpack_require__(/*! ../id3v2/ID3v24TagMapper */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js\");\nconst AsfTagMapper_1 = __webpack_require__(/*! ../asf/AsfTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/asf/AsfTagMapper.js\");\nconst ID3v22TagMapper_1 = __webpack_require__(/*! ../id3v2/ID3v22TagMapper */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js\");\nconst APEv2TagMapper_1 = __webpack_require__(/*! ../apev2/APEv2TagMapper */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2TagMapper.js\");\nconst MP4TagMapper_1 = __webpack_require__(/*! ../mp4/MP4TagMapper */ \"(ssr)/./node_modules/music-metadata/lib/mp4/MP4TagMapper.js\");\nconst VorbisTagMapper_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js\");\nconst RiffInfoTagMap_1 = __webpack_require__(/*! ../riff/RiffInfoTagMap */ \"(ssr)/./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js\");\nconst MatroskaTagMapper_1 = __webpack_require__(/*! ../matroska/MatroskaTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js\");\nconst AiffTagMap_1 = __webpack_require__(/*! ../aiff/AiffTagMap */ \"(ssr)/./node_modules/music-metadata/lib/aiff/AiffTagMap.js\");\nclass CombinedTagMapper {\n    constructor() {\n        this.tagMappers = {};\n        [\n            new ID3v1TagMap_1.ID3v1TagMapper(),\n            new ID3v22TagMapper_1.ID3v22TagMapper(),\n            new ID3v24TagMapper_1.ID3v24TagMapper(),\n            new MP4TagMapper_1.MP4TagMapper(),\n            new MP4TagMapper_1.MP4TagMapper(),\n            new VorbisTagMapper_1.VorbisTagMapper(),\n            new APEv2TagMapper_1.APEv2TagMapper(),\n            new AsfTagMapper_1.AsfTagMapper(),\n            new RiffInfoTagMap_1.RiffInfoTagMapper(),\n            new MatroskaTagMapper_1.MatroskaTagMapper(),\n            new AiffTagMap_1.AiffTagMapper()\n        ].forEach(mapper => {\n            this.registerTagMapper(mapper);\n        });\n    }\n    /**\n     * Convert native to generic (common) tags\n     * @param tagType Originating tag format\n     * @param tag     Native tag to map to a generic tag id\n     * @param warnings\n     * @return Generic tag result (output of this function)\n     */\n    mapTag(tagType, tag, warnings) {\n        const tagMapper = this.tagMappers[tagType];\n        if (tagMapper) {\n            return this.tagMappers[tagType].mapGenericTag(tag, warnings);\n        }\n        throw new Error('No generic tag mapper defined for tag-format: ' + tagType);\n    }\n    registerTagMapper(genericTagMapper) {\n        for (const tagType of genericTagMapper.tagTypes) {\n            this.tagMappers[tagType] = genericTagMapper;\n        }\n    }\n}\nexports.CombinedTagMapper = CombinedTagMapper;\n//# sourceMappingURL=CombinedTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9Db21iaW5lZFRhZ01hcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsc0JBQXNCLG1CQUFPLENBQUMsMEZBQXNCO0FBQ3BELDBCQUEwQixtQkFBTyxDQUFDLGtHQUEwQjtBQUM1RCx1QkFBdUIsbUJBQU8sQ0FBQyx3RkFBcUI7QUFDcEQsMEJBQTBCLG1CQUFPLENBQUMsa0dBQTBCO0FBQzVELHlCQUF5QixtQkFBTyxDQUFDLGdHQUF5QjtBQUMxRCx1QkFBdUIsbUJBQU8sQ0FBQyx3RkFBcUI7QUFDcEQsMEJBQTBCLG1CQUFPLENBQUMsNEdBQStCO0FBQ2pFLHlCQUF5QixtQkFBTyxDQUFDLDhGQUF3QjtBQUN6RCw0QkFBNEIsbUJBQU8sQ0FBQyw0R0FBK0I7QUFDbkUscUJBQXFCLG1CQUFPLENBQUMsc0ZBQW9CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9Db21iaW5lZFRhZ01hcHBlci5qcz83ZjI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21iaW5lZFRhZ01hcHBlciA9IHZvaWQgMDtcbmNvbnN0IElEM3YxVGFnTWFwXzEgPSByZXF1aXJlKFwiLi4vaWQzdjEvSUQzdjFUYWdNYXBcIik7XG5jb25zdCBJRDN2MjRUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9pZDN2Mi9JRDN2MjRUYWdNYXBwZXJcIik7XG5jb25zdCBBc2ZUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9hc2YvQXNmVGFnTWFwcGVyXCIpO1xuY29uc3QgSUQzdjIyVGFnTWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vaWQzdjIvSUQzdjIyVGFnTWFwcGVyXCIpO1xuY29uc3QgQVBFdjJUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9hcGV2Mi9BUEV2MlRhZ01hcHBlclwiKTtcbmNvbnN0IE1QNFRhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL21wNC9NUDRUYWdNYXBwZXJcIik7XG5jb25zdCBWb3JiaXNUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9vZ2cvdm9yYmlzL1ZvcmJpc1RhZ01hcHBlclwiKTtcbmNvbnN0IFJpZmZJbmZvVGFnTWFwXzEgPSByZXF1aXJlKFwiLi4vcmlmZi9SaWZmSW5mb1RhZ01hcFwiKTtcbmNvbnN0IE1hdHJvc2thVGFnTWFwcGVyXzEgPSByZXF1aXJlKFwiLi4vbWF0cm9za2EvTWF0cm9za2FUYWdNYXBwZXJcIik7XG5jb25zdCBBaWZmVGFnTWFwXzEgPSByZXF1aXJlKFwiLi4vYWlmZi9BaWZmVGFnTWFwXCIpO1xuY2xhc3MgQ29tYmluZWRUYWdNYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRhZ01hcHBlcnMgPSB7fTtcbiAgICAgICAgW1xuICAgICAgICAgICAgbmV3IElEM3YxVGFnTWFwXzEuSUQzdjFUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBJRDN2MjJUYWdNYXBwZXJfMS5JRDN2MjJUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBJRDN2MjRUYWdNYXBwZXJfMS5JRDN2MjRUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBNUDRUYWdNYXBwZXJfMS5NUDRUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBNUDRUYWdNYXBwZXJfMS5NUDRUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBWb3JiaXNUYWdNYXBwZXJfMS5Wb3JiaXNUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBBUEV2MlRhZ01hcHBlcl8xLkFQRXYyVGFnTWFwcGVyKCksXG4gICAgICAgICAgICBuZXcgQXNmVGFnTWFwcGVyXzEuQXNmVGFnTWFwcGVyKCksXG4gICAgICAgICAgICBuZXcgUmlmZkluZm9UYWdNYXBfMS5SaWZmSW5mb1RhZ01hcHBlcigpLFxuICAgICAgICAgICAgbmV3IE1hdHJvc2thVGFnTWFwcGVyXzEuTWF0cm9za2FUYWdNYXBwZXIoKSxcbiAgICAgICAgICAgIG5ldyBBaWZmVGFnTWFwXzEuQWlmZlRhZ01hcHBlcigpXG4gICAgICAgIF0uZm9yRWFjaChtYXBwZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlclRhZ01hcHBlcihtYXBwZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBuYXRpdmUgdG8gZ2VuZXJpYyAoY29tbW9uKSB0YWdzXG4gICAgICogQHBhcmFtIHRhZ1R5cGUgT3JpZ2luYXRpbmcgdGFnIGZvcm1hdFxuICAgICAqIEBwYXJhbSB0YWcgICAgIE5hdGl2ZSB0YWcgdG8gbWFwIHRvIGEgZ2VuZXJpYyB0YWcgaWRcbiAgICAgKiBAcGFyYW0gd2FybmluZ3NcbiAgICAgKiBAcmV0dXJuIEdlbmVyaWMgdGFnIHJlc3VsdCAob3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24pXG4gICAgICovXG4gICAgbWFwVGFnKHRhZ1R5cGUsIHRhZywgd2FybmluZ3MpIHtcbiAgICAgICAgY29uc3QgdGFnTWFwcGVyID0gdGhpcy50YWdNYXBwZXJzW3RhZ1R5cGVdO1xuICAgICAgICBpZiAodGFnTWFwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50YWdNYXBwZXJzW3RhZ1R5cGVdLm1hcEdlbmVyaWNUYWcodGFnLCB3YXJuaW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBnZW5lcmljIHRhZyBtYXBwZXIgZGVmaW5lZCBmb3IgdGFnLWZvcm1hdDogJyArIHRhZ1R5cGUpO1xuICAgIH1cbiAgICByZWdpc3RlclRhZ01hcHBlcihnZW5lcmljVGFnTWFwcGVyKSB7XG4gICAgICAgIGZvciAoY29uc3QgdGFnVHlwZSBvZiBnZW5lcmljVGFnTWFwcGVyLnRhZ1R5cGVzKSB7XG4gICAgICAgICAgICB0aGlzLnRhZ01hcHBlcnNbdGFnVHlwZV0gPSBnZW5lcmljVGFnTWFwcGVyO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Db21iaW5lZFRhZ01hcHBlciA9IENvbWJpbmVkVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tYmluZWRUYWdNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/CombinedTagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/FourCC.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/FourCC.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FourCcToken = void 0;\nconst util = __webpack_require__(/*! ./Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst validFourCC = /^[\\x21-\\x7e©][\\x20-\\x7e\\x00()]{3}/;\n/**\n * Token for read FourCC\n * Ref: https://en.wikipedia.org/wiki/FourCC\n */\nexports.FourCcToken = {\n    len: 4,\n    get: (buf, off) => {\n        const id = buf.toString('binary', off, off + exports.FourCcToken.len);\n        if (!id.match(validFourCC)) {\n            throw new Error(`FourCC contains invalid characters: ${util.a2hex(id)} \"${id}\"`);\n        }\n        return id;\n    },\n    put: (buffer, offset, id) => {\n        const str = Buffer.from(id, 'binary');\n        if (str.length !== 4)\n            throw new Error('Invalid length');\n        return str.copy(buffer, offset);\n    }\n};\n//# sourceMappingURL=FourCC.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9Gb3VyQ0MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLGFBQWEsbUJBQU8sQ0FBQyxzRUFBUTtBQUM3QixvREFBb0QsRUFBRTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxnQkFBZ0IsR0FBRyxHQUFHO0FBQ3pGO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9jb21tb24vRm91ckNDLmpzPzk4NmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZvdXJDY1Rva2VuID0gdm9pZCAwO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuL1V0aWxcIik7XG5jb25zdCB2YWxpZEZvdXJDQyA9IC9eW1xceDIxLVxceDdlwqldW1xceDIwLVxceDdlXFx4MDAoKV17M30vO1xuLyoqXG4gKiBUb2tlbiBmb3IgcmVhZCBGb3VyQ0NcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRm91ckNDXG4gKi9cbmV4cG9ydHMuRm91ckNjVG9rZW4gPSB7XG4gICAgbGVuOiA0LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gYnVmLnRvU3RyaW5nKCdiaW5hcnknLCBvZmYsIG9mZiArIGV4cG9ydHMuRm91ckNjVG9rZW4ubGVuKTtcbiAgICAgICAgaWYgKCFpZC5tYXRjaCh2YWxpZEZvdXJDQykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRm91ckNDIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyczogJHt1dGlsLmEyaGV4KGlkKX0gXCIke2lkfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH0sXG4gICAgcHV0OiAoYnVmZmVyLCBvZmZzZXQsIGlkKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0ciA9IEJ1ZmZlci5mcm9tKGlkLCAnYmluYXJ5Jyk7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoICE9PSA0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxlbmd0aCcpO1xuICAgICAgICByZXR1cm4gc3RyLmNvcHkoYnVmZmVyLCBvZmZzZXQpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Gb3VyQ0MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/GenericTagMapper.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommonTagMapper = void 0;\nclass CommonTagMapper {\n    static toIntOrNull(str) {\n        const cleaned = parseInt(str, 10);\n        return isNaN(cleaned) ? null : cleaned;\n    }\n    // TODO: a string of 1of1 would fail to be converted\n    // converts 1/10 to no : 1, of : 10\n    // or 1 to no : 1, of : 0\n    static normalizeTrack(origVal) {\n        const split = origVal.toString().split('/');\n        return {\n            no: parseInt(split[0], 10) || null,\n            of: parseInt(split[1], 10) || null\n        };\n    }\n    constructor(tagTypes, tagMap) {\n        this.tagTypes = tagTypes;\n        this.tagMap = tagMap;\n    }\n    /**\n     * Process and set common tags\n     * write common tags to\n     * @param tag Native tag\n     * @param warnings Register warnings\n     * @return common name\n     */\n    mapGenericTag(tag, warnings) {\n        tag = { id: tag.id, value: tag.value }; // clone object\n        this.postMap(tag, warnings);\n        // Convert native tag event to generic 'alias' tag\n        const id = this.getCommonName(tag.id);\n        return id ? { id, value: tag.value } : null;\n    }\n    /**\n     * Convert native tag key to common tag key\n     * @tag  Native header tag\n     * @return common tag name (alias)\n     */\n    getCommonName(tag) {\n        return this.tagMap[tag];\n    }\n    /**\n     * Handle post mapping exceptions / correction\n     * @param tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\n     * @param warnings Used to register warnings\n     */\n    postMap(tag, warnings) {\n        return;\n    }\n}\nCommonTagMapper.maxRatingScore = 1;\nexports.CommonTagMapper = CommonTagMapper;\n//# sourceMappingURL=GenericTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0NBQWdDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1QkFBdUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9jb21tb24vR2VuZXJpY1RhZ01hcHBlci5qcz9kM2E0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21tb25UYWdNYXBwZXIgPSB2b2lkIDA7XG5jbGFzcyBDb21tb25UYWdNYXBwZXIge1xuICAgIHN0YXRpYyB0b0ludE9yTnVsbChzdHIpIHtcbiAgICAgICAgY29uc3QgY2xlYW5lZCA9IHBhcnNlSW50KHN0ciwgMTApO1xuICAgICAgICByZXR1cm4gaXNOYU4oY2xlYW5lZCkgPyBudWxsIDogY2xlYW5lZDtcbiAgICB9XG4gICAgLy8gVE9ETzogYSBzdHJpbmcgb2YgMW9mMSB3b3VsZCBmYWlsIHRvIGJlIGNvbnZlcnRlZFxuICAgIC8vIGNvbnZlcnRzIDEvMTAgdG8gbm8gOiAxLCBvZiA6IDEwXG4gICAgLy8gb3IgMSB0byBubyA6IDEsIG9mIDogMFxuICAgIHN0YXRpYyBub3JtYWxpemVUcmFjayhvcmlnVmFsKSB7XG4gICAgICAgIGNvbnN0IHNwbGl0ID0gb3JpZ1ZhbC50b1N0cmluZygpLnNwbGl0KCcvJyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBubzogcGFyc2VJbnQoc3BsaXRbMF0sIDEwKSB8fCBudWxsLFxuICAgICAgICAgICAgb2Y6IHBhcnNlSW50KHNwbGl0WzFdLCAxMCkgfHwgbnVsbFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih0YWdUeXBlcywgdGFnTWFwKSB7XG4gICAgICAgIHRoaXMudGFnVHlwZXMgPSB0YWdUeXBlcztcbiAgICAgICAgdGhpcy50YWdNYXAgPSB0YWdNYXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYW5kIHNldCBjb21tb24gdGFnc1xuICAgICAqIHdyaXRlIGNvbW1vbiB0YWdzIHRvXG4gICAgICogQHBhcmFtIHRhZyBOYXRpdmUgdGFnXG4gICAgICogQHBhcmFtIHdhcm5pbmdzIFJlZ2lzdGVyIHdhcm5pbmdzXG4gICAgICogQHJldHVybiBjb21tb24gbmFtZVxuICAgICAqL1xuICAgIG1hcEdlbmVyaWNUYWcodGFnLCB3YXJuaW5ncykge1xuICAgICAgICB0YWcgPSB7IGlkOiB0YWcuaWQsIHZhbHVlOiB0YWcudmFsdWUgfTsgLy8gY2xvbmUgb2JqZWN0XG4gICAgICAgIHRoaXMucG9zdE1hcCh0YWcsIHdhcm5pbmdzKTtcbiAgICAgICAgLy8gQ29udmVydCBuYXRpdmUgdGFnIGV2ZW50IHRvIGdlbmVyaWMgJ2FsaWFzJyB0YWdcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldENvbW1vbk5hbWUodGFnLmlkKTtcbiAgICAgICAgcmV0dXJuIGlkID8geyBpZCwgdmFsdWU6IHRhZy52YWx1ZSB9IDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBuYXRpdmUgdGFnIGtleSB0byBjb21tb24gdGFnIGtleVxuICAgICAqIEB0YWcgIE5hdGl2ZSBoZWFkZXIgdGFnXG4gICAgICogQHJldHVybiBjb21tb24gdGFnIG5hbWUgKGFsaWFzKVxuICAgICAqL1xuICAgIGdldENvbW1vbk5hbWUodGFnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhZ01hcFt0YWddO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgcG9zdCBtYXBwaW5nIGV4Y2VwdGlvbnMgLyBjb3JyZWN0aW9uXG4gICAgICogQHBhcmFtIHRhZyBUYWcgZS5nLiB7XCLCqWFsYlwiLCBcIkJ1ZW5hIFZpc3RhIFNvY2lhbCBDbHViXCIpXG4gICAgICogQHBhcmFtIHdhcm5pbmdzIFVzZWQgdG8gcmVnaXN0ZXIgd2FybmluZ3NcbiAgICAgKi9cbiAgICBwb3N0TWFwKHRhZywgd2FybmluZ3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cbkNvbW1vblRhZ01hcHBlci5tYXhSYXRpbmdTY29yZSA9IDE7XG5leHBvcnRzLkNvbW1vblRhZ01hcHBlciA9IENvbW1vblRhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlbmVyaWNUYWdNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/GenericTagTypes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/GenericTagTypes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isUnique = exports.isSingleton = exports.commonTags = void 0;\nexports.commonTags = {\n    year: { multiple: false },\n    track: { multiple: false },\n    disk: { multiple: false },\n    title: { multiple: false },\n    artist: { multiple: false },\n    artists: { multiple: true, unique: true },\n    albumartist: { multiple: false },\n    album: { multiple: false },\n    date: { multiple: false },\n    originaldate: { multiple: false },\n    originalyear: { multiple: false },\n    comment: { multiple: true, unique: false },\n    genre: { multiple: true, unique: true },\n    picture: { multiple: true, unique: true },\n    composer: { multiple: true, unique: true },\n    lyrics: { multiple: true, unique: false },\n    albumsort: { multiple: false, unique: true },\n    titlesort: { multiple: false, unique: true },\n    work: { multiple: false, unique: true },\n    artistsort: { multiple: false, unique: true },\n    albumartistsort: { multiple: false, unique: true },\n    composersort: { multiple: false, unique: true },\n    lyricist: { multiple: true, unique: true },\n    writer: { multiple: true, unique: true },\n    conductor: { multiple: true, unique: true },\n    remixer: { multiple: true, unique: true },\n    arranger: { multiple: true, unique: true },\n    engineer: { multiple: true, unique: true },\n    producer: { multiple: true, unique: true },\n    technician: { multiple: true, unique: true },\n    djmixer: { multiple: true, unique: true },\n    mixer: { multiple: true, unique: true },\n    label: { multiple: true, unique: true },\n    grouping: { multiple: false },\n    subtitle: { multiple: true },\n    discsubtitle: { multiple: false },\n    totaltracks: { multiple: false },\n    totaldiscs: { multiple: false },\n    compilation: { multiple: false },\n    rating: { multiple: true },\n    bpm: { multiple: false },\n    mood: { multiple: false },\n    media: { multiple: false },\n    catalognumber: { multiple: true, unique: true },\n    tvShow: { multiple: false },\n    tvShowSort: { multiple: false },\n    tvSeason: { multiple: false },\n    tvEpisode: { multiple: false },\n    tvEpisodeId: { multiple: false },\n    tvNetwork: { multiple: false },\n    podcast: { multiple: false },\n    podcasturl: { multiple: false },\n    releasestatus: { multiple: false },\n    releasetype: { multiple: true },\n    releasecountry: { multiple: false },\n    script: { multiple: false },\n    language: { multiple: false },\n    copyright: { multiple: false },\n    license: { multiple: false },\n    encodedby: { multiple: false },\n    encodersettings: { multiple: false },\n    gapless: { multiple: false },\n    barcode: { multiple: false },\n    isrc: { multiple: true },\n    asin: { multiple: false },\n    musicbrainz_recordingid: { multiple: false },\n    musicbrainz_trackid: { multiple: false },\n    musicbrainz_albumid: { multiple: false },\n    musicbrainz_artistid: { multiple: true },\n    musicbrainz_albumartistid: { multiple: true },\n    musicbrainz_releasegroupid: { multiple: false },\n    musicbrainz_workid: { multiple: false },\n    musicbrainz_trmid: { multiple: false },\n    musicbrainz_discid: { multiple: false },\n    acoustid_id: { multiple: false },\n    acoustid_fingerprint: { multiple: false },\n    musicip_puid: { multiple: false },\n    musicip_fingerprint: { multiple: false },\n    website: { multiple: false },\n    'performer:instrument': { multiple: true, unique: true },\n    averageLevel: { multiple: false },\n    peakLevel: { multiple: false },\n    notes: { multiple: true, unique: false },\n    key: { multiple: false },\n    originalalbum: { multiple: false },\n    originalartist: { multiple: false },\n    discogs_artist_id: { multiple: true, unique: true },\n    discogs_release_id: { multiple: false },\n    discogs_label_id: { multiple: false },\n    discogs_master_release_id: { multiple: false },\n    discogs_votes: { multiple: false },\n    discogs_rating: { multiple: false },\n    replaygain_track_peak: { multiple: false },\n    replaygain_track_gain: { multiple: false },\n    replaygain_album_peak: { multiple: false },\n    replaygain_album_gain: { multiple: false },\n    replaygain_track_minmax: { multiple: false },\n    replaygain_album_minmax: { multiple: false },\n    replaygain_undo: { multiple: false },\n    description: { multiple: true },\n    longDescription: { multiple: false },\n    category: { multiple: true },\n    hdVideo: { multiple: false },\n    keywords: { multiple: true },\n    movement: { multiple: false },\n    movementIndex: { multiple: false },\n    movementTotal: { multiple: false },\n    podcastId: { multiple: false },\n    showMovement: { multiple: false },\n    stik: { multiple: false }\n};\n/**\n * @param alias Name of common tag\n * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false\n */\nfunction isSingleton(alias) {\n    return exports.commonTags.hasOwnProperty(alias) && !exports.commonTags[alias].multiple;\n}\nexports.isSingleton = isSingleton;\n/**\n * @param alias Common (generic) tag\n * @returns {boolean|*} true if given alias is a singleton or explicitly marked as unique\n */\nfunction isUnique(alias) {\n    return !exports.commonTags[alias].multiple || exports.commonTags[alias].unique;\n}\nexports.isUnique = isUnique;\n//# sourceMappingURL=GenericTagTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/GenericTagTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/MetadataCollector.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/MetadataCollector.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.joinArtists = exports.MetadataCollector = void 0;\nconst type_1 = __webpack_require__(/*! ../type */ \"(ssr)/./node_modules/music-metadata/lib/type.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst GenericTagTypes_1 = __webpack_require__(/*! ./GenericTagTypes */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagTypes.js\");\nconst CombinedTagMapper_1 = __webpack_require__(/*! ./CombinedTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/CombinedTagMapper.js\");\nconst GenericTagMapper_1 = __webpack_require__(/*! ./GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\nconst Util_1 = __webpack_require__(/*! ./Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst FileType = __webpack_require__(/*! file-type/core */ \"(ssr)/./node_modules/file-type/core.js\");\nconst debug = (0, debug_1.default)('music-metadata:collector');\nconst TagPriority = ['matroska', 'APEv2', 'vorbis', 'ID3v2.4', 'ID3v2.3', 'ID3v2.2', 'exif', 'asf', 'iTunes', 'AIFF', 'ID3v1'];\n/**\n * Provided to the parser to uodate the metadata result.\n * Responsible for triggering async updates\n */\nclass MetadataCollector {\n    constructor(opts) {\n        this.opts = opts;\n        this.format = {\n            tagTypes: [],\n            trackInfo: []\n        };\n        this.native = {};\n        this.common = {\n            track: { no: null, of: null },\n            disk: { no: null, of: null },\n            movementIndex: {}\n        };\n        this.quality = {\n            warnings: []\n        };\n        /**\n         * Keeps track of origin priority for each mapped id\n         */\n        this.commonOrigin = {};\n        /**\n         * Maps a tag type to a priority\n         */\n        this.originPriority = {};\n        this.tagMapper = new CombinedTagMapper_1.CombinedTagMapper();\n        let priority = 1;\n        for (const tagType of TagPriority) {\n            this.originPriority[tagType] = priority++;\n        }\n        this.originPriority.artificial = 500; // Filled using alternative tags\n        this.originPriority.id3v1 = 600; // Consider as the worst because of the field length limit\n    }\n    /**\n     * @returns {boolean} true if one or more tags have been found\n     */\n    hasAny() {\n        return Object.keys(this.native).length > 0;\n    }\n    addStreamInfo(streamInfo) {\n        debug(`streamInfo: type=${type_1.TrackType[streamInfo.type]}, codec=${streamInfo.codecName}`);\n        this.format.trackInfo.push(streamInfo);\n    }\n    setFormat(key, value) {\n        debug(`format: ${key} = ${value}`);\n        this.format[key] = value; // as any to override readonly\n        if (this.opts.observer) {\n            this.opts.observer({ metadata: this, tag: { type: 'format', id: key, value } });\n        }\n    }\n    addTag(tagType, tagId, value) {\n        debug(`tag ${tagType}.${tagId} = ${value}`);\n        if (!this.native[tagType]) {\n            this.format.tagTypes.push(tagType);\n            this.native[tagType] = [];\n        }\n        this.native[tagType].push({ id: tagId, value });\n        this.toCommon(tagType, tagId, value);\n    }\n    addWarning(warning) {\n        this.quality.warnings.push({ message: warning });\n    }\n    postMap(tagType, tag) {\n        // Common tag (alias) found\n        // check if we need to do something special with common tag\n        // if the event has been aliased then we need to clean it before\n        // it is emitted to the user. e.g. genre (20) -> Electronic\n        switch (tag.id) {\n            case 'artist':\n                if (this.commonOrigin.artist === this.originPriority[tagType]) {\n                    // Assume the artist field is used as artists\n                    return this.postMap('artificial', { id: 'artists', value: tag.value });\n                }\n                if (!this.common.artists) {\n                    // Fill artists using artist source\n                    this.setGenericTag('artificial', { id: 'artists', value: tag.value });\n                }\n                break;\n            case 'artists':\n                if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {\n                    if (!this.common.artists || this.common.artists.indexOf(tag.value) === -1) {\n                        // Fill artist using artists source\n                        const artists = (this.common.artists || []).concat([tag.value]);\n                        const value = joinArtists(artists);\n                        const artistTag = { id: 'artist', value };\n                        this.setGenericTag('artificial', artistTag);\n                    }\n                }\n                break;\n            case 'picture':\n                this.postFixPicture(tag.value).then(picture => {\n                    if (picture !== null) {\n                        tag.value = picture;\n                        this.setGenericTag(tagType, tag);\n                    }\n                });\n                return;\n            case 'totaltracks':\n                this.common.track.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\n                return;\n            case 'totaldiscs':\n                this.common.disk.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\n                return;\n            case 'movementTotal':\n                this.common.movementIndex.of = GenericTagMapper_1.CommonTagMapper.toIntOrNull(tag.value);\n                return;\n            case 'track':\n            case 'disk':\n            case 'movementIndex':\n                const of = this.common[tag.id].of; // store of value, maybe maybe overwritten\n                this.common[tag.id] = GenericTagMapper_1.CommonTagMapper.normalizeTrack(tag.value);\n                this.common[tag.id].of = of != null ? of : this.common[tag.id].of;\n                return;\n            case 'bpm':\n            case 'year':\n            case 'originalyear':\n                tag.value = parseInt(tag.value, 10);\n                break;\n            case 'date':\n                // ToDo: be more strict on 'YYYY...'\n                const year = parseInt(tag.value.substr(0, 4), 10);\n                if (!isNaN(year)) {\n                    this.common.year = year;\n                }\n                break;\n            case 'discogs_label_id':\n            case 'discogs_release_id':\n            case 'discogs_master_release_id':\n            case 'discogs_artist_id':\n            case 'discogs_votes':\n                tag.value = typeof tag.value === 'string' ? parseInt(tag.value, 10) : tag.value;\n                break;\n            case 'replaygain_track_gain':\n            case 'replaygain_track_peak':\n            case 'replaygain_album_gain':\n            case 'replaygain_album_peak':\n                tag.value = (0, Util_1.toRatio)(tag.value);\n                break;\n            case 'replaygain_track_minmax':\n                tag.value = tag.value.split(',').map(v => parseInt(v, 10));\n                break;\n            case 'replaygain_undo':\n                const minMix = tag.value.split(',').map(v => parseInt(v, 10));\n                tag.value = {\n                    leftChannel: minMix[0],\n                    rightChannel: minMix[1]\n                };\n                break;\n            case 'gapless': // iTunes gap-less flag\n            case 'compilation':\n            case 'podcast':\n            case 'showMovement':\n                tag.value = tag.value === '1' || tag.value === 1; // boolean\n                break;\n            case 'isrc': // Only keep unique values\n                if (this.common[tag.id] && this.common[tag.id].indexOf(tag.value) !== -1)\n                    return;\n                break;\n            default:\n            // nothing to do\n        }\n        if (tag.value !== null) {\n            this.setGenericTag(tagType, tag);\n        }\n    }\n    /**\n     * Convert native tags to common tags\n     * @returns {IAudioMetadata} Native + common tags\n     */\n    toCommonMetadata() {\n        return {\n            format: this.format,\n            native: this.native,\n            quality: this.quality,\n            common: this.common\n        };\n    }\n    /**\n     * Fix some common issues with picture object\n     * @param picture Picture\n     */\n    async postFixPicture(picture) {\n        if (picture.data && picture.data.length > 0) {\n            if (!picture.format) {\n                const fileType = await FileType.fromBuffer(picture.data);\n                if (fileType) {\n                    picture.format = fileType.mime;\n                }\n                else {\n                    return null;\n                }\n            }\n            picture.format = picture.format.toLocaleLowerCase();\n            switch (picture.format) {\n                case 'image/jpg':\n                    picture.format = 'image/jpeg'; // ToDo: register warning\n            }\n            return picture;\n        }\n        this.addWarning(`Empty picture tag found`);\n        return null;\n    }\n    /**\n     * Convert native tag to common tags\n     */\n    toCommon(tagType, tagId, value) {\n        const tag = { id: tagId, value };\n        const genericTag = this.tagMapper.mapTag(tagType, tag, this);\n        if (genericTag) {\n            this.postMap(tagType, genericTag);\n        }\n    }\n    /**\n     * Set generic tag\n     */\n    setGenericTag(tagType, tag) {\n        debug(`common.${tag.id} = ${tag.value}`);\n        const prio0 = this.commonOrigin[tag.id] || 1000;\n        const prio1 = this.originPriority[tagType];\n        if ((0, GenericTagTypes_1.isSingleton)(tag.id)) {\n            if (prio1 <= prio0) {\n                this.common[tag.id] = tag.value;\n                this.commonOrigin[tag.id] = prio1;\n            }\n            else {\n                return debug(`Ignore native tag (singleton): ${tagType}.${tag.id} = ${tag.value}`);\n            }\n        }\n        else {\n            if (prio1 === prio0) {\n                if (!(0, GenericTagTypes_1.isUnique)(tag.id) || this.common[tag.id].indexOf(tag.value) === -1) {\n                    this.common[tag.id].push(tag.value);\n                }\n                else {\n                    debug(`Ignore duplicate value: ${tagType}.${tag.id} = ${tag.value}`);\n                }\n                // no effect? this.commonOrigin[tag.id] = prio1;\n            }\n            else if (prio1 < prio0) {\n                this.common[tag.id] = [tag.value];\n                this.commonOrigin[tag.id] = prio1;\n            }\n            else {\n                return debug(`Ignore native tag (list): ${tagType}.${tag.id} = ${tag.value}`);\n            }\n        }\n        if (this.opts.observer) {\n            this.opts.observer({ metadata: this, tag: { type: 'common', id: tag.id, value: tag.value } });\n        }\n        // ToDo: trigger metadata event\n    }\n}\nexports.MetadataCollector = MetadataCollector;\nfunction joinArtists(artists) {\n    if (artists.length > 2) {\n        return artists.slice(0, artists.length - 1).join(', ') + ' & ' + artists[artists.length - 1];\n    }\n    return artists.join(' & ');\n}\nexports.joinArtists = joinArtists;\n//# sourceMappingURL=MetadataCollector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/MetadataCollector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js":
/*!**************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RandomUint8ArrayReader = void 0;\n/**\n * Provides abstract Uint8Array access via the IRandomRead interface\n */\nclass RandomUint8ArrayReader {\n    constructor(uint8Array) {\n        this.uint8Array = uint8Array;\n        this.fileSize = uint8Array.length;\n    }\n    /**\n     * Read from a given position of an abstracted file or buffer.\n     * @param uint8Array - Uint8Array that the data will be written to.\n     * @param offset - Offset in the buffer to start writing at.\n     * @param length - Integer specifying the number of bytes to read.\n     * @param position - Specifies where to begin reading from in the file.\n     * @return Promise providing bytes read\n     */\n    async randomRead(uint8Array, offset, length, position) {\n        uint8Array.set(this.uint8Array.subarray(position, position + length), offset);\n        return length;\n    }\n}\nexports.RandomUint8ArrayReader = RandomUint8ArrayReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvbW1vbi9SYW5kb21VaW50OEFycmF5UmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvY29tbW9uL1JhbmRvbVVpbnQ4QXJyYXlSZWFkZXIuanM/MWJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmFuZG9tVWludDhBcnJheVJlYWRlciA9IHZvaWQgMDtcbi8qKlxuICogUHJvdmlkZXMgYWJzdHJhY3QgVWludDhBcnJheSBhY2Nlc3MgdmlhIHRoZSBJUmFuZG9tUmVhZCBpbnRlcmZhY2VcbiAqL1xuY2xhc3MgUmFuZG9tVWludDhBcnJheVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IodWludDhBcnJheSkge1xuICAgICAgICB0aGlzLnVpbnQ4QXJyYXkgPSB1aW50OEFycmF5O1xuICAgICAgICB0aGlzLmZpbGVTaXplID0gdWludDhBcnJheS5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgZnJvbSBhIGdpdmVuIHBvc2l0aW9uIG9mIGFuIGFic3RyYWN0ZWQgZmlsZSBvciBidWZmZXIuXG4gICAgICogQHBhcmFtIHVpbnQ4QXJyYXkgLSBVaW50OEFycmF5IHRoYXQgdGhlIGRhdGEgd2lsbCBiZSB3cml0dGVuIHRvLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBPZmZzZXQgaW4gdGhlIGJ1ZmZlciB0byBzdGFydCB3cml0aW5nIGF0LlxuICAgICAqIEBwYXJhbSBsZW5ndGggLSBJbnRlZ2VyIHNwZWNpZnlpbmcgdGhlIG51bWJlciBvZiBieXRlcyB0byByZWFkLlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiAtIFNwZWNpZmllcyB3aGVyZSB0byBiZWdpbiByZWFkaW5nIGZyb20gaW4gdGhlIGZpbGUuXG4gICAgICogQHJldHVybiBQcm9taXNlIHByb3ZpZGluZyBieXRlcyByZWFkXG4gICAgICovXG4gICAgYXN5bmMgcmFuZG9tUmVhZCh1aW50OEFycmF5LCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHtcbiAgICAgICAgdWludDhBcnJheS5zZXQodGhpcy51aW50OEFycmF5LnN1YmFycmF5KHBvc2l0aW9uLCBwb3NpdGlvbiArIGxlbmd0aCksIG9mZnNldCk7XG4gICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxufVxuZXhwb3J0cy5SYW5kb21VaW50OEFycmF5UmVhZGVyID0gUmFuZG9tVWludDhBcnJheVJlYWRlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/common/Util.js":
/*!********************************************************!*\
  !*** ./node_modules/music-metadata/lib/common/Util.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toRatio = exports.dbToRatio = exports.ratioToDb = exports.a2hex = exports.isBitSet = exports.getBitAllignedNumber = exports.stripNulls = exports.decodeString = exports.trimRightNull = exports.findZero = exports.getBit = void 0;\nfunction getBit(buf, off, bit) {\n    return (buf[off] & (1 << bit)) !== 0;\n}\nexports.getBit = getBit;\n/**\n * Found delimiting zero in uint8Array\n * @param uint8Array Uint8Array to find the zero delimiter in\n * @param start Offset in uint8Array\n * @param end Last position to parse in uint8Array\n * @param encoding The string encoding used\n * @return Absolute position on uint8Array where zero found\n */\nfunction findZero(uint8Array, start, end, encoding) {\n    let i = start;\n    if (encoding === 'utf16le') {\n        while (uint8Array[i] !== 0 || uint8Array[i + 1] !== 0) {\n            if (i >= end)\n                return end;\n            i += 2;\n        }\n        return i;\n    }\n    else {\n        while (uint8Array[i] !== 0) {\n            if (i >= end)\n                return end;\n            i++;\n        }\n        return i;\n    }\n}\nexports.findZero = findZero;\nfunction trimRightNull(x) {\n    const pos0 = x.indexOf('\\0');\n    return pos0 === -1 ? x : x.substr(0, pos0);\n}\nexports.trimRightNull = trimRightNull;\nfunction swapBytes(uint8Array) {\n    const l = uint8Array.length;\n    if ((l & 1) !== 0)\n        throw new Error('Buffer length must be even');\n    for (let i = 0; i < l; i += 2) {\n        const a = uint8Array[i];\n        uint8Array[i] = uint8Array[i + 1];\n        uint8Array[i + 1] = a;\n    }\n    return uint8Array;\n}\n/**\n * Decode string\n */\nfunction decodeString(uint8Array, encoding) {\n    // annoying workaround for a double BOM issue\n    // https://github.com/leetreveil/musicmetadata/issues/84\n    if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) { // little endian\n        return decodeString(uint8Array.subarray(2), encoding);\n    }\n    else if (encoding === 'utf16le' && uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {\n        // BOM, indicating big endian decoding\n        if ((uint8Array.length & 1) !== 0)\n            throw new Error('Expected even number of octets for 16-bit unicode string');\n        return decodeString(swapBytes(uint8Array), encoding);\n    }\n    return Buffer.from(uint8Array).toString(encoding);\n}\nexports.decodeString = decodeString;\nfunction stripNulls(str) {\n    str = str.replace(/^\\x00+/g, '');\n    str = str.replace(/\\x00+$/g, '');\n    return str;\n}\nexports.stripNulls = stripNulls;\n/**\n * Read bit-aligned number start from buffer\n * Total offset in bits = byteOffset * 8 + bitOffset\n * @param source Byte buffer\n * @param byteOffset Starting offset in bytes\n * @param bitOffset Starting offset in bits: 0 = lsb\n * @param len Length of number in bits\n * @return Decoded bit aligned number\n */\nfunction getBitAllignedNumber(source, byteOffset, bitOffset, len) {\n    const byteOff = byteOffset + ~~(bitOffset / 8);\n    const bitOff = bitOffset % 8;\n    let value = source[byteOff];\n    value &= 0xff >> bitOff;\n    const bitsRead = 8 - bitOff;\n    const bitsLeft = len - bitsRead;\n    if (bitsLeft < 0) {\n        value >>= (8 - bitOff - len);\n    }\n    else if (bitsLeft > 0) {\n        value <<= bitsLeft;\n        value |= getBitAllignedNumber(source, byteOffset, bitOffset + bitsRead, bitsLeft);\n    }\n    return value;\n}\nexports.getBitAllignedNumber = getBitAllignedNumber;\n/**\n * Read bit-aligned number start from buffer\n * Total offset in bits = byteOffset * 8 + bitOffset\n * @param source Byte Uint8Array\n * @param byteOffset Starting offset in bytes\n * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is the least significant bit\n * @return True if bit is set\n */\nfunction isBitSet(source, byteOffset, bitOffset) {\n    return getBitAllignedNumber(source, byteOffset, bitOffset, 1) === 1;\n}\nexports.isBitSet = isBitSet;\nfunction a2hex(str) {\n    const arr = [];\n    for (let i = 0, l = str.length; i < l; i++) {\n        const hex = Number(str.charCodeAt(i)).toString(16);\n        arr.push(hex.length === 1 ? '0' + hex : hex);\n    }\n    return arr.join(' ');\n}\nexports.a2hex = a2hex;\n/**\n * Convert power ratio to DB\n * ratio: [0..1]\n */\nfunction ratioToDb(ratio) {\n    return 10 * Math.log10(ratio);\n}\nexports.ratioToDb = ratioToDb;\n/**\n * Convert dB to ratio\n * db Decibels\n */\nfunction dbToRatio(dB) {\n    return Math.pow(10, dB / 10);\n}\nexports.dbToRatio = dbToRatio;\n/**\n * Convert replay gain to ratio and Decibel\n * @param value string holding a ratio like '0.034' or '-7.54 dB'\n */\nfunction toRatio(value) {\n    const ps = value.split(' ').map(p => p.trim().toLowerCase());\n    // @ts-ignore\n    if (ps.length >= 1) {\n        const v = parseFloat(ps[0]);\n        return ps.length === 2 && ps[1] === 'db' ? {\n            dB: v,\n            ratio: dbToRatio(v)\n        } : {\n            dB: ratioToDb(v),\n            ratio: v\n        };\n    }\n}\nexports.toRatio = toRatio;\n//# sourceMappingURL=Util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/common/Util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/core.js":
/*!*************************************************!*\
  !*** ./node_modules/music-metadata/lib/core.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.scanAppendingHeaders = exports.selectCover = exports.ratingToStars = exports.orderTags = exports.parseFromTokenizer = exports.parseBuffer = exports.parseStream = void 0;\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst ParserFactory_1 = __webpack_require__(/*! ./ParserFactory */ \"(ssr)/./node_modules/music-metadata/lib/ParserFactory.js\");\nconst RandomUint8ArrayReader_1 = __webpack_require__(/*! ./common/RandomUint8ArrayReader */ \"(ssr)/./node_modules/music-metadata/lib/common/RandomUint8ArrayReader.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ./apev2/APEv2Parser */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ./id3v1/ID3v1Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst Lyrics3_1 = __webpack_require__(/*! ./lyrics3/Lyrics3 */ \"(ssr)/./node_modules/music-metadata/lib/lyrics3/Lyrics3.js\");\n/**\n * Parse audio from Node Stream.Readable\n * @param stream - Stream to read the audio track from\n * @param options - Parsing options\n * @param fileInfo - File information object or MIME-type string\n * @returns Metadata\n */\nfunction parseStream(stream, fileInfo, options = {}) {\n    return parseFromTokenizer(strtok3.fromStream(stream, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo), options);\n}\nexports.parseStream = parseStream;\n/**\n * Parse audio from Node Buffer\n * @param uint8Array - Uint8Array holding audio data\n * @param fileInfo - File information object or MIME-type string\n * @param options - Parsing options\n * @returns Metadata\n * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15\n */\nasync function parseBuffer(uint8Array, fileInfo, options = {}) {\n    const bufferReader = new RandomUint8ArrayReader_1.RandomUint8ArrayReader(uint8Array);\n    await scanAppendingHeaders(bufferReader, options);\n    const tokenizer = strtok3.fromBuffer(uint8Array, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo);\n    return parseFromTokenizer(tokenizer, options);\n}\nexports.parseBuffer = parseBuffer;\n/**\n * Parse audio from ITokenizer source\n * @param tokenizer - Audio source implementing the tokenizer interface\n * @param options - Parsing options\n * @returns Metadata\n */\nfunction parseFromTokenizer(tokenizer, options) {\n    return ParserFactory_1.ParserFactory.parseOnContentType(tokenizer, options);\n}\nexports.parseFromTokenizer = parseFromTokenizer;\n/**\n * Create a dictionary ordered by their tag id (key)\n * @param nativeTags list of tags\n * @returns tags indexed by id\n */\nfunction orderTags(nativeTags) {\n    const tags = {};\n    for (const tag of nativeTags) {\n        (tags[tag.id] = (tags[tag.id] || [])).push(tag.value);\n    }\n    return tags;\n}\nexports.orderTags = orderTags;\n/**\n * Convert rating to 1-5 star rating\n * @param rating: Normalized rating [0..1] (common.rating[n].rating)\n * @returns Number of stars: 1, 2, 3, 4 or 5 stars\n */\nfunction ratingToStars(rating) {\n    return rating === undefined ? 0 : 1 + Math.round(rating * 4);\n}\nexports.ratingToStars = ratingToStars;\n/**\n * Select most likely cover image.\n * @param pictures Usually metadata.common.picture\n * @return Cover image, if any, otherwise null\n */\nfunction selectCover(pictures) {\n    return pictures ? pictures.reduce((acc, cur) => {\n        if (cur.name && cur.name.toLowerCase() in ['front', 'cover', 'cover (front)'])\n            return cur;\n        return acc;\n    }) : null;\n}\nexports.selectCover = selectCover;\nasync function scanAppendingHeaders(randomReader, options = {}) {\n    let apeOffset = randomReader.fileSize;\n    if (await (0, ID3v1Parser_1.hasID3v1Header)(randomReader)) {\n        apeOffset -= 128;\n        const lyricsLen = await (0, Lyrics3_1.getLyricsHeaderLength)(randomReader);\n        apeOffset -= lyricsLen;\n    }\n    options.apeHeader = await APEv2Parser_1.APEv2Parser.findApeFooterOffset(randomReader, apeOffset);\n}\nexports.scanAppendingHeaders = scanAppendingHeaders;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2NvcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsbUJBQW1CLEdBQUcscUJBQXFCLEdBQUcsaUJBQWlCLEdBQUcsMEJBQTBCLEdBQUcsbUJBQW1CLEdBQUcsbUJBQW1CO0FBQ3ZLLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFrQjtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQyxpRkFBaUI7QUFDakQsaUNBQWlDLG1CQUFPLENBQUMsaUhBQWlDO0FBQzFFLHNCQUFzQixtQkFBTyxDQUFDLHlGQUFxQjtBQUNuRCxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBcUI7QUFDbkQsa0JBQWtCLG1CQUFPLENBQUMscUZBQW1CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELDBGQUEwRixxQkFBcUI7QUFDL0c7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0Esc0ZBQXNGLHFCQUFxQjtBQUMzRztBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG1CQUFtQjtBQUNuQiw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9jb3JlLmpzPzYwNzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjYW5BcHBlbmRpbmdIZWFkZXJzID0gZXhwb3J0cy5zZWxlY3RDb3ZlciA9IGV4cG9ydHMucmF0aW5nVG9TdGFycyA9IGV4cG9ydHMub3JkZXJUYWdzID0gZXhwb3J0cy5wYXJzZUZyb21Ub2tlbml6ZXIgPSBleHBvcnRzLnBhcnNlQnVmZmVyID0gZXhwb3J0cy5wYXJzZVN0cmVhbSA9IHZvaWQgMDtcbmNvbnN0IHN0cnRvazMgPSByZXF1aXJlKFwic3RydG9rMy9saWIvY29yZVwiKTtcbmNvbnN0IFBhcnNlckZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL1BhcnNlckZhY3RvcnlcIik7XG5jb25zdCBSYW5kb21VaW50OEFycmF5UmVhZGVyXzEgPSByZXF1aXJlKFwiLi9jb21tb24vUmFuZG9tVWludDhBcnJheVJlYWRlclwiKTtcbmNvbnN0IEFQRXYyUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9hcGV2Mi9BUEV2MlBhcnNlclwiKTtcbmNvbnN0IElEM3YxUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9pZDN2MS9JRDN2MVBhcnNlclwiKTtcbmNvbnN0IEx5cmljczNfMSA9IHJlcXVpcmUoXCIuL2x5cmljczMvTHlyaWNzM1wiKTtcbi8qKlxuICogUGFyc2UgYXVkaW8gZnJvbSBOb2RlIFN0cmVhbS5SZWFkYWJsZVxuICogQHBhcmFtIHN0cmVhbSAtIFN0cmVhbSB0byByZWFkIHRoZSBhdWRpbyB0cmFjayBmcm9tXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFBhcnNpbmcgb3B0aW9uc1xuICogQHBhcmFtIGZpbGVJbmZvIC0gRmlsZSBpbmZvcm1hdGlvbiBvYmplY3Qgb3IgTUlNRS10eXBlIHN0cmluZ1xuICogQHJldHVybnMgTWV0YWRhdGFcbiAqL1xuZnVuY3Rpb24gcGFyc2VTdHJlYW0oc3RyZWFtLCBmaWxlSW5mbywgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHBhcnNlRnJvbVRva2VuaXplcihzdHJ0b2szLmZyb21TdHJlYW0oc3RyZWFtLCB0eXBlb2YgZmlsZUluZm8gPT09ICdzdHJpbmcnID8geyBtaW1lVHlwZTogZmlsZUluZm8gfSA6IGZpbGVJbmZvKSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlU3RyZWFtID0gcGFyc2VTdHJlYW07XG4vKipcbiAqIFBhcnNlIGF1ZGlvIGZyb20gTm9kZSBCdWZmZXJcbiAqIEBwYXJhbSB1aW50OEFycmF5IC0gVWludDhBcnJheSBob2xkaW5nIGF1ZGlvIGRhdGFcbiAqIEBwYXJhbSBmaWxlSW5mbyAtIEZpbGUgaW5mb3JtYXRpb24gb2JqZWN0IG9yIE1JTUUtdHlwZSBzdHJpbmdcbiAqIEBwYXJhbSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcmV0dXJucyBNZXRhZGF0YVxuICogUmVmOiBodHRwczovL2dpdGh1Yi5jb20vQm9yZXdpdC9zdHJ0b2szL2Jsb2IvZTY5MzhjODFmZjY4NTA3NGQ1ZWIzMDY0YTExYzBiMDNjYTkzNGMxZC9zcmMvaW5kZXgudHMjTDE1XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHBhcnNlQnVmZmVyKHVpbnQ4QXJyYXksIGZpbGVJbmZvLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBidWZmZXJSZWFkZXIgPSBuZXcgUmFuZG9tVWludDhBcnJheVJlYWRlcl8xLlJhbmRvbVVpbnQ4QXJyYXlSZWFkZXIodWludDhBcnJheSk7XG4gICAgYXdhaXQgc2NhbkFwcGVuZGluZ0hlYWRlcnMoYnVmZmVyUmVhZGVyLCBvcHRpb25zKTtcbiAgICBjb25zdCB0b2tlbml6ZXIgPSBzdHJ0b2szLmZyb21CdWZmZXIodWludDhBcnJheSwgdHlwZW9mIGZpbGVJbmZvID09PSAnc3RyaW5nJyA/IHsgbWltZVR5cGU6IGZpbGVJbmZvIH0gOiBmaWxlSW5mbyk7XG4gICAgcmV0dXJuIHBhcnNlRnJvbVRva2VuaXplcih0b2tlbml6ZXIsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5wYXJzZUJ1ZmZlciA9IHBhcnNlQnVmZmVyO1xuLyoqXG4gKiBQYXJzZSBhdWRpbyBmcm9tIElUb2tlbml6ZXIgc291cmNlXG4gKiBAcGFyYW0gdG9rZW5pemVyIC0gQXVkaW8gc291cmNlIGltcGxlbWVudGluZyB0aGUgdG9rZW5pemVyIGludGVyZmFjZVxuICogQHBhcmFtIG9wdGlvbnMgLSBQYXJzaW5nIG9wdGlvbnNcbiAqIEByZXR1cm5zIE1ldGFkYXRhXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRnJvbVRva2VuaXplcih0b2tlbml6ZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUGFyc2VyRmFjdG9yeV8xLlBhcnNlckZhY3RvcnkucGFyc2VPbkNvbnRlbnRUeXBlKHRva2VuaXplciwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlRnJvbVRva2VuaXplciA9IHBhcnNlRnJvbVRva2VuaXplcjtcbi8qKlxuICogQ3JlYXRlIGEgZGljdGlvbmFyeSBvcmRlcmVkIGJ5IHRoZWlyIHRhZyBpZCAoa2V5KVxuICogQHBhcmFtIG5hdGl2ZVRhZ3MgbGlzdCBvZiB0YWdzXG4gKiBAcmV0dXJucyB0YWdzIGluZGV4ZWQgYnkgaWRcbiAqL1xuZnVuY3Rpb24gb3JkZXJUYWdzKG5hdGl2ZVRhZ3MpIHtcbiAgICBjb25zdCB0YWdzID0ge307XG4gICAgZm9yIChjb25zdCB0YWcgb2YgbmF0aXZlVGFncykge1xuICAgICAgICAodGFnc1t0YWcuaWRdID0gKHRhZ3NbdGFnLmlkXSB8fCBbXSkpLnB1c2godGFnLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3M7XG59XG5leHBvcnRzLm9yZGVyVGFncyA9IG9yZGVyVGFncztcbi8qKlxuICogQ29udmVydCByYXRpbmcgdG8gMS01IHN0YXIgcmF0aW5nXG4gKiBAcGFyYW0gcmF0aW5nOiBOb3JtYWxpemVkIHJhdGluZyBbMC4uMV0gKGNvbW1vbi5yYXRpbmdbbl0ucmF0aW5nKVxuICogQHJldHVybnMgTnVtYmVyIG9mIHN0YXJzOiAxLCAyLCAzLCA0IG9yIDUgc3RhcnNcbiAqL1xuZnVuY3Rpb24gcmF0aW5nVG9TdGFycyhyYXRpbmcpIHtcbiAgICByZXR1cm4gcmF0aW5nID09PSB1bmRlZmluZWQgPyAwIDogMSArIE1hdGgucm91bmQocmF0aW5nICogNCk7XG59XG5leHBvcnRzLnJhdGluZ1RvU3RhcnMgPSByYXRpbmdUb1N0YXJzO1xuLyoqXG4gKiBTZWxlY3QgbW9zdCBsaWtlbHkgY292ZXIgaW1hZ2UuXG4gKiBAcGFyYW0gcGljdHVyZXMgVXN1YWxseSBtZXRhZGF0YS5jb21tb24ucGljdHVyZVxuICogQHJldHVybiBDb3ZlciBpbWFnZSwgaWYgYW55LCBvdGhlcndpc2UgbnVsbFxuICovXG5mdW5jdGlvbiBzZWxlY3RDb3ZlcihwaWN0dXJlcykge1xuICAgIHJldHVybiBwaWN0dXJlcyA/IHBpY3R1cmVzLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcbiAgICAgICAgaWYgKGN1ci5uYW1lICYmIGN1ci5uYW1lLnRvTG93ZXJDYXNlKCkgaW4gWydmcm9udCcsICdjb3ZlcicsICdjb3ZlciAoZnJvbnQpJ10pXG4gICAgICAgICAgICByZXR1cm4gY3VyO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0pIDogbnVsbDtcbn1cbmV4cG9ydHMuc2VsZWN0Q292ZXIgPSBzZWxlY3RDb3ZlcjtcbmFzeW5jIGZ1bmN0aW9uIHNjYW5BcHBlbmRpbmdIZWFkZXJzKHJhbmRvbVJlYWRlciwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGFwZU9mZnNldCA9IHJhbmRvbVJlYWRlci5maWxlU2l6ZTtcbiAgICBpZiAoYXdhaXQgKDAsIElEM3YxUGFyc2VyXzEuaGFzSUQzdjFIZWFkZXIpKHJhbmRvbVJlYWRlcikpIHtcbiAgICAgICAgYXBlT2Zmc2V0IC09IDEyODtcbiAgICAgICAgY29uc3QgbHlyaWNzTGVuID0gYXdhaXQgKDAsIEx5cmljczNfMS5nZXRMeXJpY3NIZWFkZXJMZW5ndGgpKHJhbmRvbVJlYWRlcik7XG4gICAgICAgIGFwZU9mZnNldCAtPSBseXJpY3NMZW47XG4gICAgfVxuICAgIG9wdGlvbnMuYXBlSGVhZGVyID0gYXdhaXQgQVBFdjJQYXJzZXJfMS5BUEV2MlBhcnNlci5maW5kQXBlRm9vdGVyT2Zmc2V0KHJhbmRvbVJlYWRlciwgYXBlT2Zmc2V0KTtcbn1cbmV4cG9ydHMuc2NhbkFwcGVuZGluZ0hlYWRlcnMgPSBzY2FuQXBwZW5kaW5nSGVhZGVycztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DsdiffParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst DsdiffToken_1 = __webpack_require__(/*! ./DsdiffToken */ \"(ssr)/./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:aiff');\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nclass DsdiffParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new Error('Unexpected chunk-ID');\n        const type = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCC_1.FourCcToken.len));\n            default:\n                throw Error(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= DsdiffToken_1.ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(DsdiffToken_1.ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            case 'PROP': // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n                if (propType !== 'SND ')\n                    throw new Error('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCC_1.FourCcToken.len));\n                break;\n            case 'ID3': // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n            case 'DSD':\n                this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(DsdiffToken_1.ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                case 'CHNL': // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));\n                    break;\n                case 'CMPR': // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCC_1.FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(Token.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                case 'ABSS': // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                case 'LSCO': // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                case 'COMT':\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(DsdiffToken_1.ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= FourCC_1.FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(FourCC_1.FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\nexports.DsdiffParser = DsdiffParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChunkHeader64 = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexports.ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: FourCC_1.FourCcToken.get(buf, off),\n            // Size\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZGlmZi9Ec2RpZmZUb2tlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLGtGQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZGlmZi9Ec2RpZmZUb2tlbi5qcz9iMTU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaHVua0hlYWRlcjY0ID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBGb3VyQ0NfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRm91ckNDXCIpO1xuLyoqXG4gKiBEU0RJRkYgY2h1bmsgaGVhZGVyXG4gKiBUaGUgZGF0YS1zaXplIGVuY29kaW5nIGlzIGRldmlhdGluZyBmcm9tIEVBLUlGRiA4NVxuICogUmVmOiBodHRwOi8vd3d3LnNvbmljc3R1ZGlvLmNvbS9wZGYvZHNkL0RTRElGRl8xLjVfU3BlYy5wZGZcbiAqL1xuZXhwb3J0cy5DaHVua0hlYWRlcjY0ID0ge1xuICAgIGxlbjogMTIsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIEdyb3VwLUlEXG4gICAgICAgICAgICBjaHVua0lEOiBGb3VyQ0NfMS5Gb3VyQ2NUb2tlbi5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgLy8gU2l6ZVxuICAgICAgICAgICAgY2h1bmtTaXplOiBUb2tlbi5JTlQ2NF9CRS5nZXQoYnVmLCBvZmYgKyA0KVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/dsf/DsfChunk.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfChunk.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FormatChunk = exports.ChannelType = exports.DsdChunk = exports.ChunkHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.ChunkHeader = {\n    len: 12,\n    get: (buf, off) => {\n        return { id: FourCC_1.FourCcToken.get(buf, off), size: Token.UINT64_LE.get(buf, off + 4) };\n    }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.DsdChunk = {\n    len: 16,\n    get: (buf, off) => {\n        return {\n            fileSize: Token.INT64_LE.get(buf, off),\n            metadataPointer: Token.INT64_LE.get(buf, off + 8)\n        };\n    }\n};\nvar ChannelType;\n(function (ChannelType) {\n    ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\n    ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\n    ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\n    ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\n    ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\n    ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\n    ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\n})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nexports.FormatChunk = {\n    len: 40,\n    get: (buf, off) => {\n        return {\n            formatVersion: Token.INT32_LE.get(buf, off),\n            formatID: Token.INT32_LE.get(buf, off + 4),\n            channelType: Token.INT32_LE.get(buf, off + 8),\n            channelNum: Token.INT32_LE.get(buf, off + 12),\n            samplingFrequency: Token.INT32_LE.get(buf, off + 16),\n            bitsPerSample: Token.INT32_LE.get(buf, off + 20),\n            sampleCount: Token.INT64_LE.get(buf, off + 24),\n            blockSizePerChannel: Token.INT32_LE.get(buf, off + 32)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZi9Ec2ZDaHVuay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxtQkFBbUIsR0FBRyxnQkFBZ0IsR0FBRyxtQkFBbUI7QUFDbEYsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLGtGQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QyxtQkFBbUIsS0FBSztBQUNqRTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9kc2YvRHNmQ2h1bmsuanM/ZjUxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRm9ybWF0Q2h1bmsgPSBleHBvcnRzLkNoYW5uZWxUeXBlID0gZXhwb3J0cy5Ec2RDaHVuayA9IGV4cG9ydHMuQ2h1bmtIZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IEZvdXJDQ18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9Gb3VyQ0NcIik7XG4vKipcbiAqIENvbW1vbiBjaHVuayBEU0QgaGVhZGVyOiB0aGUgJ2NodW5rIG5hbWUgKEZvdXItQ0MpJyAmIGNodW5rIHNpemVcbiAqL1xuZXhwb3J0cy5DaHVua0hlYWRlciA9IHtcbiAgICBsZW46IDEyLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7IGlkOiBGb3VyQ0NfMS5Gb3VyQ2NUb2tlbi5nZXQoYnVmLCBvZmYpLCBzaXplOiBUb2tlbi5VSU5UNjRfTEUuZ2V0KGJ1Ziwgb2ZmICsgNCkgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBDb21tb24gY2h1bmsgRFNEIGhlYWRlcjogdGhlICdjaHVuayBuYW1lIChGb3VyLUNDKScgJiBjaHVuayBzaXplXG4gKi9cbmV4cG9ydHMuRHNkQ2h1bmsgPSB7XG4gICAgbGVuOiAxNixcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsZVNpemU6IFRva2VuLklOVDY0X0xFLmdldChidWYsIG9mZiksXG4gICAgICAgICAgICBtZXRhZGF0YVBvaW50ZXI6IFRva2VuLklOVDY0X0xFLmdldChidWYsIG9mZiArIDgpXG4gICAgICAgIH07XG4gICAgfVxufTtcbnZhciBDaGFubmVsVHlwZTtcbihmdW5jdGlvbiAoQ2hhbm5lbFR5cGUpIHtcbiAgICBDaGFubmVsVHlwZVtDaGFubmVsVHlwZVtcIm1vbm9cIl0gPSAxXSA9IFwibW9ub1wiO1xuICAgIENoYW5uZWxUeXBlW0NoYW5uZWxUeXBlW1wic3RlcmVvXCJdID0gMl0gPSBcInN0ZXJlb1wiO1xuICAgIENoYW5uZWxUeXBlW0NoYW5uZWxUeXBlW1wiY2hhbm5lbHNcIl0gPSAzXSA9IFwiY2hhbm5lbHNcIjtcbiAgICBDaGFubmVsVHlwZVtDaGFubmVsVHlwZVtcInF1YWRcIl0gPSA0XSA9IFwicXVhZFwiO1xuICAgIENoYW5uZWxUeXBlW0NoYW5uZWxUeXBlW1wiNCBjaGFubmVsc1wiXSA9IDVdID0gXCI0IGNoYW5uZWxzXCI7XG4gICAgQ2hhbm5lbFR5cGVbQ2hhbm5lbFR5cGVbXCI1IGNoYW5uZWxzXCJdID0gNl0gPSBcIjUgY2hhbm5lbHNcIjtcbiAgICBDaGFubmVsVHlwZVtDaGFubmVsVHlwZVtcIjUuMSBjaGFubmVsc1wiXSA9IDddID0gXCI1LjEgY2hhbm5lbHNcIjtcbn0pKENoYW5uZWxUeXBlID0gZXhwb3J0cy5DaGFubmVsVHlwZSB8fCAoZXhwb3J0cy5DaGFubmVsVHlwZSA9IHt9KSk7XG4vKipcbiAqIENvbW1vbiBjaHVuayBEU0QgaGVhZGVyOiB0aGUgJ2NodW5rIG5hbWUgKEZvdXItQ0MpJyAmIGNodW5rIHNpemVcbiAqL1xuZXhwb3J0cy5Gb3JtYXRDaHVuayA9IHtcbiAgICBsZW46IDQwLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXRWZXJzaW9uOiBUb2tlbi5JTlQzMl9MRS5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgZm9ybWF0SUQ6IFRva2VuLklOVDMyX0xFLmdldChidWYsIG9mZiArIDQpLFxuICAgICAgICAgICAgY2hhbm5lbFR5cGU6IFRva2VuLklOVDMyX0xFLmdldChidWYsIG9mZiArIDgpLFxuICAgICAgICAgICAgY2hhbm5lbE51bTogVG9rZW4uSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTIpLFxuICAgICAgICAgICAgc2FtcGxpbmdGcmVxdWVuY3k6IFRva2VuLklOVDMyX0xFLmdldChidWYsIG9mZiArIDE2KSxcbiAgICAgICAgICAgIGJpdHNQZXJTYW1wbGU6IFRva2VuLklOVDMyX0xFLmdldChidWYsIG9mZiArIDIwKSxcbiAgICAgICAgICAgIHNhbXBsZUNvdW50OiBUb2tlbi5JTlQ2NF9MRS5nZXQoYnVmLCBvZmYgKyAyNCksXG4gICAgICAgICAgICBibG9ja1NpemVQZXJDaGFubmVsOiBUb2tlbi5JTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAzMilcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/dsf/DsfChunk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/dsf/DsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DsfParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst DsfChunk_1 = __webpack_require__(/*! ./DsfChunk */ \"(ssr)/./node_modules/music-metadata/lib/dsf/DsfChunk.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:DSF');\n/**\n * DSF (dsd stream file) File Parser\n * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\n */\nclass DsfParser extends AbstractID3Parser_1.AbstractID3Parser {\n    async postId3v2Parse() {\n        const p0 = this.tokenizer.position; // mark start position, normally 0\n        const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);\n        if (chunkHeader.id !== 'DSD ')\n            throw new Error('Invalid chunk signature');\n        this.metadata.setFormat('container', 'DSF');\n        this.metadata.setFormat('lossless', true);\n        const dsdChunk = await this.tokenizer.readToken(DsfChunk_1.DsdChunk);\n        if (dsdChunk.metadataPointer === BigInt(0)) {\n            debug(`No ID3v2 tag present`);\n        }\n        else {\n            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);\n            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);\n            // Jump to ID3 header\n            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);\n            return new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);\n        }\n    }\n    async parseChunks(bytesRemaining) {\n        while (bytesRemaining >= DsfChunk_1.ChunkHeader.len) {\n            const chunkHeader = await this.tokenizer.readToken(DsfChunk_1.ChunkHeader);\n            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);\n            switch (chunkHeader.id) {\n                case 'fmt ':\n                    const formatChunk = await this.tokenizer.readToken(DsfChunk_1.FormatChunk);\n                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);\n                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);\n                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);\n                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);\n                    this.metadata.setFormat('duration', Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);\n                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;\n                    this.metadata.setFormat('bitrate', bitrate);\n                    return; // We got what we want, stop further processing of chunks\n                default:\n                    this.tokenizer.ignore(Number(chunkHeader.size) - DsfChunk_1.ChunkHeader.len);\n                    break;\n            }\n            bytesRemaining -= chunkHeader.size;\n        }\n    }\n}\nexports.DsfParser = DsfParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2RzZi9Ec2ZQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLDRCQUE0QixtQkFBTyxDQUFDLHNHQUE0QjtBQUNoRSxtQkFBbUIsbUJBQU8sQ0FBQywyRUFBWTtBQUN2QyxzQkFBc0IsbUJBQU8sQ0FBQywwRkFBc0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMseUJBQXlCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0IsT0FBTyxpQkFBaUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9kc2YvRHNmUGFyc2VyLmpzP2FlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRzZlBhcnNlciA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBBYnN0cmFjdElEM1BhcnNlcl8xID0gcmVxdWlyZShcIi4uL2lkM3YyL0Fic3RyYWN0SUQzUGFyc2VyXCIpO1xuY29uc3QgRHNmQ2h1bmtfMSA9IHJlcXVpcmUoXCIuL0RzZkNodW5rXCIpO1xuY29uc3QgSUQzdjJQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9pZDN2Mi9JRDN2MlBhcnNlclwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpEU0YnKTtcbi8qKlxuICogRFNGIChkc2Qgc3RyZWFtIGZpbGUpIEZpbGUgUGFyc2VyXG4gKiBSZWY6IGh0dHBzOi8vZHNkLWd1aWRlLmNvbS9zaXRlcy9kZWZhdWx0L2ZpbGVzL3doaXRlLXBhcGVycy9EU0ZGaWxlRm9ybWF0U3BlY19FLnBkZlxuICovXG5jbGFzcyBEc2ZQYXJzZXIgZXh0ZW5kcyBBYnN0cmFjdElEM1BhcnNlcl8xLkFic3RyYWN0SUQzUGFyc2VyIHtcbiAgICBhc3luYyBwb3N0SWQzdjJQYXJzZSgpIHtcbiAgICAgICAgY29uc3QgcDAgPSB0aGlzLnRva2VuaXplci5wb3NpdGlvbjsgLy8gbWFyayBzdGFydCBwb3NpdGlvbiwgbm9ybWFsbHkgMFxuICAgICAgICBjb25zdCBjaHVua0hlYWRlciA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihEc2ZDaHVua18xLkNodW5rSGVhZGVyKTtcbiAgICAgICAgaWYgKGNodW5rSGVhZGVyLmlkICE9PSAnRFNEICcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2h1bmsgc2lnbmF0dXJlJyk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb250YWluZXInLCAnRFNGJyk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdsb3NzbGVzcycsIHRydWUpO1xuICAgICAgICBjb25zdCBkc2RDaHVuayA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihEc2ZDaHVua18xLkRzZENodW5rKTtcbiAgICAgICAgaWYgKGRzZENodW5rLm1ldGFkYXRhUG9pbnRlciA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgICAgICBkZWJ1ZyhgTm8gSUQzdjIgdGFnIHByZXNlbnRgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKGBleHBlY3QgSUQzdjIgYXQgb2Zmc2V0PSR7ZHNkQ2h1bmsubWV0YWRhdGFQb2ludGVyfWApO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXJzZUNodW5rcyhkc2RDaHVuay5maWxlU2l6ZSAtIGNodW5rSGVhZGVyLnNpemUpO1xuICAgICAgICAgICAgLy8gSnVtcCB0byBJRDMgaGVhZGVyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoTnVtYmVyKGRzZENodW5rLm1ldGFkYXRhUG9pbnRlcikgLSB0aGlzLnRva2VuaXplci5wb3NpdGlvbiAtIHAwKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSUQzdjJQYXJzZXJfMS5JRDN2MlBhcnNlcigpLnBhcnNlKHRoaXMubWV0YWRhdGEsIHRoaXMudG9rZW5pemVyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlQ2h1bmtzKGJ5dGVzUmVtYWluaW5nKSB7XG4gICAgICAgIHdoaWxlIChieXRlc1JlbWFpbmluZyA+PSBEc2ZDaHVua18xLkNodW5rSGVhZGVyLmxlbikge1xuICAgICAgICAgICAgY29uc3QgY2h1bmtIZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oRHNmQ2h1bmtfMS5DaHVua0hlYWRlcik7XG4gICAgICAgICAgICBkZWJ1ZyhgUGFyc2luZyBjaHVuayBuYW1lPSR7Y2h1bmtIZWFkZXIuaWR9IHNpemU9JHtjaHVua0hlYWRlci5zaXplfWApO1xuICAgICAgICAgICAgc3dpdGNoIChjaHVua0hlYWRlci5pZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2ZtdCAnOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRDaHVuayA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihEc2ZDaHVua18xLkZvcm1hdENodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mQ2hhbm5lbHMnLCBmb3JtYXRDaHVuay5jaGFubmVsTnVtKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3NhbXBsZVJhdGUnLCBmb3JtYXRDaHVuay5zYW1wbGluZ0ZyZXF1ZW5jeSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRzUGVyU2FtcGxlJywgZm9ybWF0Q2h1bmsuYml0c1BlclNhbXBsZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZlNhbXBsZXMnLCBmb3JtYXRDaHVuay5zYW1wbGVDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdkdXJhdGlvbicsIE51bWJlcihmb3JtYXRDaHVuay5zYW1wbGVDb3VudCkgLyBmb3JtYXRDaHVuay5zYW1wbGluZ0ZyZXF1ZW5jeSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpdHJhdGUgPSBmb3JtYXRDaHVuay5iaXRzUGVyU2FtcGxlICogZm9ybWF0Q2h1bmsuc2FtcGxpbmdGcmVxdWVuY3kgKiBmb3JtYXRDaHVuay5jaGFubmVsTnVtO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnYml0cmF0ZScsIGJpdHJhdGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIFdlIGdvdCB3aGF0IHdlIHdhbnQsIHN0b3AgZnVydGhlciBwcm9jZXNzaW5nIG9mIGNodW5rc1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLmlnbm9yZShOdW1iZXIoY2h1bmtIZWFkZXIuc2l6ZSkgLSBEc2ZDaHVua18xLkNodW5rSGVhZGVyLmxlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnl0ZXNSZW1haW5pbmcgLT0gY2h1bmtIZWFkZXIuc2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRHNmUGFyc2VyID0gRHNmUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/dsf/DsfParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/flac/FlacParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/flac/FlacParser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FlacParser = void 0;\nconst token_types_1 = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst Vorbis_1 = __webpack_require__(/*! ../ogg/vorbis/Vorbis */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst VorbisDecoder_1 = __webpack_require__(/*! ../ogg/vorbis/VorbisDecoder */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:FLAC');\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nvar BlockType;\n(function (BlockType) {\n    BlockType[BlockType[\"STREAMINFO\"] = 0] = \"STREAMINFO\";\n    BlockType[BlockType[\"PADDING\"] = 1] = \"PADDING\";\n    BlockType[BlockType[\"APPLICATION\"] = 2] = \"APPLICATION\";\n    BlockType[BlockType[\"SEEKTABLE\"] = 3] = \"SEEKTABLE\";\n    BlockType[BlockType[\"VORBIS_COMMENT\"] = 4] = \"VORBIS_COMMENT\";\n    BlockType[BlockType[\"CUESHEET\"] = 5] = \"CUESHEET\";\n    BlockType[BlockType[\"PICTURE\"] = 6] = \"PICTURE\";\n})(BlockType || (BlockType = {}));\nclass FlacParser extends AbstractID3Parser_1.AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.padding = 0;\n    }\n    /**\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\n     * @param {INativeMetadataCollector} metadata Output\n     * @param {ITokenizer} tokenizer Input\n     * @param {IOptions} options Parsing options\n     */\n    init(metadata, tokenizer, options) {\n        super.init(metadata, tokenizer, options);\n        this.vorbisParser = new VorbisParser_1.VorbisParser(metadata, options);\n        return this;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new Error('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(Metadata.BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case BlockType.STREAMINFO:\n                return this.parseBlockStreamInfo(blockHeader.length);\n            case BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case BlockType.APPLICATION:\n                break;\n            case BlockType.SEEKTABLE:\n                break;\n            case BlockType.VORBIS_COMMENT:\n                return this.parseComment(blockHeader.length);\n            case BlockType.CUESHEET:\n                break;\n            case BlockType.PICTURE:\n                return this.parsePicture(blockHeader.length).then();\n            default:\n                this.metadata.addWarning('Unknown block type: ' + blockHeader.type);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async parseBlockStreamInfo(dataLen) {\n        if (dataLen !== Metadata.BlockStreamInfo.len)\n            throw new Error('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(Metadata.BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(dataLen) {\n        const data = await this.tokenizer.readToken(new token_types_1.Uint8ArrayType(dataLen));\n        const decoder = new VorbisDecoder_1.VorbisDecoder(data, 0);\n        decoder.readStringUtf8(); // vendor (skip)\n        const commentListLength = decoder.readInt32();\n        for (let i = 0; i < commentListLength; i++) {\n            const tag = decoder.parseUserComment();\n            this.vorbisParser.addTag(tag.key, tag.value);\n        }\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        else {\n            const picture = await this.tokenizer.readToken(new Vorbis_1.VorbisPictureToken(dataLen));\n            this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);\n        }\n    }\n}\nexports.FlacParser = FlacParser;\nclass Metadata {\n}\nMetadata.BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: token_types_1.UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nMetadata.BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: token_types_1.UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: token_types_1.UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: token_types_1.UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: token_types_1.UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: token_types_1.UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new token_types_1.Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/flac/FlacParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasID3v1Header = exports.ID3v1Parser = exports.Genres = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst token_types_1 = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../apev2/APEv2Parser */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ID3v1');\n/**\n * ID3v1 Genre mappings\n * Ref: https://de.wikipedia.org/wiki/Liste_der_ID3v1-Genres\n */\nexports.Genres = [\n    'Blues', 'Classic Rock', 'Country', 'Dance', 'Disco', 'Funk', 'Grunge', 'Hip-Hop',\n    'Jazz', 'Metal', 'New Age', 'Oldies', 'Other', 'Pop', 'R&B', 'Rap', 'Reggae', 'Rock',\n    'Techno', 'Industrial', 'Alternative', 'Ska', 'Death Metal', 'Pranks', 'Soundtrack',\n    'Euro-Techno', 'Ambient', 'Trip-Hop', 'Vocal', 'Jazz+Funk', 'Fusion', 'Trance',\n    'Classical', 'Instrumental', 'Acid', 'House', 'Game', 'Sound Clip', 'Gospel', 'Noise',\n    'Alt. Rock', 'Bass', 'Soul', 'Punk', 'Space', 'Meditative', 'Instrumental Pop',\n    'Instrumental Rock', 'Ethnic', 'Gothic', 'Darkwave', 'Techno-Industrial',\n    'Electronic', 'Pop-Folk', 'Eurodance', 'Dream', 'Southern Rock', 'Comedy', 'Cult',\n    'Gangsta Rap', 'Top 40', 'Christian Rap', 'Pop/Funk', 'Jungle', 'Native American',\n    'Cabaret', 'New Wave', 'Psychedelic', 'Rave', 'Showtunes', 'Trailer', 'Lo-Fi', 'Tribal',\n    'Acid Punk', 'Acid Jazz', 'Polka', 'Retro', 'Musical', 'Rock & Roll', 'Hard Rock',\n    'Folk', 'Folk/Rock', 'National Folk', 'Swing', 'Fast-Fusion', 'Bebob', 'Latin', 'Revival',\n    'Celtic', 'Bluegrass', 'Avantgarde', 'Gothic Rock', 'Progressive Rock', 'Psychedelic Rock',\n    'Symphonic Rock', 'Slow Rock', 'Big Band', 'Chorus', 'Easy Listening', 'Acoustic', 'Humour',\n    'Speech', 'Chanson', 'Opera', 'Chamber Music', 'Sonata', 'Symphony', 'Booty Bass', 'Primus',\n    'Porn Groove', 'Satire', 'Slow Jam', 'Club', 'Tango', 'Samba', 'Folklore',\n    'Ballad', 'Power Ballad', 'Rhythmic Soul', 'Freestyle', 'Duet', 'Punk Rock', 'Drum Solo',\n    'A Cappella', 'Euro-House', 'Dance Hall', 'Goa', 'Drum & Bass', 'Club-House',\n    'Hardcore', 'Terror', 'Indie', 'BritPop', 'Negerpunk', 'Polsk Punk', 'Beat',\n    'Christian Gangsta Rap', 'Heavy Metal', 'Black Metal', 'Crossover', 'Contemporary Christian',\n    'Christian Rock', 'Merengue', 'Salsa', 'Thrash Metal', 'Anime', 'JPop', 'Synthpop',\n    'Abstract', 'Art Rock', 'Baroque', 'Bhangra', 'Big Beat', 'Breakbeat', 'Chillout',\n    'Downtempo', 'Dub', 'EBM', 'Eclectic', 'Electro', 'Electroclash', 'Emo', 'Experimental',\n    'Garage', 'Global', 'IDM', 'Illbient', 'Industro-Goth', 'Jam Band', 'Krautrock',\n    'Leftfield', 'Lounge', 'Math Rock', 'New Romantic', 'Nu-Breakz', 'Post-Punk', 'Post-Rock',\n    'Psytrance', 'Shoegaze', 'Space Rock', 'Trop Rock', 'World Music', 'Neoclassical', 'Audiobook',\n    'Audio Theatre', 'Neue Deutsche Welle', 'Podcast', 'Indie Rock', 'G-Funk', 'Dubstep',\n    'Garage Rock', 'Psybient'\n];\n/**\n * Spec: http://id3.org/ID3v1\n * Wiki: https://en.wikipedia.org/wiki/ID3\n */\nconst Iid3v1Token = {\n    len: 128,\n    /**\n     * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header\n     * @param off Offset in buffer in bytes\n     * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned\n     */\n    get: (buf, off) => {\n        const header = new Id3v1StringType(3).get(buf, off);\n        return header === 'TAG' ? {\n            header,\n            title: new Id3v1StringType(30).get(buf, off + 3),\n            artist: new Id3v1StringType(30).get(buf, off + 33),\n            album: new Id3v1StringType(30).get(buf, off + 63),\n            year: new Id3v1StringType(4).get(buf, off + 93),\n            comment: new Id3v1StringType(28).get(buf, off + 97),\n            // ID3v1.1 separator for track\n            zeroByte: token_types_1.UINT8.get(buf, off + 127),\n            // track: ID3v1.1 field added by Michael Mutschler\n            track: token_types_1.UINT8.get(buf, off + 126),\n            genre: token_types_1.UINT8.get(buf, off + 127)\n        } : null;\n    }\n};\nclass Id3v1StringType extends token_types_1.StringType {\n    constructor(len) {\n        super(len, 'binary');\n    }\n    get(buf, off) {\n        let value = super.get(buf, off);\n        value = util.trimRightNull(value);\n        value = value.trim();\n        return value.length > 0 ? value : undefined;\n    }\n}\nclass ID3v1Parser extends BasicParser_1.BasicParser {\n    static getGenre(genreIndex) {\n        if (genreIndex < exports.Genres.length) {\n            return exports.Genres[genreIndex];\n        }\n        return undefined; // ToDO: generate warning\n    }\n    async parse() {\n        if (!this.tokenizer.fileInfo.size) {\n            debug('Skip checking for ID3v1 because the file-size is unknown');\n            return;\n        }\n        if (this.options.apeHeader) {\n            this.tokenizer.ignore(this.options.apeHeader.offset - this.tokenizer.position);\n            const apeParser = new APEv2Parser_1.APEv2Parser();\n            apeParser.init(this.metadata, this.tokenizer, this.options);\n            await apeParser.parseTags(this.options.apeHeader.footer);\n        }\n        const offset = this.tokenizer.fileInfo.size - Iid3v1Token.len;\n        if (this.tokenizer.position > offset) {\n            debug('Already consumed the last 128 bytes');\n            return;\n        }\n        const header = await this.tokenizer.readToken(Iid3v1Token, offset);\n        if (header) {\n            debug('ID3v1 header found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);\n            for (const id of ['title', 'artist', 'album', 'comment', 'track', 'year']) {\n                if (header[id] && header[id] !== '')\n                    this.addTag(id, header[id]);\n            }\n            const genre = ID3v1Parser.getGenre(header.genre);\n            if (genre)\n                this.addTag('genre', genre);\n        }\n        else {\n            debug('ID3v1 header not found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('ID3v1', id, value);\n    }\n}\nexports.ID3v1Parser = ID3v1Parser;\nasync function hasID3v1Header(reader) {\n    if (reader.fileSize >= 128) {\n        const tag = Buffer.alloc(3);\n        await reader.randomRead(tag, 0, tag.length, reader.fileSize - 128);\n        return tag.toString('binary') === 'TAG';\n    }\n    return false;\n}\nexports.hasID3v1Header = hasID3v1Header;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YxL0lEM3YxUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLG1CQUFtQixHQUFHLGNBQWM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsc0RBQU87QUFDL0Isc0JBQXNCLG1CQUFPLENBQUMsa0VBQWE7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDhFQUFnQjtBQUNyQyxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBdUI7QUFDckQsc0JBQXNCLG1CQUFPLENBQUMsMEZBQXNCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2MS9JRDN2MVBhcnNlci5qcz81MDk1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNJRDN2MUhlYWRlciA9IGV4cG9ydHMuSUQzdjFQYXJzZXIgPSBleHBvcnRzLkdlbnJlcyA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCB0b2tlbl90eXBlc18xID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi9jb21tb24vVXRpbFwiKTtcbmNvbnN0IEJhc2ljUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0Jhc2ljUGFyc2VyXCIpO1xuY29uc3QgQVBFdjJQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9hcGV2Mi9BUEV2MlBhcnNlclwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpJRDN2MScpO1xuLyoqXG4gKiBJRDN2MSBHZW5yZSBtYXBwaW5nc1xuICogUmVmOiBodHRwczovL2RlLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0ZV9kZXJfSUQzdjEtR2VucmVzXG4gKi9cbmV4cG9ydHMuR2VucmVzID0gW1xuICAgICdCbHVlcycsICdDbGFzc2ljIFJvY2snLCAnQ291bnRyeScsICdEYW5jZScsICdEaXNjbycsICdGdW5rJywgJ0dydW5nZScsICdIaXAtSG9wJyxcbiAgICAnSmF6eicsICdNZXRhbCcsICdOZXcgQWdlJywgJ09sZGllcycsICdPdGhlcicsICdQb3AnLCAnUiZCJywgJ1JhcCcsICdSZWdnYWUnLCAnUm9jaycsXG4gICAgJ1RlY2hubycsICdJbmR1c3RyaWFsJywgJ0FsdGVybmF0aXZlJywgJ1NrYScsICdEZWF0aCBNZXRhbCcsICdQcmFua3MnLCAnU291bmR0cmFjaycsXG4gICAgJ0V1cm8tVGVjaG5vJywgJ0FtYmllbnQnLCAnVHJpcC1Ib3AnLCAnVm9jYWwnLCAnSmF6eitGdW5rJywgJ0Z1c2lvbicsICdUcmFuY2UnLFxuICAgICdDbGFzc2ljYWwnLCAnSW5zdHJ1bWVudGFsJywgJ0FjaWQnLCAnSG91c2UnLCAnR2FtZScsICdTb3VuZCBDbGlwJywgJ0dvc3BlbCcsICdOb2lzZScsXG4gICAgJ0FsdC4gUm9jaycsICdCYXNzJywgJ1NvdWwnLCAnUHVuaycsICdTcGFjZScsICdNZWRpdGF0aXZlJywgJ0luc3RydW1lbnRhbCBQb3AnLFxuICAgICdJbnN0cnVtZW50YWwgUm9jaycsICdFdGhuaWMnLCAnR290aGljJywgJ0Rhcmt3YXZlJywgJ1RlY2huby1JbmR1c3RyaWFsJyxcbiAgICAnRWxlY3Ryb25pYycsICdQb3AtRm9saycsICdFdXJvZGFuY2UnLCAnRHJlYW0nLCAnU291dGhlcm4gUm9jaycsICdDb21lZHknLCAnQ3VsdCcsXG4gICAgJ0dhbmdzdGEgUmFwJywgJ1RvcCA0MCcsICdDaHJpc3RpYW4gUmFwJywgJ1BvcC9GdW5rJywgJ0p1bmdsZScsICdOYXRpdmUgQW1lcmljYW4nLFxuICAgICdDYWJhcmV0JywgJ05ldyBXYXZlJywgJ1BzeWNoZWRlbGljJywgJ1JhdmUnLCAnU2hvd3R1bmVzJywgJ1RyYWlsZXInLCAnTG8tRmknLCAnVHJpYmFsJyxcbiAgICAnQWNpZCBQdW5rJywgJ0FjaWQgSmF6eicsICdQb2xrYScsICdSZXRybycsICdNdXNpY2FsJywgJ1JvY2sgJiBSb2xsJywgJ0hhcmQgUm9jaycsXG4gICAgJ0ZvbGsnLCAnRm9say9Sb2NrJywgJ05hdGlvbmFsIEZvbGsnLCAnU3dpbmcnLCAnRmFzdC1GdXNpb24nLCAnQmVib2InLCAnTGF0aW4nLCAnUmV2aXZhbCcsXG4gICAgJ0NlbHRpYycsICdCbHVlZ3Jhc3MnLCAnQXZhbnRnYXJkZScsICdHb3RoaWMgUm9jaycsICdQcm9ncmVzc2l2ZSBSb2NrJywgJ1BzeWNoZWRlbGljIFJvY2snLFxuICAgICdTeW1waG9uaWMgUm9jaycsICdTbG93IFJvY2snLCAnQmlnIEJhbmQnLCAnQ2hvcnVzJywgJ0Vhc3kgTGlzdGVuaW5nJywgJ0Fjb3VzdGljJywgJ0h1bW91cicsXG4gICAgJ1NwZWVjaCcsICdDaGFuc29uJywgJ09wZXJhJywgJ0NoYW1iZXIgTXVzaWMnLCAnU29uYXRhJywgJ1N5bXBob255JywgJ0Jvb3R5IEJhc3MnLCAnUHJpbXVzJyxcbiAgICAnUG9ybiBHcm9vdmUnLCAnU2F0aXJlJywgJ1Nsb3cgSmFtJywgJ0NsdWInLCAnVGFuZ28nLCAnU2FtYmEnLCAnRm9sa2xvcmUnLFxuICAgICdCYWxsYWQnLCAnUG93ZXIgQmFsbGFkJywgJ1JoeXRobWljIFNvdWwnLCAnRnJlZXN0eWxlJywgJ0R1ZXQnLCAnUHVuayBSb2NrJywgJ0RydW0gU29sbycsXG4gICAgJ0EgQ2FwcGVsbGEnLCAnRXVyby1Ib3VzZScsICdEYW5jZSBIYWxsJywgJ0dvYScsICdEcnVtICYgQmFzcycsICdDbHViLUhvdXNlJyxcbiAgICAnSGFyZGNvcmUnLCAnVGVycm9yJywgJ0luZGllJywgJ0JyaXRQb3AnLCAnTmVnZXJwdW5rJywgJ1BvbHNrIFB1bmsnLCAnQmVhdCcsXG4gICAgJ0NocmlzdGlhbiBHYW5nc3RhIFJhcCcsICdIZWF2eSBNZXRhbCcsICdCbGFjayBNZXRhbCcsICdDcm9zc292ZXInLCAnQ29udGVtcG9yYXJ5IENocmlzdGlhbicsXG4gICAgJ0NocmlzdGlhbiBSb2NrJywgJ01lcmVuZ3VlJywgJ1NhbHNhJywgJ1RocmFzaCBNZXRhbCcsICdBbmltZScsICdKUG9wJywgJ1N5bnRocG9wJyxcbiAgICAnQWJzdHJhY3QnLCAnQXJ0IFJvY2snLCAnQmFyb3F1ZScsICdCaGFuZ3JhJywgJ0JpZyBCZWF0JywgJ0JyZWFrYmVhdCcsICdDaGlsbG91dCcsXG4gICAgJ0Rvd250ZW1wbycsICdEdWInLCAnRUJNJywgJ0VjbGVjdGljJywgJ0VsZWN0cm8nLCAnRWxlY3Ryb2NsYXNoJywgJ0VtbycsICdFeHBlcmltZW50YWwnLFxuICAgICdHYXJhZ2UnLCAnR2xvYmFsJywgJ0lETScsICdJbGxiaWVudCcsICdJbmR1c3Ryby1Hb3RoJywgJ0phbSBCYW5kJywgJ0tyYXV0cm9jaycsXG4gICAgJ0xlZnRmaWVsZCcsICdMb3VuZ2UnLCAnTWF0aCBSb2NrJywgJ05ldyBSb21hbnRpYycsICdOdS1CcmVha3onLCAnUG9zdC1QdW5rJywgJ1Bvc3QtUm9jaycsXG4gICAgJ1BzeXRyYW5jZScsICdTaG9lZ2F6ZScsICdTcGFjZSBSb2NrJywgJ1Ryb3AgUm9jaycsICdXb3JsZCBNdXNpYycsICdOZW9jbGFzc2ljYWwnLCAnQXVkaW9ib29rJyxcbiAgICAnQXVkaW8gVGhlYXRyZScsICdOZXVlIERldXRzY2hlIFdlbGxlJywgJ1BvZGNhc3QnLCAnSW5kaWUgUm9jaycsICdHLUZ1bmsnLCAnRHVic3RlcCcsXG4gICAgJ0dhcmFnZSBSb2NrJywgJ1BzeWJpZW50J1xuXTtcbi8qKlxuICogU3BlYzogaHR0cDovL2lkMy5vcmcvSUQzdjFcbiAqIFdpa2k6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lEM1xuICovXG5jb25zdCBJaWQzdjFUb2tlbiA9IHtcbiAgICBsZW46IDEyOCxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYnVmIEJ1ZmZlciBwb3NzaWJseSBob2xkaW5nIHRoZSAxMjggYnl0ZXMgSUQzdjEuMSBtZXRhZGF0YSBoZWFkZXJcbiAgICAgKiBAcGFyYW0gb2ZmIE9mZnNldCBpbiBidWZmZXIgaW4gYnl0ZXNcbiAgICAgKiBAcmV0dXJucyBJRDN2MS4xIGhlYWRlciBpZiBmaXJzdCAzIGJ5dGVzIGVxdWFscyAnVEFHJywgb3RoZXJ3aXNlIG51bGwgaXMgcmV0dXJuZWRcbiAgICAgKi9cbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBuZXcgSWQzdjFTdHJpbmdUeXBlKDMpLmdldChidWYsIG9mZik7XG4gICAgICAgIHJldHVybiBoZWFkZXIgPT09ICdUQUcnID8ge1xuICAgICAgICAgICAgaGVhZGVyLFxuICAgICAgICAgICAgdGl0bGU6IG5ldyBJZDN2MVN0cmluZ1R5cGUoMzApLmdldChidWYsIG9mZiArIDMpLFxuICAgICAgICAgICAgYXJ0aXN0OiBuZXcgSWQzdjFTdHJpbmdUeXBlKDMwKS5nZXQoYnVmLCBvZmYgKyAzMyksXG4gICAgICAgICAgICBhbGJ1bTogbmV3IElkM3YxU3RyaW5nVHlwZSgzMCkuZ2V0KGJ1Ziwgb2ZmICsgNjMpLFxuICAgICAgICAgICAgeWVhcjogbmV3IElkM3YxU3RyaW5nVHlwZSg0KS5nZXQoYnVmLCBvZmYgKyA5MyksXG4gICAgICAgICAgICBjb21tZW50OiBuZXcgSWQzdjFTdHJpbmdUeXBlKDI4KS5nZXQoYnVmLCBvZmYgKyA5NyksXG4gICAgICAgICAgICAvLyBJRDN2MS4xIHNlcGFyYXRvciBmb3IgdHJhY2tcbiAgICAgICAgICAgIHplcm9CeXRlOiB0b2tlbl90eXBlc18xLlVJTlQ4LmdldChidWYsIG9mZiArIDEyNyksXG4gICAgICAgICAgICAvLyB0cmFjazogSUQzdjEuMSBmaWVsZCBhZGRlZCBieSBNaWNoYWVsIE11dHNjaGxlclxuICAgICAgICAgICAgdHJhY2s6IHRva2VuX3R5cGVzXzEuVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgMTI2KSxcbiAgICAgICAgICAgIGdlbnJlOiB0b2tlbl90eXBlc18xLlVJTlQ4LmdldChidWYsIG9mZiArIDEyNylcbiAgICAgICAgfSA6IG51bGw7XG4gICAgfVxufTtcbmNsYXNzIElkM3YxU3RyaW5nVHlwZSBleHRlbmRzIHRva2VuX3R5cGVzXzEuU3RyaW5nVHlwZSB7XG4gICAgY29uc3RydWN0b3IobGVuKSB7XG4gICAgICAgIHN1cGVyKGxlbiwgJ2JpbmFyeScpO1xuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gc3VwZXIuZ2V0KGJ1Ziwgb2ZmKTtcbiAgICAgICAgdmFsdWUgPSB1dGlsLnRyaW1SaWdodE51bGwodmFsdWUpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA+IDAgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG59XG5jbGFzcyBJRDN2MVBhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyXzEuQmFzaWNQYXJzZXIge1xuICAgIHN0YXRpYyBnZXRHZW5yZShnZW5yZUluZGV4KSB7XG4gICAgICAgIGlmIChnZW5yZUluZGV4IDwgZXhwb3J0cy5HZW5yZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5HZW5yZXNbZ2VucmVJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gVG9ETzogZ2VuZXJhdGUgd2FybmluZ1xuICAgIH1cbiAgICBhc3luYyBwYXJzZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplKSB7XG4gICAgICAgICAgICBkZWJ1ZygnU2tpcCBjaGVja2luZyBmb3IgSUQzdjEgYmVjYXVzZSB0aGUgZmlsZS1zaXplIGlzIHVua25vd24nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFwZUhlYWRlcikge1xuICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuaWdub3JlKHRoaXMub3B0aW9ucy5hcGVIZWFkZXIub2Zmc2V0IC0gdGhpcy50b2tlbml6ZXIucG9zaXRpb24pO1xuICAgICAgICAgICAgY29uc3QgYXBlUGFyc2VyID0gbmV3IEFQRXYyUGFyc2VyXzEuQVBFdjJQYXJzZXIoKTtcbiAgICAgICAgICAgIGFwZVBhcnNlci5pbml0KHRoaXMubWV0YWRhdGEsIHRoaXMudG9rZW5pemVyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgYXdhaXQgYXBlUGFyc2VyLnBhcnNlVGFncyh0aGlzLm9wdGlvbnMuYXBlSGVhZGVyLmZvb3Rlcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy50b2tlbml6ZXIuZmlsZUluZm8uc2l6ZSAtIElpZDN2MVRva2VuLmxlbjtcbiAgICAgICAgaWYgKHRoaXMudG9rZW5pemVyLnBvc2l0aW9uID4gb2Zmc2V0KSB7XG4gICAgICAgICAgICBkZWJ1ZygnQWxyZWFkeSBjb25zdW1lZCB0aGUgbGFzdCAxMjggYnl0ZXMnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oSWlkM3YxVG9rZW4sIG9mZnNldCk7XG4gICAgICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgICAgIGRlYnVnKCdJRDN2MSBoZWFkZXIgZm91bmQgYXQ6IHBvcz0lcycsIHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUgLSBJaWQzdjFUb2tlbi5sZW4pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBbJ3RpdGxlJywgJ2FydGlzdCcsICdhbGJ1bScsICdjb21tZW50JywgJ3RyYWNrJywgJ3llYXInXSkge1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXJbaWRdICYmIGhlYWRlcltpZF0gIT09ICcnKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRhZyhpZCwgaGVhZGVyW2lkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBnZW5yZSA9IElEM3YxUGFyc2VyLmdldEdlbnJlKGhlYWRlci5nZW5yZSk7XG4gICAgICAgICAgICBpZiAoZ2VucmUpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUYWcoJ2dlbnJlJywgZ2VucmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVidWcoJ0lEM3YxIGhlYWRlciBub3QgZm91bmQgYXQ6IHBvcz0lcycsIHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUgLSBJaWQzdjFUb2tlbi5sZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZFRhZyhpZCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5hZGRUYWcoJ0lEM3YxJywgaWQsIHZhbHVlKTtcbiAgICB9XG59XG5leHBvcnRzLklEM3YxUGFyc2VyID0gSUQzdjFQYXJzZXI7XG5hc3luYyBmdW5jdGlvbiBoYXNJRDN2MUhlYWRlcihyZWFkZXIpIHtcbiAgICBpZiAocmVhZGVyLmZpbGVTaXplID49IDEyOCkge1xuICAgICAgICBjb25zdCB0YWcgPSBCdWZmZXIuYWxsb2MoMyk7XG4gICAgICAgIGF3YWl0IHJlYWRlci5yYW5kb21SZWFkKHRhZywgMCwgdGFnLmxlbmd0aCwgcmVhZGVyLmZpbGVTaXplIC0gMTI4KTtcbiAgICAgICAgcmV0dXJuIHRhZy50b1N0cmluZygnYmluYXJ5JykgPT09ICdUQUcnO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmhhc0lEM3YxSGVhZGVyID0gaGFzSUQzdjFIZWFkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v1TagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * ID3v1 tag mappings\n */\nconst id3v1TagMap = {\n    title: 'title',\n    artist: 'artist',\n    album: 'album',\n    year: 'year',\n    comment: 'comment',\n    track: 'track',\n    genre: 'genre'\n};\nclass ID3v1TagMapper extends GenericTagMapper_1.CommonTagMapper {\n    constructor() {\n        super(['ID3v1'], id3v1TagMap);\n    }\n}\nexports.ID3v1TagMapper = ID3v1TagMapper;\n//# sourceMappingURL=ID3v1TagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YxL0lEM3YxVGFnTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QiwyQkFBMkIsbUJBQU8sQ0FBQyxzR0FBNEI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2MS9JRDN2MVRhZ01hcC5qcz85ZTgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JRDN2MVRhZ01hcHBlciA9IHZvaWQgMDtcbmNvbnN0IEdlbmVyaWNUYWdNYXBwZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vR2VuZXJpY1RhZ01hcHBlclwiKTtcbi8qKlxuICogSUQzdjEgdGFnIG1hcHBpbmdzXG4gKi9cbmNvbnN0IGlkM3YxVGFnTWFwID0ge1xuICAgIHRpdGxlOiAndGl0bGUnLFxuICAgIGFydGlzdDogJ2FydGlzdCcsXG4gICAgYWxidW06ICdhbGJ1bScsXG4gICAgeWVhcjogJ3llYXInLFxuICAgIGNvbW1lbnQ6ICdjb21tZW50JyxcbiAgICB0cmFjazogJ3RyYWNrJyxcbiAgICBnZW5yZTogJ2dlbnJlJ1xufTtcbmNsYXNzIElEM3YxVGFnTWFwcGVyIGV4dGVuZHMgR2VuZXJpY1RhZ01hcHBlcl8xLkNvbW1vblRhZ01hcHBlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsnSUQzdjEnXSwgaWQzdjFUYWdNYXApO1xuICAgIH1cbn1cbmV4cG9ydHMuSUQzdjFUYWdNYXBwZXIgPSBJRDN2MVRhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlEM3YxVGFnTWFwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbstractID3Parser = void 0;\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ./ID3v2Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nclass AbstractID3Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser_1.ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Token_1.ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                debug(`End-of-stream`);\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser_1.ID3v1Parser();\n            await id3v1parser.init(this.metadata, this.tokenizer, this.options).parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\nexports.AbstractID3Parser = AbstractID3Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0Fic3RyYWN0SUQzUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixlQUFlLG1CQUFPLENBQUMsa0VBQWtCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLGlGQUFjO0FBQzNDLHNCQUFzQixtQkFBTyxDQUFDLG1GQUFlO0FBQzdDLHNCQUFzQixtQkFBTyxDQUFDLDBGQUFzQjtBQUNwRCxzQkFBc0IsbUJBQU8sQ0FBQyw0RkFBdUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2Mi9BYnN0cmFjdElEM1BhcnNlci5qcz8xYmRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BYnN0cmFjdElEM1BhcnNlciA9IHZvaWQgMDtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCJzdHJ0b2szL2xpYi9jb3JlXCIpO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IElEM3YyVG9rZW5fMSA9IHJlcXVpcmUoXCIuL0lEM3YyVG9rZW5cIik7XG5jb25zdCBJRDN2MlBhcnNlcl8xID0gcmVxdWlyZShcIi4vSUQzdjJQYXJzZXJcIik7XG5jb25zdCBJRDN2MVBhcnNlcl8xID0gcmVxdWlyZShcIi4uL2lkM3YxL0lEM3YxUGFyc2VyXCIpO1xuY29uc3QgQmFzaWNQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQmFzaWNQYXJzZXJcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6SUQzJyk7XG4vKipcbiAqIEFic3RyYWN0IHBhcnNlciB3aGljaCB0cmllcyB0YWtlIElEM3YyIGFuZCBJRDN2MSBoZWFkZXJzLlxuICovXG5jbGFzcyBBYnN0cmFjdElEM1BhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyXzEuQmFzaWNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmlkM3BhcnNlciA9IG5ldyBJRDN2MlBhcnNlcl8xLklEM3YyUGFyc2VyKCk7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBzdGFydHNXaXRoSUQzdjJIZWFkZXIodG9rZW5pemVyKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgdG9rZW5pemVyLnBlZWtUb2tlbihJRDN2MlRva2VuXzEuSUQzdjJIZWFkZXIpKS5maWxlSWRlbnRpZmllciA9PT0gJ0lEMyc7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXJzZUlEM3YyKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIGNvcmVfMS5FbmRPZlN0cmVhbUVycm9yKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoYEVuZC1vZi1zdHJlYW1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5hbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUlEM3YyKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnRyeVJlYWRJZDN2MkhlYWRlcnMoKTtcbiAgICAgICAgZGVidWcoJ0VuZCBvZiBJRDN2MiBoZWFkZXIsIGdvIHRvIE1QRUctcGFyc2VyOiBwb3M9JXMnLCB0aGlzLnRva2VuaXplci5wb3NpdGlvbik7XG4gICAgICAgIGF3YWl0IHRoaXMucG9zdElkM3YyUGFyc2UoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5za2lwUG9zdEhlYWRlcnMgJiYgdGhpcy5tZXRhZGF0YS5oYXNBbnkoKSkge1xuICAgICAgICAgICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaWQzdjFwYXJzZXIgPSBuZXcgSUQzdjFQYXJzZXJfMS5JRDN2MVBhcnNlcigpO1xuICAgICAgICAgICAgYXdhaXQgaWQzdjFwYXJzZXIuaW5pdCh0aGlzLm1ldGFkYXRhLCB0aGlzLnRva2VuaXplciwgdGhpcy5vcHRpb25zKS5wYXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHRyeVJlYWRJZDN2MkhlYWRlcnMoKSB7XG4gICAgICAgIGNvbnN0IGlkM0hlYWRlciA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnBlZWtUb2tlbihJRDN2MlRva2VuXzEuSUQzdjJIZWFkZXIpO1xuICAgICAgICBpZiAoaWQzSGVhZGVyLmZpbGVJZGVudGlmaWVyID09PSAnSUQzJykge1xuICAgICAgICAgICAgZGVidWcoJ0ZvdW5kIElEM3YyIGhlYWRlciwgcG9zPSVzJywgdGhpcy50b2tlbml6ZXIucG9zaXRpb24pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pZDNwYXJzZXIucGFyc2UodGhpcy5tZXRhZGF0YSwgdGhpcy50b2tlbml6ZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cnlSZWFkSWQzdjJIZWFkZXJzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFic3RyYWN0SUQzUGFyc2VyID0gQWJzdHJhY3RJRDNQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v2/FrameParser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/FrameParser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FrameParser = exports.parseGenre = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nfunction parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = ID3v1Parser_1.Genres[word];\n        }\n        genres.push(word);\n    }\n    return genres;\n}\nexports.parseGenre = parseGenre;\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return ID3v1Parser_1.Genres[code];\n    }\n}\nclass FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = ID3v2Token_1.TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        const out = {};\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST':\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.slice(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = this.splitValue(type, text);\n                        output = FrameParser.functionList(output);\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            case 'TXXX':\n                output = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                output = {\n                    description: output.id,\n                    text: this.splitValue(type, util.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\n                };\n                break;\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = ID3v2Token_1.AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = Buffer.from(uint8Array.slice(offset, length));\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = Token.UINT32_BE.get(uint8Array, 0);\n                break;\n            case 'SYLT':\n                // skip text encoding (1 byte),\n                //      language (3 bytes),\n                //      time stamp format (1 byte),\n                //      content tagTypes (1 byte),\n                //      content descriptor (1 byte)\n                offset += 7;\n                output = [];\n                while (offset < length) {\n                    const txt = uint8Array.slice(offset, offset = util.findZero(uint8Array, offset, length, encoding));\n                    offset += 5; // push offset forward one +  4 byte timestamp\n                    output.push(util.decodeString(txt, encoding));\n                }\n                break;\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM':\n                offset += 1;\n                out.language = util.decodeString(uint8Array.slice(offset, offset + 3), defaultEnc);\n                offset += 3;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                out.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                offset = fzero + nullTerminatorLength;\n                out.text = util.decodeString(uint8Array.slice(offset, length), encoding).replace(/\\x00+$/, '');\n                output = [out];\n                break;\n            case 'UFID':\n                output = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: output.id, identifier: output.data };\n                break;\n            case 'PRIV': // private frame\n                output = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: output.id, data: output.data };\n                break;\n            case 'POPM': // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: dataLen >= 5 ? Token.UINT32_BE.get(uint8Array, offset + 1) : undefined\n                };\n                break;\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length - offset, encoding);\n                const filename = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length - offset, encoding);\n                const description = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                output = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.slice(offset + 1, length)\n                };\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                output = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.slice(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.slice(0, length);\n                break;\n            }\n            default:\n                debug('Warning: unsupported id3v2-tag-type: ' + type);\n                break;\n        }\n        return output;\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf16le' ? 2 : 1;\n    }\n}\nexports.FrameParser = FrameParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v2/FrameParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v22TagMapper = exports.id3v22TagMap = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * ID3v2.2 tag mappings\n */\nexports.id3v22TagMap = {\n    TT2: 'title',\n    TP1: 'artist',\n    TP2: 'albumartist',\n    TAL: 'album',\n    TYE: 'year',\n    COM: 'comment',\n    TRK: 'track',\n    TPA: 'disk',\n    TCO: 'genre',\n    PIC: 'picture',\n    TCM: 'composer',\n    TOR: 'originaldate',\n    TOT: 'originalalbum',\n    TXT: 'lyricist',\n    TP3: 'conductor',\n    TPB: 'label',\n    TT1: 'grouping',\n    TT3: 'subtitle',\n    TLA: 'language',\n    TCR: 'copyright',\n    WCP: 'license',\n    TEN: 'encodedby',\n    TSS: 'encodersettings',\n    WAR: 'website',\n    'COM:iTunPGAP': 'gapless'\n    /* ToDo: iTunes tags:\n    'COM:iTunNORM': ,\n    'COM:iTunSMPB': 'encoder delay',\n    'COM:iTunes_CDDB_IDs'\n    */ ,\n    PCS: 'podcast',\n    TCP: \"compilation\",\n    TDR: 'date',\n    TS2: 'albumartistsort',\n    TSA: 'albumsort',\n    TSC: 'composersort',\n    TSP: 'artistsort',\n    TST: 'titlesort',\n    WFD: 'podcasturl',\n    TBP: 'bpm'\n};\nclass ID3v22TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super(['ID3v2.2'], exports.id3v22TagMap);\n    }\n}\nexports.ID3v22TagMapper = ID3v22TagMapper;\n//# sourceMappingURL=ID3v22TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0lEM3YyMlRhZ01hcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxvQkFBb0I7QUFDOUMsZ0NBQWdDLG1CQUFPLENBQUMsZ0hBQWlDO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2Mi9JRDN2MjJUYWdNYXBwZXIuanM/ZmNkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSUQzdjIyVGFnTWFwcGVyID0gZXhwb3J0cy5pZDN2MjJUYWdNYXAgPSB2b2lkIDA7XG5jb25zdCBDYXNlSW5zZW5zaXRpdmVUYWdNYXBfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXCIpO1xuLyoqXG4gKiBJRDN2Mi4yIHRhZyBtYXBwaW5nc1xuICovXG5leHBvcnRzLmlkM3YyMlRhZ01hcCA9IHtcbiAgICBUVDI6ICd0aXRsZScsXG4gICAgVFAxOiAnYXJ0aXN0JyxcbiAgICBUUDI6ICdhbGJ1bWFydGlzdCcsXG4gICAgVEFMOiAnYWxidW0nLFxuICAgIFRZRTogJ3llYXInLFxuICAgIENPTTogJ2NvbW1lbnQnLFxuICAgIFRSSzogJ3RyYWNrJyxcbiAgICBUUEE6ICdkaXNrJyxcbiAgICBUQ086ICdnZW5yZScsXG4gICAgUElDOiAncGljdHVyZScsXG4gICAgVENNOiAnY29tcG9zZXInLFxuICAgIFRPUjogJ29yaWdpbmFsZGF0ZScsXG4gICAgVE9UOiAnb3JpZ2luYWxhbGJ1bScsXG4gICAgVFhUOiAnbHlyaWNpc3QnLFxuICAgIFRQMzogJ2NvbmR1Y3RvcicsXG4gICAgVFBCOiAnbGFiZWwnLFxuICAgIFRUMTogJ2dyb3VwaW5nJyxcbiAgICBUVDM6ICdzdWJ0aXRsZScsXG4gICAgVExBOiAnbGFuZ3VhZ2UnLFxuICAgIFRDUjogJ2NvcHlyaWdodCcsXG4gICAgV0NQOiAnbGljZW5zZScsXG4gICAgVEVOOiAnZW5jb2RlZGJ5JyxcbiAgICBUU1M6ICdlbmNvZGVyc2V0dGluZ3MnLFxuICAgIFdBUjogJ3dlYnNpdGUnLFxuICAgICdDT006aVR1blBHQVAnOiAnZ2FwbGVzcydcbiAgICAvKiBUb0RvOiBpVHVuZXMgdGFnczpcbiAgICAnQ09NOmlUdW5OT1JNJzogLFxuICAgICdDT006aVR1blNNUEInOiAnZW5jb2RlciBkZWxheScsXG4gICAgJ0NPTTppVHVuZXNfQ0REQl9JRHMnXG4gICAgKi8gLFxuICAgIFBDUzogJ3BvZGNhc3QnLFxuICAgIFRDUDogXCJjb21waWxhdGlvblwiLFxuICAgIFREUjogJ2RhdGUnLFxuICAgIFRTMjogJ2FsYnVtYXJ0aXN0c29ydCcsXG4gICAgVFNBOiAnYWxidW1zb3J0JyxcbiAgICBUU0M6ICdjb21wb3NlcnNvcnQnLFxuICAgIFRTUDogJ2FydGlzdHNvcnQnLFxuICAgIFRTVDogJ3RpdGxlc29ydCcsXG4gICAgV0ZEOiAncG9kY2FzdHVybCcsXG4gICAgVEJQOiAnYnBtJ1xufTtcbmNsYXNzIElEM3YyMlRhZ01hcHBlciBleHRlbmRzIENhc2VJbnNlbnNpdGl2ZVRhZ01hcF8xLkNhc2VJbnNlbnNpdGl2ZVRhZ01hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsnSUQzdjIuMiddLCBleHBvcnRzLmlkM3YyMlRhZ01hcCk7XG4gICAgfVxufVxuZXhwb3J0cy5JRDN2MjJUYWdNYXBwZXIgPSBJRDN2MjJUYWdNYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JRDN2MjJUYWdNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v24TagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * ID3v2.3/ID3v2.4 tag mappings\n */\nconst id3v24TagMap = {\n    // id3v2.3\n    TIT2: 'title',\n    TPE1: 'artist',\n    'TXXX:Artists': 'artists',\n    TPE2: 'albumartist',\n    TALB: 'album',\n    TDRV: 'date',\n    /**\n     * Original release year\n     */\n    TORY: 'originalyear',\n    TPOS: 'disk',\n    TCON: 'genre',\n    APIC: 'picture',\n    TCOM: 'composer',\n    'USLT:description': 'lyrics',\n    TSOA: 'albumsort',\n    TSOT: 'titlesort',\n    TOAL: 'originalalbum',\n    TSOP: 'artistsort',\n    TSO2: 'albumartistsort',\n    TSOC: 'composersort',\n    TEXT: 'lyricist',\n    'TXXX:Writer': 'writer',\n    TPE3: 'conductor',\n    // 'IPLS:instrument': 'performer:instrument', // ToDo\n    TPE4: 'remixer',\n    'IPLS:arranger': 'arranger',\n    'IPLS:engineer': 'engineer',\n    'IPLS:producer': 'producer',\n    'IPLS:DJ-mix': 'djmixer',\n    'IPLS:mix': 'mixer',\n    TPUB: 'label',\n    TIT1: 'grouping',\n    TIT3: 'subtitle',\n    TRCK: 'track',\n    TCMP: 'compilation',\n    POPM: 'rating',\n    TBPM: 'bpm',\n    TMED: 'media',\n    'TXXX:CATALOGNUMBER': 'catalognumber',\n    'TXXX:MusicBrainz Album Status': 'releasestatus',\n    'TXXX:MusicBrainz Album Type': 'releasetype',\n    /**\n     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0\n     */\n    'TXXX:MusicBrainz Album Release Country': 'releasecountry',\n    /**\n     * Release country as implemented // ToDo: report\n     */\n    'TXXX:RELEASECOUNTRY': 'releasecountry',\n    'TXXX:SCRIPT': 'script',\n    TLAN: 'language',\n    TCOP: 'copyright',\n    WCOP: 'license',\n    TENC: 'encodedby',\n    TSSE: 'encodersettings',\n    'TXXX:BARCODE': 'barcode',\n    'TXXX:ISRC': 'isrc',\n    TSRC: 'isrc',\n    'TXXX:ASIN': 'asin',\n    'TXXX:originalyear': 'originalyear',\n    'UFID:http://musicbrainz.org': 'musicbrainz_recordingid',\n    'TXXX:MusicBrainz Release Track Id': 'musicbrainz_trackid',\n    'TXXX:MusicBrainz Album Id': 'musicbrainz_albumid',\n    'TXXX:MusicBrainz Artist Id': 'musicbrainz_artistid',\n    'TXXX:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\n    'TXXX:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\n    'TXXX:MusicBrainz Work Id': 'musicbrainz_workid',\n    'TXXX:MusicBrainz TRM Id': 'musicbrainz_trmid',\n    'TXXX:MusicBrainz Disc Id': 'musicbrainz_discid',\n    'TXXX:ACOUSTID_ID': 'acoustid_id',\n    'TXXX:Acoustid Id': 'acoustid_id',\n    'TXXX:Acoustid Fingerprint': 'acoustid_fingerprint',\n    'TXXX:MusicIP PUID': 'musicip_puid',\n    'TXXX:MusicMagic Fingerprint': 'musicip_fingerprint',\n    WOAR: 'website',\n    // id3v2.4\n    // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames\n    TDRC: 'date',\n    TYER: 'year',\n    TDOR: 'originaldate',\n    // 'TMCL:instrument': 'performer:instrument',\n    'TIPL:arranger': 'arranger',\n    'TIPL:engineer': 'engineer',\n    'TIPL:producer': 'producer',\n    'TIPL:DJ-mix': 'djmixer',\n    'TIPL:mix': 'mixer',\n    TMOO: 'mood',\n    // additional mappings:\n    SYLT: 'lyrics',\n    TSST: 'discsubtitle',\n    TKEY: 'key',\n    COMM: 'comment',\n    TOPE: 'originalartist',\n    // Windows Media Player\n    'PRIV:AverageLevel': 'averageLevel',\n    'PRIV:PeakLevel': 'peakLevel',\n    // Discogs\n    'TXXX:DISCOGS_ARTIST_ID': 'discogs_artist_id',\n    'TXXX:DISCOGS_ARTISTS': 'artists',\n    'TXXX:DISCOGS_ARTIST_NAME': 'artists',\n    'TXXX:DISCOGS_ALBUM_ARTISTS': 'albumartist',\n    'TXXX:DISCOGS_CATALOG': 'catalognumber',\n    'TXXX:DISCOGS_COUNTRY': 'releasecountry',\n    'TXXX:DISCOGS_DATE': 'originaldate',\n    'TXXX:DISCOGS_LABEL': 'label',\n    'TXXX:DISCOGS_LABEL_ID': 'discogs_label_id',\n    'TXXX:DISCOGS_MASTER_RELEASE_ID': 'discogs_master_release_id',\n    'TXXX:DISCOGS_RATING': 'discogs_rating',\n    'TXXX:DISCOGS_RELEASED': 'date',\n    'TXXX:DISCOGS_RELEASE_ID': 'discogs_release_id',\n    'TXXX:DISCOGS_VOTES': 'discogs_votes',\n    'TXXX:CATALOGID': 'catalognumber',\n    'TXXX:STYLE': 'genre',\n    'TXXX:REPLAYGAIN_TRACK_PEAK': 'replaygain_track_peak',\n    'TXXX:REPLAYGAIN_TRACK_GAIN': 'replaygain_track_gain',\n    'TXXX:REPLAYGAIN_ALBUM_PEAK': 'replaygain_album_peak',\n    'TXXX:REPLAYGAIN_ALBUM_GAIN': 'replaygain_album_gain',\n    'TXXX:MP3GAIN_MINMAX': 'replaygain_track_minmax',\n    'TXXX:MP3GAIN_ALBUM_MINMAX': 'replaygain_album_minmax',\n    'TXXX:MP3GAIN_UNDO': 'replaygain_undo',\n    MVNM: 'movement',\n    MVIN: 'movementIndex',\n    PCST: 'podcast',\n    TCAT: 'category',\n    TDES: 'description',\n    TDRL: 'date',\n    TGID: 'podcastId',\n    TKWD: 'keywords',\n    WFED: 'podcasturl'\n};\nclass ID3v24TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    static toRating(popm) {\n        return {\n            source: popm.email,\n            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * GenericTagMapper_1.CommonTagMapper.maxRatingScore : undefined\n        };\n    }\n    constructor() {\n        super(['ID3v2.3', 'ID3v2.4'], id3v24TagMap);\n    }\n    /**\n     * Handle post mapping exceptions / correction\n     * @param tag to post map\n     * @param warnings Wil be used to register (collect) warnings\n     * @return Common value e.g. \"Buena Vista Social Club\"\n     */\n    postMap(tag, warnings) {\n        switch (tag.id) {\n            case 'UFID': // decode MusicBrainz Recording Id\n                if (tag.value.owner_identifier === 'http://musicbrainz.org') {\n                    tag.id += ':' + tag.value.owner_identifier;\n                    tag.value = util.decodeString(tag.value.identifier, 'latin1'); // latin1 == iso-8859-1\n                }\n                break;\n            case 'PRIV':\n                switch (tag.value.owner_identifier) {\n                    // decode Windows Media Player\n                    case 'AverageLevel':\n                    case 'PeakValue':\n                        tag.id += ':' + tag.value.owner_identifier;\n                        tag.value = tag.value.data.length === 4 ? tag.value.data.readUInt32LE(0) : null;\n                        if (tag.value === null) {\n                            warnings.addWarning(`Failed to parse PRIV:PeakValue`);\n                        }\n                        break;\n                    default:\n                        warnings.addWarning(`Unknown PRIV owner-identifier: ${tag.value.owner_identifier}`);\n                }\n                break;\n            case 'COMM':\n                tag.value = tag.value ? tag.value.text : null;\n                break;\n            case 'POPM':\n                tag.value = ID3v24TagMapper.toRating(tag.value);\n                break;\n            default:\n                break;\n        }\n    }\n}\nexports.ID3v24TagMapper = ID3v24TagMapper;\n//# sourceMappingURL=ID3v24TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID3v2Parser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst FrameParser_1 = __webpack_require__(/*! ./FrameParser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/FrameParser.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ./ID3v2Token */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\nclass ID3v2Parser {\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw new Error('header versionIndex is incorrect');\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? ':' + description : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = ('ID3v2.' + id3Header.version.major);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            if (tag.id === 'TXXX') {\n                if (tag.value) {\n                    for (const text of tag.value.text) {\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n                    }\n                }\n            }\n            else if (tag.id === 'COM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n                }\n            }\n            else if (tag.id === 'COMM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n                }\n            }\n            else if (Array.isArray(tag.value)) {\n                for (const value of tag.value) {\n                    this.addTag(tag.id, value);\n                }\n            }\n            else {\n                this.addTag(tag.id, tag.value);\n            }\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: Buffer.from(uint8Array.slice(0, 3)).toString('ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: Buffer.from(uint8Array.slice(0, 4)).toString('ascii'),\n                    length: (majorVer === 4 ? ID3v2Token_1.UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n        return header;\n    }\n}\nexports.ID3v2Parser = ID3v2Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/ID3v2Token.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextEncodingToken = exports.ExtendedHeader = exports.ID3v2Header = exports.UINT32SYNCSAFE = exports.AttachedPictureType = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * The picture type according to the ID3v2 APIC frame\n * Ref: http://id3.org/id3v2.3.0#Attached_picture\n */\nvar AttachedPictureType;\n(function (AttachedPictureType) {\n    AttachedPictureType[AttachedPictureType[\"Other\"] = 0] = \"Other\";\n    AttachedPictureType[AttachedPictureType[\"32x32 pixels 'file icon' (PNG only)\"] = 1] = \"32x32 pixels 'file icon' (PNG only)\";\n    AttachedPictureType[AttachedPictureType[\"Other file icon\"] = 2] = \"Other file icon\";\n    AttachedPictureType[AttachedPictureType[\"Cover (front)\"] = 3] = \"Cover (front)\";\n    AttachedPictureType[AttachedPictureType[\"Cover (back)\"] = 4] = \"Cover (back)\";\n    AttachedPictureType[AttachedPictureType[\"Leaflet page\"] = 5] = \"Leaflet page\";\n    AttachedPictureType[AttachedPictureType[\"Media (e.g. label side of CD)\"] = 6] = \"Media (e.g. label side of CD)\";\n    AttachedPictureType[AttachedPictureType[\"Lead artist/lead performer/soloist\"] = 7] = \"Lead artist/lead performer/soloist\";\n    AttachedPictureType[AttachedPictureType[\"Artist/performer\"] = 8] = \"Artist/performer\";\n    AttachedPictureType[AttachedPictureType[\"Conductor\"] = 9] = \"Conductor\";\n    AttachedPictureType[AttachedPictureType[\"Band/Orchestra\"] = 10] = \"Band/Orchestra\";\n    AttachedPictureType[AttachedPictureType[\"Composer\"] = 11] = \"Composer\";\n    AttachedPictureType[AttachedPictureType[\"Lyricist/text writer\"] = 12] = \"Lyricist/text writer\";\n    AttachedPictureType[AttachedPictureType[\"Recording Location\"] = 13] = \"Recording Location\";\n    AttachedPictureType[AttachedPictureType[\"During recording\"] = 14] = \"During recording\";\n    AttachedPictureType[AttachedPictureType[\"During performance\"] = 15] = \"During performance\";\n    AttachedPictureType[AttachedPictureType[\"Movie/video screen capture\"] = 16] = \"Movie/video screen capture\";\n    AttachedPictureType[AttachedPictureType[\"A bright coloured fish\"] = 17] = \"A bright coloured fish\";\n    AttachedPictureType[AttachedPictureType[\"Illustration\"] = 18] = \"Illustration\";\n    AttachedPictureType[AttachedPictureType[\"Band/artist logotype\"] = 19] = \"Band/artist logotype\";\n    AttachedPictureType[AttachedPictureType[\"Publisher/Studio logotype\"] = 20] = \"Publisher/Studio logotype\";\n})(AttachedPictureType = exports.AttachedPictureType || (exports.AttachedPictureType = {}));\n/**\n * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\n * 4 * %0xxxxxxx\n */\nexports.UINT32SYNCSAFE = {\n    get: (buf, off) => {\n        return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\n            ((buf[off + 1]) << 14) | ((buf[off]) << 21);\n    },\n    len: 4\n};\n/**\n * ID3v2 header\n * Ref: http://id3.org/id3v2.3.0#ID3v2_header\n * ToDo\n */\nexports.ID3v2Header = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // ID3v2/file identifier   \"ID3\"\n            fileIdentifier: new Token.StringType(3, 'ascii').get(buf, off),\n            // ID3v2 versionIndex\n            version: {\n                major: Token.INT8.get(buf, off + 3),\n                revision: Token.INT8.get(buf, off + 4)\n            },\n            // ID3v2 flags\n            flags: {\n                // Unsynchronisation\n                unsynchronisation: util.getBit(buf, off + 5, 7),\n                // Extended header\n                isExtendedHeader: util.getBit(buf, off + 5, 6),\n                // Experimental indicator\n                expIndicator: util.getBit(buf, off + 5, 5),\n                footer: util.getBit(buf, off + 5, 4)\n            },\n            size: exports.UINT32SYNCSAFE.get(buf, off + 6)\n        };\n    }\n};\nexports.ExtendedHeader = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // Extended header size\n            size: Token.UINT32_BE.get(buf, off),\n            // Extended Flags\n            extendedFlags: Token.UINT16_BE.get(buf, off + 4),\n            // Size of padding\n            sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),\n            // CRC data present\n            crcDataPresent: util.getBit(buf, off + 4, 31)\n        };\n    }\n};\nexports.TextEncodingToken = {\n    len: 1,\n    get: (uint8Array, off) => {\n        switch (uint8Array[off]) {\n            case 0x00:\n                return { encoding: 'latin1' }; // binary\n            case 0x01:\n                return { encoding: 'utf16le', bom: true };\n            case 0x02:\n                return { encoding: 'utf16le', bom: false };\n            case 0x03:\n                return { encoding: 'utf8', bom: false };\n            default:\n                return { encoding: 'utf8', bom: false };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/iff/index.js":
/*!******************************************************!*\
  !*** ./node_modules/music-metadata/lib/iff/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\n/**\n * Common AIFF chunk header\n */\nexports.Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Chunk type ID\n            chunkID: FourCC_1.FourCcToken.get(buf, off),\n            // Chunk size\n            chunkSize: Number(BigInt(Token.UINT32_BE.get(buf, off + 4)))\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lmZi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGlCQUFpQixtQkFBTyxDQUFDLGtGQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvaWZmL2luZGV4LmpzPzMxODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgRm91ckNDXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0ZvdXJDQ1wiKTtcbi8qKlxuICogQ29tbW9uIEFJRkYgY2h1bmsgaGVhZGVyXG4gKi9cbmV4cG9ydHMuSGVhZGVyID0ge1xuICAgIGxlbjogOCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gQ2h1bmsgdHlwZSBJRFxuICAgICAgICAgICAgY2h1bmtJRDogRm91ckNDXzEuRm91ckNjVG9rZW4uZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIC8vIENodW5rIHNpemVcbiAgICAgICAgICAgIGNodW5rU2l6ZTogTnVtYmVyKEJpZ0ludChUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgNCkpKVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/iff/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/lyrics3/Lyrics3.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/lyrics3/Lyrics3.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getLyricsHeaderLength = exports.endTag2 = void 0;\nexports.endTag2 = 'LYRICS200';\nasync function getLyricsHeaderLength(reader) {\n    if (reader.fileSize >= 143) {\n        const buf = Buffer.alloc(15);\n        await reader.randomRead(buf, 0, buf.length, reader.fileSize - 143);\n        const txt = buf.toString('binary');\n        const tag = txt.substr(6);\n        if (tag === exports.endTag2) {\n            return parseInt(txt.substr(0, 6), 10) + 15;\n        }\n    }\n    return 0;\n}\nexports.getLyricsHeaderLength = getLyricsHeaderLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2x5cmljczMvTHlyaWNzMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyxlQUFlO0FBQy9DLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbHlyaWNzMy9MeXJpY3MzLmpzPzFjMGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEx5cmljc0hlYWRlckxlbmd0aCA9IGV4cG9ydHMuZW5kVGFnMiA9IHZvaWQgMDtcbmV4cG9ydHMuZW5kVGFnMiA9ICdMWVJJQ1MyMDAnO1xuYXN5bmMgZnVuY3Rpb24gZ2V0THlyaWNzSGVhZGVyTGVuZ3RoKHJlYWRlcikge1xuICAgIGlmIChyZWFkZXIuZmlsZVNpemUgPj0gMTQzKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYygxNSk7XG4gICAgICAgIGF3YWl0IHJlYWRlci5yYW5kb21SZWFkKGJ1ZiwgMCwgYnVmLmxlbmd0aCwgcmVhZGVyLmZpbGVTaXplIC0gMTQzKTtcbiAgICAgICAgY29uc3QgdHh0ID0gYnVmLnRvU3RyaW5nKCdiaW5hcnknKTtcbiAgICAgICAgY29uc3QgdGFnID0gdHh0LnN1YnN0cig2KTtcbiAgICAgICAgaWYgKHRhZyA9PT0gZXhwb3J0cy5lbmRUYWcyKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodHh0LnN1YnN0cigwLCA2KSwgMTApICsgMTU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5leHBvcnRzLmdldEx5cmljc0hlYWRlckxlbmd0aCA9IGdldEx5cmljc0hlYWRlckxlbmd0aDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/lyrics3/Lyrics3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaDtd.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaDtd.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.elements = void 0;\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/music-metadata/lib/matroska/types.js\");\n/**\n * Elements of document type description\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\n * Extended with:\n * - https://www.matroska.org/technical/specs/index.html\n */\nexports.elements = {\n    0x1a45dfa3: {\n        name: 'ebml',\n        container: {\n            0x4286: { name: 'ebmlVersion', value: types_1.DataType.uint },\n            0x42f7: { name: 'ebmlReadVersion', value: types_1.DataType.uint },\n            0x42f2: { name: 'ebmlMaxIDWidth', value: types_1.DataType.uint },\n            0x42f3: { name: 'ebmlMaxSizeWidth', value: types_1.DataType.uint },\n            0x4282: { name: 'docType', value: types_1.DataType.string },\n            0x4287: { name: 'docTypeVersion', value: types_1.DataType.uint },\n            0x4285: { name: 'docTypeReadVersion', value: types_1.DataType.uint } // 5.1.7\n        }\n    },\n    // Matroska segments\n    0x18538067: {\n        name: 'segment',\n        container: {\n            // Meta Seek Information\n            0x114d9b74: {\n                name: 'seekHead',\n                container: {\n                    0x4dbb: {\n                        name: 'seek',\n                        container: {\n                            0x53ab: { name: 'seekId', value: types_1.DataType.binary },\n                            0x53ac: { name: 'seekPosition', value: types_1.DataType.uint }\n                        }\n                    }\n                }\n            },\n            // Segment Information\n            0x1549a966: {\n                name: 'info',\n                container: {\n                    0x73a4: { name: 'uid', value: types_1.DataType.uid },\n                    0x7384: { name: 'filename', value: types_1.DataType.string },\n                    0x3cb923: { name: 'prevUID', value: types_1.DataType.uid },\n                    0x3c83ab: { name: 'prevFilename', value: types_1.DataType.string },\n                    0x3eb923: { name: 'nextUID', value: types_1.DataType.uid },\n                    0x3e83bb: { name: 'nextFilename', value: types_1.DataType.string },\n                    0x2ad7b1: { name: 'timecodeScale', value: types_1.DataType.uint },\n                    0x4489: { name: 'duration', value: types_1.DataType.float },\n                    0x4461: { name: 'dateUTC', value: types_1.DataType.uint },\n                    0x7ba9: { name: 'title', value: types_1.DataType.string },\n                    0x4d80: { name: 'muxingApp', value: types_1.DataType.string },\n                    0x5741: { name: 'writingApp', value: types_1.DataType.string }\n                }\n            },\n            // Cluster\n            0x1f43b675: {\n                name: 'cluster',\n                multiple: true,\n                container: {\n                    0xe7: { name: 'timecode', value: types_1.DataType.uid },\n                    0xa3: { name: 'unknown', value: types_1.DataType.binary },\n                    0xa7: { name: 'position', value: types_1.DataType.uid },\n                    0xab: { name: 'prevSize', value: types_1.DataType.uid }\n                }\n            },\n            // Track\n            0x1654ae6b: {\n                name: 'tracks',\n                container: {\n                    0xae: {\n                        name: 'entries',\n                        multiple: true,\n                        container: {\n                            0xd7: { name: 'trackNumber', value: types_1.DataType.uint },\n                            0x73c5: { name: 'uid', value: types_1.DataType.uid },\n                            0x83: { name: 'trackType', value: types_1.DataType.uint },\n                            0xb9: { name: 'flagEnabled', value: types_1.DataType.bool },\n                            0x88: { name: 'flagDefault', value: types_1.DataType.bool },\n                            0x55aa: { name: 'flagForced', value: types_1.DataType.bool },\n                            0x9c: { name: 'flagLacing', value: types_1.DataType.bool },\n                            0x6de7: { name: 'minCache', value: types_1.DataType.uint },\n                            0x6de8: { name: 'maxCache', value: types_1.DataType.uint },\n                            0x23e383: { name: 'defaultDuration', value: types_1.DataType.uint },\n                            0x23314f: { name: 'timecodeScale', value: types_1.DataType.float },\n                            0x536e: { name: 'name', value: types_1.DataType.string },\n                            0x22b59c: { name: 'language', value: types_1.DataType.string },\n                            0x86: { name: 'codecID', value: types_1.DataType.string },\n                            0x63a2: { name: 'codecPrivate', value: types_1.DataType.binary },\n                            0x258688: { name: 'codecName', value: types_1.DataType.string },\n                            0x3a9697: { name: 'codecSettings', value: types_1.DataType.string },\n                            0x3b4040: { name: 'codecInfoUrl', value: types_1.DataType.string },\n                            0x26b240: { name: 'codecDownloadUrl', value: types_1.DataType.string },\n                            0xaa: { name: 'codecDecodeAll', value: types_1.DataType.bool },\n                            0x6fab: { name: 'trackOverlay', value: types_1.DataType.uint },\n                            // Video\n                            0xe0: {\n                                name: 'video',\n                                container: {\n                                    0x9a: { name: 'flagInterlaced', value: types_1.DataType.bool },\n                                    0x53b8: { name: 'stereoMode', value: types_1.DataType.uint },\n                                    0xb0: { name: 'pixelWidth', value: types_1.DataType.uint },\n                                    0xba: { name: 'pixelHeight', value: types_1.DataType.uint },\n                                    0x54b0: { name: 'displayWidth', value: types_1.DataType.uint },\n                                    0x54ba: { name: 'displayHeight', value: types_1.DataType.uint },\n                                    0x54b3: { name: 'aspectRatioType', value: types_1.DataType.uint },\n                                    0x2eb524: { name: 'colourSpace', value: types_1.DataType.uint },\n                                    0x2fb523: { name: 'gammaValue', value: types_1.DataType.float }\n                                }\n                            },\n                            // Audio\n                            0xe1: {\n                                name: 'audio',\n                                container: {\n                                    0xb5: { name: 'samplingFrequency', value: types_1.DataType.float },\n                                    0x78b5: { name: 'outputSamplingFrequency', value: types_1.DataType.float },\n                                    0x9f: { name: 'channels', value: types_1.DataType.uint },\n                                    0x94: { name: 'channels', value: types_1.DataType.uint },\n                                    0x7d7b: { name: 'channelPositions', value: types_1.DataType.binary },\n                                    0x6264: { name: 'bitDepth', value: types_1.DataType.uint }\n                                }\n                            },\n                            // Content Encoding\n                            0x6d80: {\n                                name: 'contentEncodings',\n                                container: {\n                                    0x6240: {\n                                        name: 'contentEncoding',\n                                        container: {\n                                            0x5031: { name: 'order', value: types_1.DataType.uint },\n                                            0x5032: { name: 'scope', value: types_1.DataType.bool },\n                                            0x5033: { name: 'type', value: types_1.DataType.uint },\n                                            0x5034: {\n                                                name: 'contentEncoding',\n                                                container: {\n                                                    0x4254: { name: 'contentCompAlgo', value: types_1.DataType.uint },\n                                                    0x4255: { name: 'contentCompSettings', value: types_1.DataType.binary }\n                                                }\n                                            },\n                                            0x5035: {\n                                                name: 'contentEncoding',\n                                                container: {\n                                                    0x47e1: { name: 'contentEncAlgo', value: types_1.DataType.uint },\n                                                    0x47e2: { name: 'contentEncKeyID', value: types_1.DataType.binary },\n                                                    0x47e3: { name: 'contentSignature ', value: types_1.DataType.binary },\n                                                    0x47e4: { name: 'ContentSigKeyID  ', value: types_1.DataType.binary },\n                                                    0x47e5: { name: 'contentSigAlgo ', value: types_1.DataType.uint },\n                                                    0x47e6: { name: 'contentSigHashAlgo ', value: types_1.DataType.uint }\n                                                }\n                                            },\n                                            0x6264: { name: 'bitDepth', value: types_1.DataType.uint }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // Cueing Data\n            0x1c53bb6b: {\n                name: 'cues',\n                container: {\n                    0xbb: {\n                        name: 'cuePoint',\n                        container: {\n                            0xb3: { name: 'cueTime', value: types_1.DataType.uid },\n                            0xb7: {\n                                name: 'positions',\n                                container: {\n                                    0xf7: { name: 'track', value: types_1.DataType.uint },\n                                    0xf1: { name: 'clusterPosition', value: types_1.DataType.uint },\n                                    0x5378: { name: 'blockNumber', value: types_1.DataType.uint },\n                                    0xea: { name: 'codecState', value: types_1.DataType.uint },\n                                    0xdb: {\n                                        name: 'reference', container: {\n                                            0x96: { name: 'time', value: types_1.DataType.uint },\n                                            0x97: { name: 'cluster', value: types_1.DataType.uint },\n                                            0x535f: { name: 'number', value: types_1.DataType.uint },\n                                            0xeb: { name: 'codecState', value: types_1.DataType.uint }\n                                        }\n                                    },\n                                    0xf0: { name: 'relativePosition', value: types_1.DataType.uint } // extended\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // Attachment\n            0x1941a469: {\n                name: 'attachments',\n                container: {\n                    0x61a7: {\n                        name: 'attachedFiles',\n                        multiple: true,\n                        container: {\n                            0x467e: { name: 'description', value: types_1.DataType.string },\n                            0x466e: { name: 'name', value: types_1.DataType.string },\n                            0x4660: { name: 'mimeType', value: types_1.DataType.string },\n                            0x465c: { name: 'data', value: types_1.DataType.binary },\n                            0x46ae: { name: 'uid', value: types_1.DataType.uid }\n                        }\n                    }\n                }\n            },\n            // Chapters\n            0x1043a770: {\n                name: 'chapters',\n                container: {\n                    0x45b9: {\n                        name: 'editionEntry',\n                        container: {\n                            0xb6: {\n                                name: 'chapterAtom',\n                                container: {\n                                    0x73c4: { name: 'uid', value: types_1.DataType.uid },\n                                    0x91: { name: 'timeStart', value: types_1.DataType.uint },\n                                    0x92: { name: 'timeEnd', value: types_1.DataType.uid },\n                                    0x98: { name: 'hidden', value: types_1.DataType.bool },\n                                    0x4598: { name: 'enabled', value: types_1.DataType.uid },\n                                    0x8f: { name: 'track', container: {\n                                            0x89: { name: 'trackNumber', value: types_1.DataType.uid },\n                                            0x80: {\n                                                name: 'display', container: {\n                                                    0x85: { name: 'string', value: types_1.DataType.string },\n                                                    0x437c: { name: 'language ', value: types_1.DataType.string },\n                                                    0x437e: { name: 'country ', value: types_1.DataType.string }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // Tagging\n            0x1254c367: {\n                name: 'tags',\n                container: {\n                    0x7373: {\n                        name: 'tag',\n                        multiple: true,\n                        container: {\n                            0x63c0: {\n                                name: 'target',\n                                container: {\n                                    0x63c5: { name: 'tagTrackUID', value: types_1.DataType.uid },\n                                    0x63c4: { name: 'tagChapterUID', value: types_1.DataType.uint },\n                                    0x63c6: { name: 'tagAttachmentUID', value: types_1.DataType.uid },\n                                    0x63ca: { name: 'targetType', value: types_1.DataType.string },\n                                    0x68ca: { name: 'targetTypeValue', value: types_1.DataType.uint },\n                                    0x63c9: { name: 'tagEditionUID', value: types_1.DataType.uid } // extended\n                                }\n                            },\n                            0x67c8: {\n                                name: 'simpleTags',\n                                multiple: true,\n                                container: {\n                                    0x45a3: { name: 'name', value: types_1.DataType.string },\n                                    0x4487: { name: 'string', value: types_1.DataType.string },\n                                    0x4485: { name: 'binary', value: types_1.DataType.binary },\n                                    0x447a: { name: 'language', value: types_1.DataType.string },\n                                    0x447b: { name: 'languageIETF', value: types_1.DataType.string },\n                                    0x4484: { name: 'default', value: types_1.DataType.bool } // extended\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaDtd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatroskaParser = void 0;\nconst token_types_1 = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/music-metadata/lib/matroska/types.js\");\nconst matroskaDtd = __webpack_require__(/*! ./MatroskaDtd */ \"(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaDtd.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:matroska');\n/**\n * Extensible Binary Meta Language (EBML) parser\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\n *\n * WEBM VP8 AUDIO FILE\n */\nclass MatroskaParser extends BasicParser_1.BasicParser {\n    constructor() {\n        super();\n        this.padding = 0;\n        this.parserMap = new Map();\n        this.ebmlMaxIDLength = 4;\n        this.ebmlMaxSizeLength = 8;\n        this.parserMap.set(types_1.DataType.uint, e => this.readUint(e));\n        this.parserMap.set(types_1.DataType.string, e => this.readString(e));\n        this.parserMap.set(types_1.DataType.binary, e => this.readBuffer(e));\n        this.parserMap.set(types_1.DataType.uid, async (e) => await this.readUint(e) === 1);\n        this.parserMap.set(types_1.DataType.bool, e => this.readFlag(e));\n        this.parserMap.set(types_1.DataType.float, e => this.readFloat(e));\n    }\n    /**\n     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).\n     * @param {INativeMetadataCollector} metadata Output\n     * @param {ITokenizer} tokenizer Input\n     * @param {IOptions} options Parsing options\n     */\n    init(metadata, tokenizer, options) {\n        super.init(metadata, tokenizer, options);\n        return this;\n    }\n    async parse() {\n        const matroska = await this.parseContainer(matroskaDtd.elements, this.tokenizer.fileInfo.size, []);\n        this.metadata.setFormat('container', `EBML/${matroska.ebml.docType}`);\n        if (matroska.segment) {\n            const info = matroska.segment.info;\n            if (info) {\n                const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\n                if (typeof info.duration === 'number') {\n                    const duration = info.duration * timecodeScale / 1000000000;\n                    this.addTag('segment:title', info.title);\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const audioTracks = matroska.segment.tracks;\n            if (audioTracks && audioTracks.entries) {\n                audioTracks.entries.forEach(entry => {\n                    const stream = {\n                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\n                        codecSettings: entry.codecSettings,\n                        flagDefault: entry.flagDefault,\n                        flagLacing: entry.flagLacing,\n                        flagEnabled: entry.flagEnabled,\n                        language: entry.language,\n                        name: entry.name,\n                        type: entry.trackType,\n                        audio: entry.audio,\n                        video: entry.video\n                    };\n                    this.metadata.addStreamInfo(stream);\n                });\n                const audioTrack = audioTracks.entries\n                    .filter(entry => {\n                    return entry.trackType === types_1.TrackType.audio.valueOf();\n                })\n                    .reduce((acc, cur) => {\n                    if (!acc) {\n                        return cur;\n                    }\n                    if (!acc.flagDefault && cur.flagDefault) {\n                        return cur;\n                    }\n                    if (cur.trackNumber && cur.trackNumber < acc.trackNumber) {\n                        return cur;\n                    }\n                    return acc;\n                }, null);\n                if (audioTrack) {\n                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\n                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\n                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\n                }\n                if (matroska.segment.tags) {\n                    matroska.segment.tags.tag.forEach(tag => {\n                        const target = tag.target;\n                        const targetType = (target === null || target === void 0 ? void 0 : target.targetTypeValue) ? types_1.TargetType[target.targetTypeValue] : ((target === null || target === void 0 ? void 0 : target.targetType) ? target.targetType : 'track');\n                        tag.simpleTags.forEach(simpleTag => {\n                            const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\n                            this.addTag(`${targetType}:${simpleTag.name}`, value);\n                        });\n                    });\n                }\n                if (matroska.segment.attachments) {\n                    matroska.segment.attachments.attachedFiles\n                        .filter(file => file.mimeType.startsWith('image/'))\n                        .map(file => {\n                        return {\n                            data: file.data,\n                            format: file.mimeType,\n                            description: file.description,\n                            name: file.name\n                        };\n                    }).forEach(picture => {\n                        this.addTag('picture', picture);\n                    });\n                }\n            }\n        }\n    }\n    async parseContainer(container, posDone, path) {\n        const tree = {};\n        while (this.tokenizer.position < posDone) {\n            let element;\n            try {\n                element = await this.readElement();\n            }\n            catch (error) {\n                if (error.message === 'End-Of-Stream') {\n                    break;\n                }\n                throw error;\n            }\n            const type = container[element.id];\n            if (type) {\n                debug(`Element: name=${type.name}, container=${!!type.container}`);\n                if (type.container) {\n                    const res = await this.parseContainer(type.container, element.len >= 0 ? this.tokenizer.position + element.len : -1, path.concat([type.name]));\n                    if (type.multiple) {\n                        if (!tree[type.name]) {\n                            tree[type.name] = [];\n                        }\n                        tree[type.name].push(res);\n                    }\n                    else {\n                        tree[type.name] = res;\n                    }\n                }\n                else {\n                    tree[type.name] = await this.parserMap.get(type.value)(element);\n                }\n            }\n            else {\n                switch (element.id) {\n                    case 0xec: // void\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                        break;\n                    default:\n                        debug(`parseEbml: path=${path.join('/')}, unknown element: id=${element.id.toString(16)}`);\n                        this.padding += element.len;\n                        await this.tokenizer.ignore(element.len);\n                }\n            }\n        }\n        return tree;\n    }\n    async readVintData(maxLength) {\n        const msb = await this.tokenizer.peekNumber(token_types_1.UINT8);\n        let mask = 0x80;\n        let oc = 1;\n        // Calculate VINT_WIDTH\n        while ((msb & mask) === 0) {\n            if (oc > maxLength) {\n                throw new Error('VINT value exceeding maximum size');\n            }\n            ++oc;\n            mask >>= 1;\n        }\n        const id = Buffer.alloc(oc);\n        await this.tokenizer.readBuffer(id);\n        return id;\n    }\n    async readElement() {\n        const id = await this.readVintData(this.ebmlMaxIDLength);\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\n        const nrLen = Math.min(6, lenField.length); // JavaScript can max read 6 bytes integer\n        return {\n            id: id.readUIntBE(0, id.length),\n            len: lenField.readUIntBE(lenField.length - nrLen, nrLen)\n        };\n    }\n    isMaxValue(vintData) {\n        if (vintData.length === this.ebmlMaxSizeLength) {\n            for (let n = 1; n < this.ebmlMaxSizeLength; ++n) {\n                if (vintData[n] !== 0xff)\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    async readFloat(e) {\n        switch (e.len) {\n            case 0:\n                return 0.0;\n            case 4:\n                return this.tokenizer.readNumber(token_types_1.Float32_BE);\n            case 8:\n                return this.tokenizer.readNumber(token_types_1.Float64_BE);\n            case 10:\n                return this.tokenizer.readNumber(token_types_1.Float64_BE);\n            default:\n                throw new Error(`Invalid IEEE-754 float length: ${e.len}`);\n        }\n    }\n    async readFlag(e) {\n        return (await this.readUint(e)) === 1;\n    }\n    async readUint(e) {\n        const buf = await this.readBuffer(e);\n        const nrLen = Math.min(6, e.len); // JavaScript can max read 6 bytes integer\n        return buf.readUIntBE(e.len - nrLen, nrLen);\n    }\n    async readString(e) {\n        const rawString = await this.tokenizer.readToken(new token_types_1.StringType(e.len, 'utf-8'));\n        return rawString.replace(/\\00.*$/g, '');\n    }\n    async readBuffer(e) {\n        const buf = Buffer.alloc(e.len);\n        await this.tokenizer.readBuffer(buf);\n        return buf;\n    }\n    addTag(tagId, value) {\n        this.metadata.addTag('matroska', tagId, value);\n    }\n}\nexports.MatroskaParser = MatroskaParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MatroskaTagMapper = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * EBML Tag map\n */\nconst ebmlTagMap = {\n    'segment:title': 'title',\n    'album:ARTIST': 'albumartist',\n    'album:ARTISTSORT': 'albumartistsort',\n    'album:TITLE': 'album',\n    'album:DATE_RECORDED': 'originaldate',\n    'album:PART_NUMBER': 'disk',\n    'album:TOTAL_PARTS': 'totaltracks',\n    'track:ARTIST': 'artist',\n    'track:ARTISTSORT': 'artistsort',\n    'track:TITLE': 'title',\n    'track:PART_NUMBER': 'track',\n    'track:MUSICBRAINZ_TRACKID': 'musicbrainz_recordingid',\n    'track:MUSICBRAINZ_ALBUMID': 'musicbrainz_albumid',\n    'track:MUSICBRAINZ_ARTISTID': 'musicbrainz_artistid',\n    'track:PUBLISHER': 'label',\n    'track:GENRE': 'genre',\n    'track:ENCODER': 'encodedby',\n    'track:ENCODER_OPTIONS': 'encodersettings',\n    'edition:TOTAL_PARTS': 'totaldiscs',\n    picture: 'picture'\n};\nclass MatroskaTagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super(['matroska'], ebmlTagMap);\n    }\n}\nexports.MatroskaTagMapper = MatroskaTagMapper;\n//# sourceMappingURL=MatroskaTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21hdHJvc2thL01hdHJvc2thVGFnTWFwcGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQ0FBZ0MsbUJBQU8sQ0FBQyxnSEFBaUM7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21hdHJvc2thL01hdHJvc2thVGFnTWFwcGVyLmpzPzIwNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1hdHJvc2thVGFnTWFwcGVyID0gdm9pZCAwO1xuY29uc3QgQ2FzZUluc2Vuc2l0aXZlVGFnTWFwXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL0Nhc2VJbnNlbnNpdGl2ZVRhZ01hcFwiKTtcbi8qKlxuICogRUJNTCBUYWcgbWFwXG4gKi9cbmNvbnN0IGVibWxUYWdNYXAgPSB7XG4gICAgJ3NlZ21lbnQ6dGl0bGUnOiAndGl0bGUnLFxuICAgICdhbGJ1bTpBUlRJU1QnOiAnYWxidW1hcnRpc3QnLFxuICAgICdhbGJ1bTpBUlRJU1RTT1JUJzogJ2FsYnVtYXJ0aXN0c29ydCcsXG4gICAgJ2FsYnVtOlRJVExFJzogJ2FsYnVtJyxcbiAgICAnYWxidW06REFURV9SRUNPUkRFRCc6ICdvcmlnaW5hbGRhdGUnLFxuICAgICdhbGJ1bTpQQVJUX05VTUJFUic6ICdkaXNrJyxcbiAgICAnYWxidW06VE9UQUxfUEFSVFMnOiAndG90YWx0cmFja3MnLFxuICAgICd0cmFjazpBUlRJU1QnOiAnYXJ0aXN0JyxcbiAgICAndHJhY2s6QVJUSVNUU09SVCc6ICdhcnRpc3Rzb3J0JyxcbiAgICAndHJhY2s6VElUTEUnOiAndGl0bGUnLFxuICAgICd0cmFjazpQQVJUX05VTUJFUic6ICd0cmFjaycsXG4gICAgJ3RyYWNrOk1VU0lDQlJBSU5aX1RSQUNLSUQnOiAnbXVzaWNicmFpbnpfcmVjb3JkaW5naWQnLFxuICAgICd0cmFjazpNVVNJQ0JSQUlOWl9BTEJVTUlEJzogJ211c2ljYnJhaW56X2FsYnVtaWQnLFxuICAgICd0cmFjazpNVVNJQ0JSQUlOWl9BUlRJU1RJRCc6ICdtdXNpY2JyYWluel9hcnRpc3RpZCcsXG4gICAgJ3RyYWNrOlBVQkxJU0hFUic6ICdsYWJlbCcsXG4gICAgJ3RyYWNrOkdFTlJFJzogJ2dlbnJlJyxcbiAgICAndHJhY2s6RU5DT0RFUic6ICdlbmNvZGVkYnknLFxuICAgICd0cmFjazpFTkNPREVSX09QVElPTlMnOiAnZW5jb2RlcnNldHRpbmdzJyxcbiAgICAnZWRpdGlvbjpUT1RBTF9QQVJUUyc6ICd0b3RhbGRpc2NzJyxcbiAgICBwaWN0dXJlOiAncGljdHVyZSdcbn07XG5jbGFzcyBNYXRyb3NrYVRhZ01hcHBlciBleHRlbmRzIENhc2VJbnNlbnNpdGl2ZVRhZ01hcF8xLkNhc2VJbnNlbnNpdGl2ZVRhZ01hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsnbWF0cm9za2EnXSwgZWJtbFRhZ01hcCk7XG4gICAgfVxufVxuZXhwb3J0cy5NYXRyb3NrYVRhZ01hcHBlciA9IE1hdHJvc2thVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWF0cm9za2FUYWdNYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/matroska/types.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/matroska/types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = exports.TargetType = exports.DataType = void 0;\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"string\"] = 0] = \"string\";\n    DataType[DataType[\"uint\"] = 1] = \"uint\";\n    DataType[DataType[\"uid\"] = 2] = \"uid\";\n    DataType[DataType[\"bool\"] = 3] = \"bool\";\n    DataType[DataType[\"binary\"] = 4] = \"binary\";\n    DataType[DataType[\"float\"] = 5] = \"float\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nvar TargetType;\n(function (TargetType) {\n    TargetType[TargetType[\"shot\"] = 10] = \"shot\";\n    TargetType[TargetType[\"scene\"] = 20] = \"scene\";\n    TargetType[TargetType[\"track\"] = 30] = \"track\";\n    TargetType[TargetType[\"part\"] = 40] = \"part\";\n    TargetType[TargetType[\"album\"] = 50] = \"album\";\n    TargetType[TargetType[\"edition\"] = 60] = \"edition\";\n    TargetType[TargetType[\"collection\"] = 70] = \"collection\";\n})(TargetType = exports.TargetType || (exports.TargetType = {}));\nvar TrackType;\n(function (TrackType) {\n    TrackType[TrackType[\"video\"] = 1] = \"video\";\n    TrackType[TrackType[\"audio\"] = 2] = \"audio\";\n    TrackType[TrackType[\"complex\"] = 3] = \"complex\";\n    TrackType[TrackType[\"logo\"] = 4] = \"logo\";\n    TrackType[TrackType[\"subtitle\"] = 17] = \"subtitle\";\n    TrackType[TrackType[\"button\"] = 18] = \"button\";\n    TrackType[TrackType[\"control\"] = 32] = \"control\";\n})(TrackType = exports.TrackType || (exports.TrackType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21hdHJvc2thL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixHQUFHLGtCQUFrQixHQUFHLGdCQUFnQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0MsZ0JBQWdCLEtBQUs7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQ0FBb0MsaUJBQWlCLEtBQUs7QUFDM0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbWF0cm9za2EvdHlwZXMuanM/NzhiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhY2tUeXBlID0gZXhwb3J0cy5UYXJnZXRUeXBlID0gZXhwb3J0cy5EYXRhVHlwZSA9IHZvaWQgMDtcbnZhciBEYXRhVHlwZTtcbihmdW5jdGlvbiAoRGF0YVR5cGUpIHtcbiAgICBEYXRhVHlwZVtEYXRhVHlwZVtcInN0cmluZ1wiXSA9IDBdID0gXCJzdHJpbmdcIjtcbiAgICBEYXRhVHlwZVtEYXRhVHlwZVtcInVpbnRcIl0gPSAxXSA9IFwidWludFwiO1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1widWlkXCJdID0gMl0gPSBcInVpZFwiO1xuICAgIERhdGFUeXBlW0RhdGFUeXBlW1wiYm9vbFwiXSA9IDNdID0gXCJib29sXCI7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJiaW5hcnlcIl0gPSA0XSA9IFwiYmluYXJ5XCI7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJmbG9hdFwiXSA9IDVdID0gXCJmbG9hdFwiO1xufSkoRGF0YVR5cGUgPSBleHBvcnRzLkRhdGFUeXBlIHx8IChleHBvcnRzLkRhdGFUeXBlID0ge30pKTtcbnZhciBUYXJnZXRUeXBlO1xuKGZ1bmN0aW9uIChUYXJnZXRUeXBlKSB7XG4gICAgVGFyZ2V0VHlwZVtUYXJnZXRUeXBlW1wic2hvdFwiXSA9IDEwXSA9IFwic2hvdFwiO1xuICAgIFRhcmdldFR5cGVbVGFyZ2V0VHlwZVtcInNjZW5lXCJdID0gMjBdID0gXCJzY2VuZVwiO1xuICAgIFRhcmdldFR5cGVbVGFyZ2V0VHlwZVtcInRyYWNrXCJdID0gMzBdID0gXCJ0cmFja1wiO1xuICAgIFRhcmdldFR5cGVbVGFyZ2V0VHlwZVtcInBhcnRcIl0gPSA0MF0gPSBcInBhcnRcIjtcbiAgICBUYXJnZXRUeXBlW1RhcmdldFR5cGVbXCJhbGJ1bVwiXSA9IDUwXSA9IFwiYWxidW1cIjtcbiAgICBUYXJnZXRUeXBlW1RhcmdldFR5cGVbXCJlZGl0aW9uXCJdID0gNjBdID0gXCJlZGl0aW9uXCI7XG4gICAgVGFyZ2V0VHlwZVtUYXJnZXRUeXBlW1wiY29sbGVjdGlvblwiXSA9IDcwXSA9IFwiY29sbGVjdGlvblwiO1xufSkoVGFyZ2V0VHlwZSA9IGV4cG9ydHMuVGFyZ2V0VHlwZSB8fCAoZXhwb3J0cy5UYXJnZXRUeXBlID0ge30pKTtcbnZhciBUcmFja1R5cGU7XG4oZnVuY3Rpb24gKFRyYWNrVHlwZSkge1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJ2aWRlb1wiXSA9IDFdID0gXCJ2aWRlb1wiO1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJhdWRpb1wiXSA9IDJdID0gXCJhdWRpb1wiO1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJjb21wbGV4XCJdID0gM10gPSBcImNvbXBsZXhcIjtcbiAgICBUcmFja1R5cGVbVHJhY2tUeXBlW1wibG9nb1wiXSA9IDRdID0gXCJsb2dvXCI7XG4gICAgVHJhY2tUeXBlW1RyYWNrVHlwZVtcInN1YnRpdGxlXCJdID0gMTddID0gXCJzdWJ0aXRsZVwiO1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJidXR0b25cIl0gPSAxOF0gPSBcImJ1dHRvblwiO1xuICAgIFRyYWNrVHlwZVtUcmFja1R5cGVbXCJjb250cm9sXCJdID0gMzJdID0gXCJjb250cm9sXCI7XG59KShUcmFja1R5cGUgPSBleHBvcnRzLlRyYWNrVHlwZSB8fCAoZXhwb3J0cy5UcmFja1R5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/matroska/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mp4/Atom.js":
/*!*****************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/Atom.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Atom = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst AtomToken = __webpack_require__(/*! ./AtomToken */ \"(ssr)/./node_modules/music-metadata/lib/mp4/AtomToken.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:MP4:Atom');\nclass Atom {\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\n        // Parse atom header\n        const offset = tokenizer.position;\n        // debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\n        const header = await tokenizer.readToken(AtomToken.Header);\n        const extended = header.length === BigInt(1);\n        if (extended) {\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\n        }\n        const atomBean = new Atom(header, header.length === BigInt(1), parent);\n        const payloadLength = atomBean.getPayloadLength(remaining);\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\n        return atomBean;\n    }\n    constructor(header, extended, parent) {\n        this.header = header;\n        this.extended = extended;\n        this.parent = parent;\n        this.children = [];\n        this.atomPath = (this.parent ? this.parent.atomPath + '.' : '') + this.header.name;\n    }\n    getHeaderLength() {\n        return this.extended ? 16 : 8;\n    }\n    getPayloadLength(remaining) {\n        return (this.header.length === BigInt(0) ? remaining : Number(this.header.length)) - this.getHeaderLength();\n    }\n    async readAtoms(tokenizer, dataHandler, size) {\n        while (size > 0) {\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\n            this.children.push(atomBean);\n            size -= atomBean.header.length === BigInt(0) ? size : Number(atomBean.header.length);\n        }\n    }\n    async readData(tokenizer, dataHandler, remaining) {\n        switch (this.header.name) {\n            // \"Container\" atoms, contains nested atoms\n            case 'moov': // The Movie Atom: contains other atoms\n            case 'udta': // User defined atom\n            case 'trak':\n            case 'mdia': // Media atom\n            case 'minf': // Media Information Atom\n            case 'stbl': // The Sample Table Atom\n            case '<id>':\n            case 'ilst':\n            case 'tref':\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\n            case 'meta': // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n                // meta has 4 bytes of padding, ignore\n                const peekHeader = await tokenizer.peekToken(AtomToken.Header);\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\n                await tokenizer.ignore(paddingLength);\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\n            case 'mdhd': // Media header atom\n            case 'mvhd': // 'movie' => 'mvhd': movie header atom; child of Movie Atom\n            case 'tkhd':\n            case 'stsz':\n            case 'mdat':\n            default:\n                return dataHandler(this, remaining);\n        }\n    }\n}\nexports.Atom = Atom;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wNC9BdG9tLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWixnQkFBZ0IsbUJBQU8sQ0FBQyxzREFBTztBQUMvQixrQkFBa0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELE9BQU8sT0FBTztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxrQkFBa0IsYUFBYSxrQkFBa0IsV0FBVyxPQUFPLFFBQVEsdUJBQXVCLElBQUk7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXA0L0F0b20uanM/OWVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXRvbSA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBBdG9tVG9rZW4gPSByZXF1aXJlKFwiLi9BdG9tVG9rZW5cIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6TVA0OkF0b20nKTtcbmNsYXNzIEF0b20ge1xuICAgIHN0YXRpYyBhc3luYyByZWFkQXRvbSh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCBwYXJlbnQsIHJlbWFpbmluZykge1xuICAgICAgICAvLyBQYXJzZSBhdG9tIGhlYWRlclxuICAgICAgICBjb25zdCBvZmZzZXQgPSB0b2tlbml6ZXIucG9zaXRpb247XG4gICAgICAgIC8vIGRlYnVnKGBSZWFkaW5nIG5leHQgdG9rZW4gb24gb2Zmc2V0PSR7b2Zmc2V0fS4uLmApOyAvLyAgYnVmLnRvU3RyaW5nKCdhc2NpaScpXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGF3YWl0IHRva2VuaXplci5yZWFkVG9rZW4oQXRvbVRva2VuLkhlYWRlcik7XG4gICAgICAgIGNvbnN0IGV4dGVuZGVkID0gaGVhZGVyLmxlbmd0aCA9PT0gQmlnSW50KDEpO1xuICAgICAgICBpZiAoZXh0ZW5kZWQpIHtcbiAgICAgICAgICAgIGhlYWRlci5sZW5ndGggPSBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKEF0b21Ub2tlbi5FeHRlbmRlZFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0b21CZWFuID0gbmV3IEF0b20oaGVhZGVyLCBoZWFkZXIubGVuZ3RoID09PSBCaWdJbnQoMSksIHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHBheWxvYWRMZW5ndGggPSBhdG9tQmVhbi5nZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZyk7XG4gICAgICAgIGRlYnVnKGBwYXJzZSBhdG9tIG5hbWU9JHthdG9tQmVhbi5hdG9tUGF0aH0sIGV4dGVuZGVkPSR7YXRvbUJlYW4uZXh0ZW5kZWR9LCBvZmZzZXQ9JHtvZmZzZXR9LCBsZW49JHthdG9tQmVhbi5oZWFkZXIubGVuZ3RofWApOyAvLyAgYnVmLnRvU3RyaW5nKCdhc2NpaScpXG4gICAgICAgIGF3YWl0IGF0b21CZWFuLnJlYWREYXRhKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHBheWxvYWRMZW5ndGgpO1xuICAgICAgICByZXR1cm4gYXRvbUJlYW47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGhlYWRlciwgZXh0ZW5kZWQsIHBhcmVudCkge1xuICAgICAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjtcbiAgICAgICAgdGhpcy5leHRlbmRlZCA9IGV4dGVuZGVkO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmF0b21QYXRoID0gKHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuYXRvbVBhdGggKyAnLicgOiAnJykgKyB0aGlzLmhlYWRlci5uYW1lO1xuICAgIH1cbiAgICBnZXRIZWFkZXJMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZGVkID8gMTYgOiA4O1xuICAgIH1cbiAgICBnZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZykge1xuICAgICAgICByZXR1cm4gKHRoaXMuaGVhZGVyLmxlbmd0aCA9PT0gQmlnSW50KDApID8gcmVtYWluaW5nIDogTnVtYmVyKHRoaXMuaGVhZGVyLmxlbmd0aCkpIC0gdGhpcy5nZXRIZWFkZXJMZW5ndGgoKTtcbiAgICB9XG4gICAgYXN5bmMgcmVhZEF0b21zKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHNpemUpIHtcbiAgICAgICAgd2hpbGUgKHNpemUgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhdG9tQmVhbiA9IGF3YWl0IEF0b20ucmVhZEF0b20odG9rZW5pemVyLCBkYXRhSGFuZGxlciwgdGhpcywgc2l6ZSk7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYXRvbUJlYW4pO1xuICAgICAgICAgICAgc2l6ZSAtPSBhdG9tQmVhbi5oZWFkZXIubGVuZ3RoID09PSBCaWdJbnQoMCkgPyBzaXplIDogTnVtYmVyKGF0b21CZWFuLmhlYWRlci5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJlYWREYXRhKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHJlbWFpbmluZykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuaGVhZGVyLm5hbWUpIHtcbiAgICAgICAgICAgIC8vIFwiQ29udGFpbmVyXCIgYXRvbXMsIGNvbnRhaW5zIG5lc3RlZCBhdG9tc1xuICAgICAgICAgICAgY2FzZSAnbW9vdic6IC8vIFRoZSBNb3ZpZSBBdG9tOiBjb250YWlucyBvdGhlciBhdG9tc1xuICAgICAgICAgICAgY2FzZSAndWR0YSc6IC8vIFVzZXIgZGVmaW5lZCBhdG9tXG4gICAgICAgICAgICBjYXNlICd0cmFrJzpcbiAgICAgICAgICAgIGNhc2UgJ21kaWEnOiAvLyBNZWRpYSBhdG9tXG4gICAgICAgICAgICBjYXNlICdtaW5mJzogLy8gTWVkaWEgSW5mb3JtYXRpb24gQXRvbVxuICAgICAgICAgICAgY2FzZSAnc3RibCc6IC8vIFRoZSBTYW1wbGUgVGFibGUgQXRvbVxuICAgICAgICAgICAgY2FzZSAnPGlkPic6XG4gICAgICAgICAgICBjYXNlICdpbHN0JzpcbiAgICAgICAgICAgIGNhc2UgJ3RyZWYnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRBdG9tcyh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCB0aGlzLmdldFBheWxvYWRMZW5ndGgocmVtYWluaW5nKSk7XG4gICAgICAgICAgICBjYXNlICdtZXRhJzogLy8gTWV0YWRhdGEgQXRvbSwgcmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9jb250ZW50L2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvTWV0YWRhdGEvTWV0YWRhdGEuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDA5MzktQ0gxLVNXOFxuICAgICAgICAgICAgICAgIC8vIG1ldGEgaGFzIDQgYnl0ZXMgb2YgcGFkZGluZywgaWdub3JlXG4gICAgICAgICAgICAgICAgY29uc3QgcGVla0hlYWRlciA9IGF3YWl0IHRva2VuaXplci5wZWVrVG9rZW4oQXRvbVRva2VuLkhlYWRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZ0xlbmd0aCA9IHBlZWtIZWFkZXIubmFtZSA9PT0gJ2hkbHInID8gMCA6IDQ7XG4gICAgICAgICAgICAgICAgYXdhaXQgdG9rZW5pemVyLmlnbm9yZShwYWRkaW5nTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkQXRvbXModG9rZW5pemVyLCBkYXRhSGFuZGxlciwgdGhpcy5nZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZykgLSBwYWRkaW5nTGVuZ3RoKTtcbiAgICAgICAgICAgIGNhc2UgJ21kaGQnOiAvLyBNZWRpYSBoZWFkZXIgYXRvbVxuICAgICAgICAgICAgY2FzZSAnbXZoZCc6IC8vICdtb3ZpZScgPT4gJ212aGQnOiBtb3ZpZSBoZWFkZXIgYXRvbTsgY2hpbGQgb2YgTW92aWUgQXRvbVxuICAgICAgICAgICAgY2FzZSAndGtoZCc6XG4gICAgICAgICAgICBjYXNlICdzdHN6JzpcbiAgICAgICAgICAgIGNhc2UgJ21kYXQnOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YUhhbmRsZXIodGhpcywgcmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXRvbSA9IEF0b207XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mp4/Atom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mp4/AtomToken.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/AtomToken.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChapterText = exports.StcoAtom = exports.StszAtom = exports.StscAtom = exports.SampleToChunkToken = exports.SttsAtom = exports.TimeToSampleToken = exports.SoundSampleDescriptionV0 = exports.SoundSampleDescriptionVersion = exports.StsdAtom = exports.TrackHeaderAtom = exports.NameAtom = exports.DataAtom = exports.MvhdAtom = exports.MdhdAtom = exports.FixedLengthAtom = exports.mhdr = exports.tkhd = exports.ftyp = exports.ExtendedSize = exports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:MP4:atom');\nexports.Header = {\n    len: 8,\n    get: (buf, off) => {\n        const length = Token.UINT32_BE.get(buf, off);\n        if (length < 0)\n            throw new Error('Invalid atom header length');\n        return {\n            length: BigInt(length),\n            name: new Token.StringType(4, 'binary').get(buf, off + 4)\n        };\n    },\n    put: (buf, off, hdr) => {\n        Token.UINT32_BE.put(buf, off, Number(hdr.length));\n        return FourCC_1.FourCcToken.put(buf, off + 4, hdr.name);\n    }\n};\n/**\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\n */\nexports.ExtendedSize = Token.UINT64_BE;\nexports.ftyp = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\nexports.tkhd = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\n/**\n * Token: Movie Header Atom\n */\nexports.mhdr = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Base class for 'fixed' length atoms.\n * In some cases these atoms are longer then the sum of the described fields.\n * Issue: https://github.com/Borewit/music-metadata/issues/120\n */\nclass FixedLengthAtom {\n    /**\n     *\n     * @param {number} len Length as specified in the size field\n     * @param {number} expLen Total length of sum of specified fields in the standard\n     */\n    constructor(len, expLen, atomId) {\n        this.len = len;\n        if (len < expLen) {\n            throw new Error(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\n        }\n        else if (len > expLen) {\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\n        }\n    }\n}\nexports.FixedLengthAtom = FixedLengthAtom;\n/**\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\n */\nconst SecondsSinceMacEpoch = {\n    len: 4,\n    get: (buf, off) => {\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\n        return new Date(secondsSinceUnixEpoch * 1000);\n    }\n};\n/**\n * Token: Media Header Atom\n * Ref:\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\n */\nclass MdhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 24, 'mdhd');\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off + 0),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            language: Token.UINT16_BE.get(buf, off + 20),\n            quality: Token.UINT16_BE.get(buf, off + 22)\n        };\n    }\n}\nexports.MdhdAtom = MdhdAtom;\n/**\n * Token: Movie Header Atom\n */\nclass MvhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 100, 'mvhd');\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\n            // ignore reserver: 10 bytes\n            // ignore matrix structure: 36 bytes\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\n        };\n    }\n}\nexports.MvhdAtom = MvhdAtom;\n/**\n * Data Atom Structure\n */\nclass DataAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            type: {\n                set: Token.UINT8.get(buf, off + 0),\n                type: Token.UINT24_BE.get(buf, off + 1)\n            },\n            locale: Token.UINT24_BE.get(buf, off + 4),\n            value: Buffer.from(new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8))\n        };\n    }\n}\nexports.DataAtom = DataAtom;\n/**\n * Data Atom Structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\n */\nclass NameAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\n        };\n    }\n}\nexports.NameAtom = NameAtom;\n/**\n * Track Header Atoms structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\n */\nclass TrackHeaderAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            trackId: Token.UINT32_BE.get(buf, off + 12),\n            // reserved 4 bytes\n            duration: Token.UINT32_BE.get(buf, off + 20),\n            layer: Token.UINT16_BE.get(buf, off + 24),\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\n            // ToDo: add remaining fields\n        };\n    }\n}\nexports.TrackHeaderAtom = TrackHeaderAtom;\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nconst stsdHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nclass SampleDescriptionTable {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            dataFormat: FourCC_1.FourCcToken.get(buf, off),\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\n            description: new Token.Uint8ArrayType(this.len - 12).get(buf, off + 12)\n        };\n    }\n}\n/**\n * Atom: Sample-description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nclass StsdAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const header = stsdHeader.get(buf, off);\n        off += stsdHeader.len;\n        const table = [];\n        for (let n = 0; n < header.numberOfEntries; ++n) {\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\n            off += Token.UINT32_BE.len;\n            table.push(new SampleDescriptionTable(size).get(buf, off));\n            off += size;\n        }\n        return {\n            header,\n            table\n        };\n    }\n}\nexports.StsdAtom = StsdAtom;\n/**\n * Common Sound Sample Description (version & revision)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\n */\nexports.SoundSampleDescriptionVersion = {\n    len: 8,\n    get(buf, off) {\n        return {\n            version: Token.INT16_BE.get(buf, off),\n            revision: Token.INT16_BE.get(buf, off + 2),\n            vendor: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Sound Sample Description (Version 0)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\n */\nexports.SoundSampleDescriptionV0 = {\n    len: 12,\n    get(buf, off) {\n        return {\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\n            compressionId: Token.INT16_BE.get(buf, off + 4),\n            packetSize: Token.INT16_BE.get(buf, off + 6),\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\n        };\n    }\n};\nclass SimpleTableAtom {\n    constructor(len, token) {\n        this.len = len;\n        this.token = token;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\n        return {\n            version: Token.INT8.get(buf, off + 0),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\n        };\n    }\n}\nexports.TimeToSampleToken = {\n    len: 8,\n    get(buf, off) {\n        return {\n            count: Token.INT32_BE.get(buf, off + 0),\n            duration: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Time-to-sample('stts') atom.\n * Store duration information for a media’s samples.\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\n */\nclass SttsAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, exports.TimeToSampleToken);\n        this.len = len;\n    }\n}\nexports.SttsAtom = SttsAtom;\nexports.SampleToChunkToken = {\n    len: 12,\n    get(buf, off) {\n        return {\n            firstChunk: Token.INT32_BE.get(buf, off),\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\n        };\n    }\n};\n/**\n * Sample-to-Chunk ('stsc') atom interface\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\n */\nclass StscAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, exports.SampleToChunkToken);\n        this.len = len;\n    }\n}\nexports.StscAtom = StscAtom;\n/**\n * Sample-size ('stsz') atom\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\n */\nclass StszAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\n        return {\n            version: Token.INT8.get(buf, off),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\n        };\n    }\n}\nexports.StszAtom = StszAtom;\n/**\n * Chunk offset atom, 'stco'\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\n */\nclass StcoAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, Token.INT32_BE);\n        this.len = len;\n    }\n}\nexports.StcoAtom = StcoAtom;\n/**\n * Token used to decode text-track from 'mdat' atom (raw data stream)\n */\nclass ChapterText {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\n        const str = new Token.StringType(titleLen, 'utf-8');\n        return str.get(buf, off + 2);\n    }\n}\nexports.ChapterText = ChapterText;\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\n    if (remainingLen === 0)\n        return [];\n    if (remainingLen !== numberOfEntries * token.len)\n        throw new Error('mismatch number-of-entries with remaining atom-length');\n    const entries = [];\n    // parse offset-table\n    for (let n = 0; n < numberOfEntries; ++n) {\n        entries.push(token.get(buf, off));\n        off += token.len;\n    }\n    return entries;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mp4/AtomToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mp4/MP4Parser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/MP4Parser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MP4Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst ID3v1Parser_1 = __webpack_require__(/*! ../id3v1/ID3v1Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\nconst type_1 = __webpack_require__(/*! ../type */ \"(ssr)/./node_modules/music-metadata/lib/type.js\");\nconst Atom_1 = __webpack_require__(/*! ./Atom */ \"(ssr)/./node_modules/music-metadata/lib/mp4/Atom.js\");\nconst AtomToken = __webpack_require__(/*! ./AtomToken */ \"(ssr)/./node_modules/music-metadata/lib/mp4/AtomToken.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:MP4');\nconst tagFormat = 'iTunes';\nconst encoderDict = {\n    raw: {\n        lossy: false,\n        format: 'raw'\n    },\n    MAC3: {\n        lossy: true,\n        format: 'MACE 3:1'\n    },\n    MAC6: {\n        lossy: true,\n        format: 'MACE 6:1'\n    },\n    ima4: {\n        lossy: true,\n        format: 'IMA 4:1'\n    },\n    ulaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    alaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    Qclp: {\n        lossy: true,\n        format: 'QUALCOMM PureVoice'\n    },\n    '.mp3': {\n        lossy: true,\n        format: 'MPEG-1 layer 3'\n    },\n    alac: {\n        lossy: false,\n        format: 'ALAC'\n    },\n    'ac-3': {\n        lossy: true,\n        format: 'AC-3'\n    },\n    mp4a: {\n        lossy: true,\n        format: 'MPEG-4/AAC'\n    },\n    mp4s: {\n        lossy: true,\n        format: 'MP4S'\n    },\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\n    c608: {\n        lossy: true,\n        format: 'CEA-608'\n    },\n    c708: {\n        lossy: true,\n        format: 'CEA-708'\n    }\n};\nfunction distinct(value, index, self) {\n    return self.indexOf(value) === index;\n}\n/*\n * Parser for the MP4 (MPEG-4 Part 14) container format\n * Standard: ISO/IEC 14496-14\n * supporting:\n * - QuickTime container\n * - MP4 File Format\n * - 3GPP file format\n * - 3GPP2 file format\n *\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\n * Support for Apple iTunes tags as found in a M4A/M4V files.\n * Ref:\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\n */\nclass MP4Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.atomParsers = {\n            /**\n             * Parse movie header (mvhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\n             */\n            mvhd: async (len) => {\n                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\n            },\n            /**\n             * Parse media header (mdhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\n             */\n            mdhd: async (len) => {\n                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\n                const td = this.getTrackDescription();\n                td.creationTime = mdhd_data.creationTime;\n                td.modificationTime = mdhd_data.modificationTime;\n                td.timeScale = mdhd_data.timeScale;\n                td.duration = mdhd_data.duration;\n            },\n            chap: async (len) => {\n                const td = this.getTrackDescription();\n                const trackIds = [];\n                while (len >= Token.UINT32_BE.len) {\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\n                    len -= Token.UINT32_BE.len;\n                }\n                td.chapterList = trackIds;\n            },\n            tkhd: async (len) => {\n                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));\n                this.tracks.push(track);\n            },\n            /**\n             * Parse mdat atom.\n             * Will scan for chapters\n             */\n            mdat: async (len) => {\n                this.audioLengthInBytes = len;\n                this.calculateBitRate();\n                if (this.options.includeChapters) {\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\n                    if (trackWithChapters.length === 1) {\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\n                        if (chapterTracks.length === 1) {\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\n                        }\n                    }\n                }\n                await this.tokenizer.ignore(len);\n            },\n            ftyp: async (len) => {\n                const types = [];\n                while (len > 0) {\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\n                    len -= AtomToken.ftyp.len;\n                    const value = ftype.type.replace(/\\W/g, '');\n                    if (value.length > 0) {\n                        types.push(value); // unshift for backward compatibility\n                    }\n                }\n                debug(`ftyp: ${types.join('/')}`);\n                const x = types.filter(distinct).join('/');\n                this.metadata.setFormat('container', x);\n            },\n            /**\n             * Parse sample description atom\n             */\n            stsd: async (len) => {\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\n                const trackDescription = this.getTrackDescription();\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n            },\n            /**\n             * sample-to-Chunk Atoms\n             */\n            stsc: async (len) => {\n                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\n            },\n            /**\n             * time-to-sample table\n             */\n            stts: async (len) => {\n                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));\n                this.getTrackDescription().timeToSampleTable = stts.entries;\n            },\n            /**\n             * Parse sample-sizes atom ('stsz')\n             */\n            stsz: async (len) => {\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\n                const td = this.getTrackDescription();\n                td.sampleSize = stsz.sampleSize;\n                td.sampleSizeTable = stsz.entries;\n            },\n            /**\n             * Parse chunk-offset atom ('stco')\n             */\n            stco: async (len) => {\n                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\n            },\n            date: async (len) => {\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\n                this.addTag('date', date);\n            }\n        };\n    }\n    static read_BE_Integer(array, signed) {\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\n        const token = Token[integerType];\n        if (!token) {\n            throw new Error('Token for integer type not found: \"' + integerType + '\"');\n        }\n        return Number(token.get(array, 0));\n    }\n    async parse() {\n        this.tracks = [];\n        let remainingFileSize = this.tokenizer.fileInfo.size;\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\n            try {\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\n                if (token.name === '\\0\\0\\0\\0') {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                    break;\n                }\n            }\n            catch (error) {\n                const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\n                debug(errMsg);\n                this.addWarning(errMsg);\n                break;\n            }\n            const rootAtom = await Atom_1.Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\n        }\n        // Post process metadata\n        const formatList = [];\n        this.tracks.forEach(track => {\n            const trackFormats = [];\n            track.soundSampleDescription.forEach(ssd => {\n                const streamInfo = {};\n                const encoderInfo = encoderDict[ssd.dataFormat];\n                if (encoderInfo) {\n                    trackFormats.push(encoderInfo.format);\n                    streamInfo.codecName = encoderInfo.format;\n                }\n                else {\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\n                }\n                if (ssd.description) {\n                    const { description } = ssd;\n                    if (description.sampleRate > 0) {\n                        streamInfo.type = type_1.TrackType.audio;\n                        streamInfo.audio = {\n                            samplingFrequency: description.sampleRate,\n                            bitDepth: description.sampleSize,\n                            channels: description.numAudioChannels\n                        };\n                    }\n                }\n                this.metadata.addStreamInfo(streamInfo);\n            });\n            if (trackFormats.length >= 1) {\n                formatList.push(trackFormats.join('/'));\n            }\n        });\n        if (formatList.length > 0) {\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\n        }\n        const audioTracks = this.tracks.filter(track => {\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\n        });\n        if (audioTracks.length >= 1) {\n            const audioTrack = audioTracks[0];\n            if (audioTrack.timeScale > 0) {\n                const duration = audioTrack.duration / audioTrack.timeScale; // calculate duration in seconds\n                this.metadata.setFormat('duration', duration);\n            }\n            const ssd = audioTrack.soundSampleDescription[0];\n            if (ssd.description) {\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\n                if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {\n                    const totalSampleSize = audioTrack.timeToSampleTable\n                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)\n                        .reduce((total, sampleSize) => total + sampleSize);\n                    const duration = totalSampleSize / ssd.description.sampleRate;\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const encoderInfo = encoderDict[ssd.dataFormat];\n            if (encoderInfo) {\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\n            }\n            this.calculateBitRate();\n        }\n    }\n    async handleAtom(atom, remaining) {\n        if (atom.parent) {\n            switch (atom.parent.header.name) {\n                case 'ilst':\n                case '<id>':\n                    return this.parseMetadataItemData(atom);\n            }\n        }\n        // const payloadLength = atom.getPayloadLength(remaining);\n        if (this.atomParsers[atom.header.name]) {\n            return this.atomParsers[atom.header.name](remaining);\n        }\n        else {\n            debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\n            await this.tokenizer.ignore(remaining);\n        }\n    }\n    getTrackDescription() {\n        return this.tracks[this.tracks.length - 1];\n    }\n    calculateBitRate() {\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag(tagFormat, id, value);\n    }\n    addWarning(message) {\n        debug('Warning: ' + message);\n        this.metadata.addWarning(message);\n    }\n    /**\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\n     * @param metaAtom\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n     */\n    parseMetadataItemData(metaAtom) {\n        let tagKey = metaAtom.header.name;\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'data': // value atom\n                    return this.parseValueAtom(tagKey, child);\n                case 'name': // name atom (optional)\n                case 'mean':\n                case 'rate':\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\n                    tagKey += ':' + name.name;\n                    break;\n                default:\n                    const dataAtom = await this.tokenizer.readToken(new Token.BufferType(payLoadLength));\n                    this.addWarning('Unsupported meta-item: ' + tagKey + '[' + child.header.name + '] => value=' + dataAtom.toString('hex') + ' ascii=' + dataAtom.toString('ascii'));\n            }\n        }, metaAtom.getPayloadLength(0));\n    }\n    async parseValueAtom(tagKey, metaAtom) {\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));\n        if (dataAtom.type.set !== 0) {\n            throw new Error('Unsupported type-set != 0: ' + dataAtom.type.set);\n        }\n        // Use well-known-type table\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\n        switch (dataAtom.type.type) {\n            case 0: // reserved: Reserved for use where no type needs to be indicated\n                switch (tagKey) {\n                    case 'trkn':\n                    case 'disk':\n                        const num = Token.UINT8.get(dataAtom.value, 3);\n                        const of = Token.UINT8.get(dataAtom.value, 5);\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\n                        this.addTag(tagKey, num + '/' + of);\n                        break;\n                    case 'gnre':\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\n                        const genreStr = ID3v1Parser_1.Genres[genreInt - 1];\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\n                        this.addTag(tagKey, genreStr);\n                        break;\n                    case 'rate':\n                        const rate = dataAtom.value.toString('ascii');\n                        this.addTag(tagKey, rate);\n                        break;\n                    default:\n                        debug('unknown proprietary value type for: ' + metaAtom.atomPath);\n                }\n                break;\n            case 1: // UTF-8: Without any count or NULL terminator\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\n                this.addTag(tagKey, dataAtom.value.toString('utf-8'));\n                break;\n            case 13: // JPEG\n                if (this.options.skipCovers)\n                    break;\n                this.addTag(tagKey, {\n                    format: 'image/jpeg',\n                    data: Buffer.from(dataAtom.value)\n                });\n                break;\n            case 14: // PNG\n                if (this.options.skipCovers)\n                    break;\n                this.addTag(tagKey, {\n                    format: 'image/png',\n                    data: Buffer.from(dataAtom.value)\n                });\n                break;\n            case 21: // BE Signed Integer\n                this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\n                break;\n            case 22: // BE Unsigned Integer\n                this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\n                break;\n            case 65: // An 8-bit signed integer\n                this.addTag(tagKey, dataAtom.value.readInt8(0));\n                break;\n            case 66: // A big-endian 16-bit signed integer\n                this.addTag(tagKey, dataAtom.value.readInt16BE(0));\n                break;\n            case 67: // A big-endian 32-bit signed integer\n                this.addTag(tagKey, dataAtom.value.readInt32BE(0));\n                break;\n            default:\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\n        }\n    }\n    /**\n     * @param sampleDescription\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\n     */\n    parseSoundSampleDescription(sampleDescription) {\n        const ssd = {\n            dataFormat: sampleDescription.dataFormat,\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\n        };\n        let offset = 0;\n        const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\n        offset += AtomToken.SoundSampleDescriptionVersion.len;\n        if (version.version === 0 || version.version === 1) {\n            // Sound Sample Description (Version 0)\n            ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\n        }\n        else {\n            debug(`Warning: sound-sample-description ${version} not implemented`);\n        }\n        return ssd;\n    }\n    async parseChapterTrack(chapterTrack, track, len) {\n        if (!chapterTrack.sampleSize) {\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\n        }\n        const chapters = [];\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\n            len -= nextChunkLen + sampleSize;\n            if (len < 0)\n                throw new Error('Chapter chunk exceeding token length');\n            await this.tokenizer.ignore(nextChunkLen);\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\n            debug(`Chapter ${i + 1}: ${title}`);\n            const chapter = {\n                title,\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\n            };\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\n            chapters.push(chapter);\n        }\n        this.metadata.setFormat('chapters', chapters);\n        await this.tokenizer.ignore(len);\n    }\n    findSampleOffset(track, chapterOffset) {\n        let totalDuration = 0;\n        track.timeToSampleTable.forEach(e => {\n            totalDuration += e.count * e.duration;\n        });\n        debug(`Total duration=${totalDuration}`);\n        let chunkIndex = 0;\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\n            ++chunkIndex;\n        }\n        return this.getChunkDuration(chunkIndex + 1, track);\n    }\n    getChunkDuration(chunkId, track) {\n        let ttsi = 0;\n        let ttsc = track.timeToSampleTable[ttsi].count;\n        let ttsd = track.timeToSampleTable[ttsi].duration;\n        let curChunkId = 1;\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n        let totalDuration = 0;\n        while (curChunkId < chunkId) {\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\n            totalDuration += nrOfSamples * ttsd;\n            ttsc -= nrOfSamples;\n            samplesPerChunk -= nrOfSamples;\n            if (samplesPerChunk === 0) {\n                ++curChunkId;\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n            }\n            else {\n                ++ttsi;\n                ttsc = track.timeToSampleTable[ttsi].count;\n                ttsd = track.timeToSampleTable[ttsi].duration;\n            }\n        }\n        return totalDuration;\n    }\n    getSamplesPerChunk(chunkId, stcTable) {\n        for (let i = 0; i < stcTable.length - 1; ++i) {\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\n                return stcTable[i].samplesPerChunk;\n            }\n        }\n        return stcTable[stcTable.length - 1].samplesPerChunk;\n    }\n}\nexports.MP4Parser = MP4Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mp4/MP4Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mp4/MP4TagMapper.js":
/*!*************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mp4/MP4TagMapper.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MP4TagMapper = exports.tagType = void 0;\nconst CaseInsensitiveTagMap_1 = __webpack_require__(/*! ../common/CaseInsensitiveTagMap */ \"(ssr)/./node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js\");\n/**\n * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n */\nconst mp4TagMap = {\n    '©nam': 'title',\n    '©ART': 'artist',\n    aART: 'albumartist',\n    /**\n     * ToDo: Album artist seems to be stored here while Picard documentation says: aART\n     */\n    '----:com.apple.iTunes:Band': 'albumartist',\n    '©alb': 'album',\n    '©day': 'date',\n    '©cmt': 'comment',\n    '©com': 'comment',\n    trkn: 'track',\n    disk: 'disk',\n    '©gen': 'genre',\n    covr: 'picture',\n    '©wrt': 'composer',\n    '©lyr': 'lyrics',\n    soal: 'albumsort',\n    sonm: 'titlesort',\n    soar: 'artistsort',\n    soaa: 'albumartistsort',\n    soco: 'composersort',\n    '----:com.apple.iTunes:LYRICIST': 'lyricist',\n    '----:com.apple.iTunes:CONDUCTOR': 'conductor',\n    '----:com.apple.iTunes:REMIXER': 'remixer',\n    '----:com.apple.iTunes:ENGINEER': 'engineer',\n    '----:com.apple.iTunes:PRODUCER': 'producer',\n    '----:com.apple.iTunes:DJMIXER': 'djmixer',\n    '----:com.apple.iTunes:MIXER': 'mixer',\n    '----:com.apple.iTunes:LABEL': 'label',\n    '©grp': 'grouping',\n    '----:com.apple.iTunes:SUBTITLE': 'subtitle',\n    '----:com.apple.iTunes:DISCSUBTITLE': 'discsubtitle',\n    cpil: 'compilation',\n    tmpo: 'bpm',\n    '----:com.apple.iTunes:MOOD': 'mood',\n    '----:com.apple.iTunes:MEDIA': 'media',\n    '----:com.apple.iTunes:CATALOGNUMBER': 'catalognumber',\n    tvsh: 'tvShow',\n    tvsn: 'tvSeason',\n    tves: 'tvEpisode',\n    sosn: 'tvShowSort',\n    tven: 'tvEpisodeId',\n    tvnn: 'tvNetwork',\n    pcst: 'podcast',\n    purl: 'podcasturl',\n    '----:com.apple.iTunes:MusicBrainz Album Status': 'releasestatus',\n    '----:com.apple.iTunes:MusicBrainz Album Type': 'releasetype',\n    '----:com.apple.iTunes:MusicBrainz Album Release Country': 'releasecountry',\n    '----:com.apple.iTunes:SCRIPT': 'script',\n    '----:com.apple.iTunes:LANGUAGE': 'language',\n    cprt: 'copyright',\n    '©cpy': 'copyright',\n    '----:com.apple.iTunes:LICENSE': 'license',\n    '©too': 'encodedby',\n    pgap: 'gapless',\n    '----:com.apple.iTunes:BARCODE': 'barcode',\n    '----:com.apple.iTunes:ISRC': 'isrc',\n    '----:com.apple.iTunes:ASIN': 'asin',\n    '----:com.apple.iTunes:NOTES': 'comment',\n    '----:com.apple.iTunes:MusicBrainz Track Id': 'musicbrainz_recordingid',\n    '----:com.apple.iTunes:MusicBrainz Release Track Id': 'musicbrainz_trackid',\n    '----:com.apple.iTunes:MusicBrainz Album Id': 'musicbrainz_albumid',\n    '----:com.apple.iTunes:MusicBrainz Artist Id': 'musicbrainz_artistid',\n    '----:com.apple.iTunes:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\n    '----:com.apple.iTunes:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\n    '----:com.apple.iTunes:MusicBrainz Work Id': 'musicbrainz_workid',\n    '----:com.apple.iTunes:MusicBrainz TRM Id': 'musicbrainz_trmid',\n    '----:com.apple.iTunes:MusicBrainz Disc Id': 'musicbrainz_discid',\n    '----:com.apple.iTunes:Acoustid Id': 'acoustid_id',\n    '----:com.apple.iTunes:Acoustid Fingerprint': 'acoustid_fingerprint',\n    '----:com.apple.iTunes:MusicIP PUID': 'musicip_puid',\n    '----:com.apple.iTunes:fingerprint': 'musicip_fingerprint',\n    '----:com.apple.iTunes:replaygain_track_gain': 'replaygain_track_gain',\n    '----:com.apple.iTunes:replaygain_track_peak': 'replaygain_track_peak',\n    '----:com.apple.iTunes:replaygain_album_gain': 'replaygain_album_gain',\n    '----:com.apple.iTunes:replaygain_album_peak': 'replaygain_album_peak',\n    '----:com.apple.iTunes:replaygain_track_minmax': 'replaygain_track_minmax',\n    '----:com.apple.iTunes:replaygain_album_minmax': 'replaygain_album_minmax',\n    '----:com.apple.iTunes:replaygain_undo': 'replaygain_undo',\n    // Additional mappings:\n    gnre: 'genre',\n    '----:com.apple.iTunes:ALBUMARTISTSORT': 'albumartistsort',\n    '----:com.apple.iTunes:ARTISTS': 'artists',\n    '----:com.apple.iTunes:ORIGINALDATE': 'originaldate',\n    '----:com.apple.iTunes:ORIGINALYEAR': 'originalyear',\n    // '----:com.apple.iTunes:PERFORMER': 'performer'\n    desc: 'description',\n    ldes: 'longDescription',\n    '©mvn': 'movement',\n    '©mvi': 'movementIndex',\n    '©mvc': 'movementTotal',\n    '©wrk': 'work',\n    catg: 'category',\n    egid: 'podcastId',\n    hdvd: 'hdVideo',\n    keyw: 'keywords',\n    shwm: 'showMovement',\n    stik: 'stik',\n    rate: 'rating'\n};\nexports.tagType = 'iTunes';\nclass MP4TagMapper extends CaseInsensitiveTagMap_1.CaseInsensitiveTagMap {\n    constructor() {\n        super([exports.tagType], mp4TagMap);\n    }\n    postMap(tag, warnings) {\n        switch (tag.id) {\n            case 'rate':\n                tag.value = {\n                    source: undefined,\n                    rating: parseFloat(tag.value) / 100\n                };\n                break;\n        }\n    }\n}\nexports.MP4TagMapper = MP4TagMapper;\n//# sourceMappingURL=MP4TagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mp4/MP4TagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Extended Lame Header\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExtendedLameHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst common = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst ReplayGainDataFormat_1 = __webpack_require__(/*! ./ReplayGainDataFormat */ \"(ssr)/./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\");\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nexports.ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: common.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: common.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? undefined : track_peak / Math.pow(2, 23),\n            track_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 6),\n            album_gain: ReplayGainDataFormat_1.ReplayGain.get(buf, 8),\n            music_length: Token.UINT32_BE.get(buf, off + 20),\n            music_crc: Token.UINT8.get(buf, off + 24),\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvRXh0ZW5kZWRMYW1lSGVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDhFQUFnQjtBQUN2QywrQkFBK0IsbUJBQU8sQ0FBQyxvR0FBd0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL0V4dGVuZGVkTGFtZUhlYWRlci5qcz83NDVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBFeHRlbmRlZCBMYW1lIEhlYWRlclxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4dGVuZGVkTGFtZUhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4uL2NvbW1vbi9VdGlsXCIpO1xuY29uc3QgUmVwbGF5R2FpbkRhdGFGb3JtYXRfMSA9IHJlcXVpcmUoXCIuL1JlcGxheUdhaW5EYXRhRm9ybWF0XCIpO1xuLyoqXG4gKiBJbmZvIFRhZ1xuICogQGxpbmsgaHR0cDovL2dhYnJpZWwubXAzLXRlY2gub3JnL21wM2luZm90YWcuaHRtbFxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3F1b2RsaWJldC9tdXRhZ2VuL2Jsb2IvYWJkNThlZTU4NzcyMjI0MzM0YTE4ODE3YzNmYjMxMTAzNTcyZjcwZS9tdXRhZ2VuL21wMy9fdXRpbC5weSNMMTEyXG4gKi9cbmV4cG9ydHMuRXh0ZW5kZWRMYW1lSGVhZGVyID0ge1xuICAgIGxlbjogMjcsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgY29uc3QgdHJhY2tfcGVhayA9IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJldmlzaW9uOiBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDAsIDQpLFxuICAgICAgICAgICAgdmJyX21ldGhvZDogY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCA0LCA0KSxcbiAgICAgICAgICAgIGxvd3Bhc3NfZmlsdGVyOiAxMDAgKiBUb2tlbi5VSU5UOC5nZXQoYnVmLCBvZmYgKyAxKSxcbiAgICAgICAgICAgIHRyYWNrX3BlYWs6IHRyYWNrX3BlYWsgPT09IDAgPyB1bmRlZmluZWQgOiB0cmFja19wZWFrIC8gTWF0aC5wb3coMiwgMjMpLFxuICAgICAgICAgICAgdHJhY2tfZ2FpbjogUmVwbGF5R2FpbkRhdGFGb3JtYXRfMS5SZXBsYXlHYWluLmdldChidWYsIDYpLFxuICAgICAgICAgICAgYWxidW1fZ2FpbjogUmVwbGF5R2FpbkRhdGFGb3JtYXRfMS5SZXBsYXlHYWluLmdldChidWYsIDgpLFxuICAgICAgICAgICAgbXVzaWNfbGVuZ3RoOiBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgMjApLFxuICAgICAgICAgICAgbXVzaWNfY3JjOiBUb2tlbi5VSU5UOC5nZXQoYnVmLCBvZmYgKyAyNCksXG4gICAgICAgICAgICBoZWFkZXJfY3JjOiBUb2tlbi5VSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmICsgMjQpXG4gICAgICAgIH07XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mpeg/MpegParser.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/MpegParser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MpegParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst common = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst XingTag_1 = __webpack_require__(/*! ./XingTag */ \"(ssr)/./node_modules/music-metadata/lib/mpeg/XingTag.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:mpeg');\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC',\n        'AAC SSR',\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, undefined, undefined, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return numFrames * this.calcSamplesPerFrame() / this.samplingRate;\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            else if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            else if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = common.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = common.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new Error('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new Error('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(`layer=0 => ADTS`);\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = 'ADTS/MPEG-' + this.version;\n        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig.join('+')}`);\n        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return;\n        }\n        const codecIndex = `${Math.floor(this.version)}${this.layer}`;\n        return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    0x01: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    0x02: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    0x03: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    0x04: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    0x05: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    0x06: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    0x07: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    0x08: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    0x09: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    0x0A: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    0x0B: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    0x0C: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    0x0D: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    0x0E: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0x00: 44100, 0x01: 48000, 0x02: 32000 },\n    2: { 0x00: 22050, 0x01: 24000, 0x02: 16000 },\n    2.5: { 0x00: 11025, 0x01: 12000, 0x02: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152],\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return 'V' + Math.floor((100 - vbrScale) / 10);\n}\nclass MpegParser extends AbstractID3Parser_1.AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.calculateEofDuration = false;\n        this.buf_frame_header = Buffer.alloc(4);\n        this.syncPeek = {\n            buf: Buffer.alloc(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                debug(`End-of-stream`);\n                if (this.calculateEofDuration) {\n                    const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    const duration = numberOfSamples / this.metadata.format.sampleRate;\n                    debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = this.metadata.native.hasOwnProperty('ID3v1');\n        if (format.duration && this.tokenizer.fileInfo.size) {\n            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n            if (format.codecProfile && format.codecProfile[0] === 'V') {\n                this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n            }\n        }\n        else if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n            const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n            const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n            this.metadata.setFormat('numberOfSamples', numberOfSamples);\n            const duration = numberOfSamples / format.sampleRate;\n            debug(\"Calculate CBR duration based on file size: %s\", duration);\n            this.metadata.setFormat('duration', duration);\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new core_1.EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                else {\n                    gotFirstSync = false;\n                    bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                    if (bo === -1) {\n                        if (this.syncPeek.len < this.syncPeek.buf.length) {\n                            throw new core_1.EndOfStreamError();\n                        }\n                        await this.tokenizer.ignore(this.syncPeek.len);\n                        break; // continue with next buffer\n                    }\n                    else {\n                        ++bo;\n                        gotFirstSync = true;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header, { offset: 1, length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            this.metadata.addWarning('Parse error: ' + err.message);\n            return false; // sync\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new Error('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        const fsize = (bps * header.bitrate / header.samplingRate) +\n            ((header.padding) ? slot_size : 0);\n        this.frame_size = Math.floor(fsize);\n        this.audioFrameHeader = header;\n        this.bitrates.push(header.bitrate);\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 3) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        else {\n            await this.skipSideInformation();\n            return false;\n        }\n    }\n    async parseAdts(header) {\n        const buf = Buffer.alloc(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        const framesPerSec = header.samplingRate / this.samplesPerFrame;\n        const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n        const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n        this.metadata.setFormat('bitrate', bitrate);\n        debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n        // side information\n        await this.tokenizer.readToken(new Token.Uint8ArrayType(sideinfo_length));\n        this.offset += sideinfo_length;\n        await this.readXtraInfoHeader();\n        return;\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(XingTag_1.InfoTagHeaderTag);\n        this.offset += XingTag_1.InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing':\n                const infoTag = await this.readXingInfoHeader();\n                const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                this.metadata.setFormat('codecProfile', codecProfile);\n                return null;\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME':\n                const version = await this.tokenizer.readToken(XingTag_1.LameEncoderVersion);\n                if (this.frame_size >= this.offset + XingTag_1.LameEncoderVersion.len) {\n                    this.offset += XingTag_1.LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', 'LAME ' + version);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                else {\n                    this.metadata.addWarning('Corrupt LAME header');\n                    break;\n                }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning('Frame ' + this.frameCount + 'corrupt: negative frameDataLeft');\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await (0, XingTag_1.readXingHeader)(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', 'LAME ' + common.stripNulls(infoTag.lame.version));\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new Error('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\nexports.MpegParser = MpegParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mpeg/MpegParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReplayGain = void 0;\nconst common = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nvar NameCode;\n(function (NameCode) {\n    /**\n     * not set\n     */\n    NameCode[NameCode[\"not_set\"] = 0] = \"not_set\";\n    /**\n     * Radio Gain Adjustment\n     */\n    NameCode[NameCode[\"radio\"] = 1] = \"radio\";\n    /**\n     * Audiophile Gain Adjustment\n     */\n    NameCode[NameCode[\"audiophile\"] = 2] = \"audiophile\";\n})(NameCode || (NameCode = {}));\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nvar ReplayGainOriginator;\n(function (ReplayGainOriginator) {\n    /**\n     * Replay Gain unspecified\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"unspecified\"] = 0] = \"unspecified\";\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"engineer\"] = 1] = \"engineer\";\n    /**\n     * Replay Gain set by user\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"user\"] = 2] = \"user\";\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"automatic\"] = 3] = \"automatic\";\n    /**\n     * Set by simple RMS average\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"rms_average\"] = 4] = \"rms_average\";\n})(ReplayGainOriginator || (ReplayGainOriginator = {}));\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nexports.ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = common.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = common.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = common.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: common.getBitAllignedNumber(buf, off, 0, 3),\n                origin: common.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvUmVwbGF5R2FpbkRhdGFGb3JtYXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGVBQWUsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXBlZy9SZXBsYXlHYWluRGF0YUZvcm1hdC5qcz8xN2NmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXBsYXlHYWluID0gdm9pZCAwO1xuY29uc3QgY29tbW9uID0gcmVxdWlyZShcIi4uL2NvbW1vbi9VdGlsXCIpO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vQm9yZXdpdC9tdXNpYy1tZXRhZGF0YS93aWtpL1JlcGxheS1HYWluLURhdGEtRm9ybWF0I25hbWUtY29kZVxuICovXG52YXIgTmFtZUNvZGU7XG4oZnVuY3Rpb24gKE5hbWVDb2RlKSB7XG4gICAgLyoqXG4gICAgICogbm90IHNldFxuICAgICAqL1xuICAgIE5hbWVDb2RlW05hbWVDb2RlW1wibm90X3NldFwiXSA9IDBdID0gXCJub3Rfc2V0XCI7XG4gICAgLyoqXG4gICAgICogUmFkaW8gR2FpbiBBZGp1c3RtZW50XG4gICAgICovXG4gICAgTmFtZUNvZGVbTmFtZUNvZGVbXCJyYWRpb1wiXSA9IDFdID0gXCJyYWRpb1wiO1xuICAgIC8qKlxuICAgICAqIEF1ZGlvcGhpbGUgR2FpbiBBZGp1c3RtZW50XG4gICAgICovXG4gICAgTmFtZUNvZGVbTmFtZUNvZGVbXCJhdWRpb3BoaWxlXCJdID0gMl0gPSBcImF1ZGlvcGhpbGVcIjtcbn0pKE5hbWVDb2RlIHx8IChOYW1lQ29kZSA9IHt9KSk7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L211c2ljLW1ldGFkYXRhL3dpa2kvUmVwbGF5LUdhaW4tRGF0YS1Gb3JtYXQjb3JpZ2luYXRvci1jb2RlXG4gKi9cbnZhciBSZXBsYXlHYWluT3JpZ2luYXRvcjtcbihmdW5jdGlvbiAoUmVwbGF5R2Fpbk9yaWdpbmF0b3IpIHtcbiAgICAvKipcbiAgICAgKiBSZXBsYXkgR2FpbiB1bnNwZWNpZmllZFxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1widW5zcGVjaWZpZWRcIl0gPSAwXSA9IFwidW5zcGVjaWZpZWRcIjtcbiAgICAvKipcbiAgICAgKiBSZXBsYXkgR2FpbiBwcmUtc2V0IGJ5IGFydGlzdC9wcm9kdWNlci9tYXN0ZXJpbmcgZW5naW5lZXJcbiAgICAgKi9cbiAgICBSZXBsYXlHYWluT3JpZ2luYXRvcltSZXBsYXlHYWluT3JpZ2luYXRvcltcImVuZ2luZWVyXCJdID0gMV0gPSBcImVuZ2luZWVyXCI7XG4gICAgLyoqXG4gICAgICogUmVwbGF5IEdhaW4gc2V0IGJ5IHVzZXJcbiAgICAgKi9cbiAgICBSZXBsYXlHYWluT3JpZ2luYXRvcltSZXBsYXlHYWluT3JpZ2luYXRvcltcInVzZXJcIl0gPSAyXSA9IFwidXNlclwiO1xuICAgIC8qKlxuICAgICAqIFJlcGxheSBHYWluIGRldGVybWluZWQgYXV0b21hdGljYWxseSwgYXMgZGVzY3JpYmVkIG9uIHRoaXMgc2l0ZVxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1wiYXV0b21hdGljXCJdID0gM10gPSBcImF1dG9tYXRpY1wiO1xuICAgIC8qKlxuICAgICAqIFNldCBieSBzaW1wbGUgUk1TIGF2ZXJhZ2VcbiAgICAgKi9cbiAgICBSZXBsYXlHYWluT3JpZ2luYXRvcltSZXBsYXlHYWluT3JpZ2luYXRvcltcInJtc19hdmVyYWdlXCJdID0gNF0gPSBcInJtc19hdmVyYWdlXCI7XG59KShSZXBsYXlHYWluT3JpZ2luYXRvciB8fCAoUmVwbGF5R2Fpbk9yaWdpbmF0b3IgPSB7fSkpO1xuLyoqXG4gKiBSZXBsYXkgR2FpbiBEYXRhIEZvcm1hdFxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L211c2ljLW1ldGFkYXRhL3dpa2kvUmVwbGF5LUdhaW4tRGF0YS1Gb3JtYXRcbiAqL1xuZXhwb3J0cy5SZXBsYXlHYWluID0ge1xuICAgIGxlbjogMixcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICBjb25zdCBnYWluX3R5cGUgPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDAsIDMpO1xuICAgICAgICBjb25zdCBzaWduID0gY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCA2LCAxKTtcbiAgICAgICAgY29uc3QgZ2Fpbl9hZGogPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDcsIDkpIC8gMTAuMDtcbiAgICAgICAgaWYgKGdhaW5fdHlwZSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCAwLCAzKSxcbiAgICAgICAgICAgICAgICBvcmlnaW46IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgMywgMyksXG4gICAgICAgICAgICAgICAgYWRqdXN0bWVudDogKHNpZ24gPyAtZ2Fpbl9hZGogOiBnYWluX2FkailcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/mpeg/XingTag.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/mpeg/XingTag.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readXingHeader = exports.XingHeaderFlags = exports.LameEncoderVersion = exports.InfoTagHeaderTag = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst ExtendedLameHeader_1 = __webpack_require__(/*! ./ExtendedLameHeader */ \"(ssr)/./node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\");\n/**\n * Info Tag: Xing, LAME\n */\nexports.InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nexports.LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nexports.XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: util.isBitSet(buf, off, 31),\n            bytes: util.isBitSet(buf, off, 30),\n            toc: util.isBitSet(buf, off, 29),\n            vbrScale: util.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nasync function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(exports.XingHeaderFlags);\n    const xingInfoTag = {};\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = Buffer.alloc(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match) {\n            const majorMinorVersion = xingInfoTag.lame.version.match(/\\d+.\\d+/g)[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader_1.ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\nexports.readXingHeader = readXingHeader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvWGluZ1RhZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyx1QkFBdUIsR0FBRywwQkFBMEIsR0FBRyx3QkFBd0I7QUFDeEcsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDckMsNkJBQTZCLG1CQUFPLENBQUMsZ0dBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL1hpbmdUYWcuanM/NzIyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVhZFhpbmdIZWFkZXIgPSBleHBvcnRzLlhpbmdIZWFkZXJGbGFncyA9IGV4cG9ydHMuTGFtZUVuY29kZXJWZXJzaW9uID0gZXhwb3J0cy5JbmZvVGFnSGVhZGVyVGFnID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4uL2NvbW1vbi9VdGlsXCIpO1xuY29uc3QgRXh0ZW5kZWRMYW1lSGVhZGVyXzEgPSByZXF1aXJlKFwiLi9FeHRlbmRlZExhbWVIZWFkZXJcIik7XG4vKipcbiAqIEluZm8gVGFnOiBYaW5nLCBMQU1FXG4gKi9cbmV4cG9ydHMuSW5mb1RhZ0hlYWRlclRhZyA9IG5ldyBUb2tlbi5TdHJpbmdUeXBlKDQsICdhc2NpaScpO1xuLyoqXG4gKiBMQU1FIFRBRyB2YWx1ZVxuICogRGlkIG5vdCBmaW5kIGFueSBvZmZpY2lhbCBkb2N1bWVudGF0aW9uIGZvciB0aGlzXG4gKiBWYWx1ZSBlLmcuOiBcIjMuOTguNFwiXG4gKi9cbmV4cG9ydHMuTGFtZUVuY29kZXJWZXJzaW9uID0gbmV3IFRva2VuLlN0cmluZ1R5cGUoNiwgJ2FzY2lpJyk7XG4vKipcbiAqIEluZm8gVGFnXG4gKiBSZWY6IGh0dHA6Ly9nYWJyaWVsLm1wMy10ZWNoLm9yZy9tcDNpbmZvdGFnLmh0bWxcbiAqL1xuZXhwb3J0cy5YaW5nSGVhZGVyRmxhZ3MgPSB7XG4gICAgbGVuOiA0LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmcmFtZXM6IHV0aWwuaXNCaXRTZXQoYnVmLCBvZmYsIDMxKSxcbiAgICAgICAgICAgIGJ5dGVzOiB1dGlsLmlzQml0U2V0KGJ1Ziwgb2ZmLCAzMCksXG4gICAgICAgICAgICB0b2M6IHV0aWwuaXNCaXRTZXQoYnVmLCBvZmYsIDI5KSxcbiAgICAgICAgICAgIHZiclNjYWxlOiB1dGlsLmlzQml0U2V0KGJ1Ziwgb2ZmLCAyOClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gLyoqXG4vLyAgKiBYSU5HIEhlYWRlciBUYWdcbi8vICAqIFJlZjogaHR0cDovL2dhYnJpZWwubXAzLXRlY2gub3JnL21wM2luZm90YWcuaHRtbFxuLy8gICovXG5hc3luYyBmdW5jdGlvbiByZWFkWGluZ0hlYWRlcih0b2tlbml6ZXIpIHtcbiAgICBjb25zdCBmbGFncyA9IGF3YWl0IHRva2VuaXplci5yZWFkVG9rZW4oZXhwb3J0cy5YaW5nSGVhZGVyRmxhZ3MpO1xuICAgIGNvbnN0IHhpbmdJbmZvVGFnID0ge307XG4gICAgaWYgKGZsYWdzLmZyYW1lcykge1xuICAgICAgICB4aW5nSW5mb1RhZy5udW1GcmFtZXMgPSBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKFRva2VuLlVJTlQzMl9CRSk7XG4gICAgfVxuICAgIGlmIChmbGFncy5ieXRlcykge1xuICAgICAgICB4aW5nSW5mb1RhZy5zdHJlYW1TaXplID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihUb2tlbi5VSU5UMzJfQkUpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MudG9jKSB7XG4gICAgICAgIHhpbmdJbmZvVGFnLnRvYyA9IEJ1ZmZlci5hbGxvYygxMDApO1xuICAgICAgICBhd2FpdCB0b2tlbml6ZXIucmVhZEJ1ZmZlcih4aW5nSW5mb1RhZy50b2MpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MudmJyU2NhbGUpIHtcbiAgICAgICAgeGluZ0luZm9UYWcudmJyU2NhbGUgPSBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKFRva2VuLlVJTlQzMl9CRSk7XG4gICAgfVxuICAgIGNvbnN0IGxhbWVUYWcgPSBhd2FpdCB0b2tlbml6ZXIucGVla1Rva2VuKG5ldyBUb2tlbi5TdHJpbmdUeXBlKDQsICdhc2NpaScpKTtcbiAgICBpZiAobGFtZVRhZyA9PT0gJ0xBTUUnKSB7XG4gICAgICAgIGF3YWl0IHRva2VuaXplci5pZ25vcmUoNCk7XG4gICAgICAgIHhpbmdJbmZvVGFnLmxhbWUgPSB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKG5ldyBUb2tlbi5TdHJpbmdUeXBlKDUsICdhc2NpaScpKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYXRjaCA9IHhpbmdJbmZvVGFnLmxhbWUudmVyc2lvbi5tYXRjaCgvXFxkKy5cXGQrL2cpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ham9yTWlub3JWZXJzaW9uID0geGluZ0luZm9UYWcubGFtZS52ZXJzaW9uLm1hdGNoKC9cXGQrLlxcZCsvZylbMF07IC8vIGUuZy4gMy45N1xuICAgICAgICAgICAgY29uc3QgdmVyc2lvbiA9IG1ham9yTWlub3JWZXJzaW9uLnNwbGl0KCcuJykubWFwKG4gPT4gcGFyc2VJbnQobiwgMTApKTtcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uWzBdID49IDMgJiYgdmVyc2lvblsxXSA+PSA5MCkge1xuICAgICAgICAgICAgICAgIHhpbmdJbmZvVGFnLmxhbWUuZXh0ZW5kZWQgPSBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKEV4dGVuZGVkTGFtZUhlYWRlcl8xLkV4dGVuZGVkTGFtZUhlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHhpbmdJbmZvVGFnO1xufVxuZXhwb3J0cy5yZWFkWGluZ0hlYWRlciA9IHJlYWRYaW5nSGVhZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/mpeg/XingTag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/musepack/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst AbstractID3Parser_1 = __webpack_require__(/*! ../id3v2/AbstractID3Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\nconst MpcSv8Parser_1 = __webpack_require__(/*! ./sv8/MpcSv8Parser */ \"(ssr)/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js\");\nconst MpcSv7Parser_1 = __webpack_require__(/*! ./sv7/MpcSv7Parser */ \"(ssr)/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MusepackParser extends AbstractID3Parser_1.AbstractID3Parser {\n    async postId3v2Parse() {\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'binary'));\n        let mpcParser;\n        switch (signature) {\n            case 'MP+': {\n                debug('Musepack stream-version 7');\n                mpcParser = new MpcSv7Parser_1.MpcSv7Parser();\n                break;\n            }\n            case 'MPC': {\n                debug('Musepack stream-version 8');\n                mpcParser = new MpcSv8Parser_1.MpcSv8Parser();\n                break;\n            }\n            default: {\n                throw new Error('Invalid Musepack signature prefix');\n            }\n        }\n        mpcParser.init(this.metadata, this.tokenizer, this.options);\n        return mpcParser.parse();\n    }\n}\nexports[\"default\"] = MusepackParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxrRUFBYTtBQUNuQyw0QkFBNEIsbUJBQU8sQ0FBQyxzR0FBNEI7QUFDaEUsdUJBQXVCLG1CQUFPLENBQUMsZ0dBQW9CO0FBQ25ELHVCQUF1QixtQkFBTyxDQUFDLGdHQUFvQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tdXNlcGFjay9pbmRleC5qcz9hYjk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgQWJzdHJhY3RJRDNQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9pZDN2Mi9BYnN0cmFjdElEM1BhcnNlclwiKTtcbmNvbnN0IE1wY1N2OFBhcnNlcl8xID0gcmVxdWlyZShcIi4vc3Y4L01wY1N2OFBhcnNlclwiKTtcbmNvbnN0IE1wY1N2N1BhcnNlcl8xID0gcmVxdWlyZShcIi4vc3Y3L01wY1N2N1BhcnNlclwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjptdXNlcGFjaycpO1xuY2xhc3MgTXVzZXBhY2tQYXJzZXIgZXh0ZW5kcyBBYnN0cmFjdElEM1BhcnNlcl8xLkFic3RyYWN0SUQzUGFyc2VyIHtcbiAgICBhc3luYyBwb3N0SWQzdjJQYXJzZSgpIHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucGVla1Rva2VuKG5ldyBUb2tlbi5TdHJpbmdUeXBlKDMsICdiaW5hcnknKSk7XG4gICAgICAgIGxldCBtcGNQYXJzZXI7XG4gICAgICAgIHN3aXRjaCAoc2lnbmF0dXJlKSB7XG4gICAgICAgICAgICBjYXNlICdNUCsnOiB7XG4gICAgICAgICAgICAgICAgZGVidWcoJ011c2VwYWNrIHN0cmVhbS12ZXJzaW9uIDcnKTtcbiAgICAgICAgICAgICAgICBtcGNQYXJzZXIgPSBuZXcgTXBjU3Y3UGFyc2VyXzEuTXBjU3Y3UGFyc2VyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdNUEMnOiB7XG4gICAgICAgICAgICAgICAgZGVidWcoJ011c2VwYWNrIHN0cmVhbS12ZXJzaW9uIDgnKTtcbiAgICAgICAgICAgICAgICBtcGNQYXJzZXIgPSBuZXcgTXBjU3Y4UGFyc2VyXzEuTXBjU3Y4UGFyc2VyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIE11c2VwYWNrIHNpZ25hdHVyZSBwcmVmaXgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtcGNQYXJzZXIuaW5pdCh0aGlzLm1ldGFkYXRhLCB0aGlzLnRva2VuaXplciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG1wY1BhcnNlci5wYXJzZSgpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE11c2VwYWNrUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/musepack/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/BitReader.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BitReader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nclass BitReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n        this.pos = 0;\n        this.dword = undefined;\n    }\n    /**\n     *\n     * @param bits 1..30 bits\n     */\n    async read(bits) {\n        while (this.dword === undefined) {\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n        }\n        let out = this.dword;\n        this.pos += bits;\n        if (this.pos < 32) {\n            out >>>= (32 - this.pos);\n            return out & ((1 << bits) - 1);\n        }\n        else {\n            this.pos -= 32;\n            if (this.pos === 0) {\n                this.dword = undefined;\n                return out & ((1 << bits) - 1);\n            }\n            else {\n                this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\n                if (this.pos) {\n                    out <<= this.pos;\n                    out |= this.dword >>> (32 - this.pos);\n                }\n                return out & ((1 << bits) - 1);\n            }\n        }\n    }\n    async ignore(bits) {\n        if (this.pos > 0) {\n            const remaining = 32 - this.pos;\n            this.dword = undefined;\n            bits -= remaining;\n            this.pos = 0;\n        }\n        const remainder = bits % 32;\n        const numOfWords = (bits - remainder) / 32;\n        await this.tokenizer.ignore(numOfWords * 4);\n        return this.read(remainder);\n    }\n}\nexports.BitReader = BitReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9CaXRSZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGNBQWMsbUJBQU8sQ0FBQyxrRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tdXNlcGFjay9zdjcvQml0UmVhZGVyLmpzP2NhOTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJpdFJlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY2xhc3MgQml0UmVhZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbml6ZXIpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgdGhpcy5kd29yZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYml0cyAxLi4zMCBiaXRzXG4gICAgICovXG4gICAgYXN5bmMgcmVhZChiaXRzKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLmR3b3JkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZHdvcmQgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oVG9rZW4uVUlOVDMyX0xFKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3V0ID0gdGhpcy5kd29yZDtcbiAgICAgICAgdGhpcy5wb3MgKz0gYml0cztcbiAgICAgICAgaWYgKHRoaXMucG9zIDwgMzIpIHtcbiAgICAgICAgICAgIG91dCA+Pj49ICgzMiAtIHRoaXMucG9zKTtcbiAgICAgICAgICAgIHJldHVybiBvdXQgJiAoKDEgPDwgYml0cykgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9zIC09IDMyO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kd29yZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0ICYgKCgxIDw8IGJpdHMpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmR3b3JkID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKFRva2VuLlVJTlQzMl9MRSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCA8PD0gdGhpcy5wb3M7XG4gICAgICAgICAgICAgICAgICAgIG91dCB8PSB0aGlzLmR3b3JkID4+PiAoMzIgLSB0aGlzLnBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXQgJiAoKDEgPDwgYml0cykgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBpZ25vcmUoYml0cykge1xuICAgICAgICBpZiAodGhpcy5wb3MgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByZW1haW5pbmcgPSAzMiAtIHRoaXMucG9zO1xuICAgICAgICAgICAgdGhpcy5kd29yZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGJpdHMgLT0gcmVtYWluaW5nO1xuICAgICAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlbWFpbmRlciA9IGJpdHMgJSAzMjtcbiAgICAgICAgY29uc3QgbnVtT2ZXb3JkcyA9IChiaXRzIC0gcmVtYWluZGVyKSAvIDMyO1xuICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUobnVtT2ZXb3JkcyAqIDQpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkKHJlbWFpbmRlcik7XG4gICAgfVxufVxuZXhwb3J0cy5CaXRSZWFkZXIgPSBCaXRSZWFkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MpcSv7Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../../apev2/APEv2Parser */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst BitReader_1 = __webpack_require__(/*! ./BitReader */ \"(ssr)/./node_modules/music-metadata/lib/musepack/sv7/BitReader.js\");\nconst SV7 = __webpack_require__(/*! ./StreamVersion7 */ \"(ssr)/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MpcSv7Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const header = await this.tokenizer.readToken(SV7.Header);\n        if (header.signature !== 'MP+')\n            throw new Error('Unexpected magic number');\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\n        this.metadata.setFormat('container', 'Musepack, SV7');\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n        this.duration = numberOfSamples / header.sampleFrequency;\n        this.metadata.setFormat('duration', this.duration);\n        this.bitreader = new BitReader_1.BitReader(this.tokenizer);\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\n        const version = await this.bitreader.read(8);\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\n        await this.skipAudioData(header.frameCount);\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async skipAudioData(frameCount) {\n        while (frameCount-- > 0) {\n            const frameLength = await this.bitreader.read(20);\n            this.audioLength += 20 + frameLength;\n            await this.bitreader.ignore(frameLength);\n        }\n        // last frame\n        const lastFrameLength = await this.bitreader.read(11);\n        this.audioLength += lastFrameLength;\n        this.metadata.setFormat('bitrate', this.audioLength / this.duration);\n    }\n}\nexports.MpcSv7Parser = MpcSv7Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9NcGNTdjdQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLHNCQUFzQixtQkFBTyxDQUFDLCtGQUEwQjtBQUN4RCxzQkFBc0IsbUJBQU8sQ0FBQyw2RkFBeUI7QUFDdkQsb0JBQW9CLG1CQUFPLENBQUMsc0ZBQWE7QUFDekMsWUFBWSxtQkFBTyxDQUFDLGdHQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEIsR0FBRywwQkFBMEI7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSx3QkFBd0I7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tdXNlcGFjay9zdjcvTXBjU3Y3UGFyc2VyLmpzPzYwNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1wY1N2N1BhcnNlciA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSByZXF1aXJlKFwiZGVidWdcIik7XG5jb25zdCBCYXNpY1BhcnNlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9CYXNpY1BhcnNlclwiKTtcbmNvbnN0IEFQRXYyUGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vYXBldjIvQVBFdjJQYXJzZXJcIik7XG5jb25zdCBCaXRSZWFkZXJfMSA9IHJlcXVpcmUoXCIuL0JpdFJlYWRlclwiKTtcbmNvbnN0IFNWNyA9IHJlcXVpcmUoXCIuL1N0cmVhbVZlcnNpb243XCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOm11c2VwYWNrJyk7XG5jbGFzcyBNcGNTdjdQYXJzZXIgZXh0ZW5kcyBCYXNpY1BhcnNlcl8xLkJhc2ljUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5hdWRpb0xlbmd0aCA9IDA7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlKCkge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oU1Y3LkhlYWRlcik7XG4gICAgICAgIGlmIChoZWFkZXIuc2lnbmF0dXJlICE9PSAnTVArJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBtYWdpYyBudW1iZXInKTtcbiAgICAgICAgZGVidWcoYHN0cmVhbS12ZXJzaW9uPSR7aGVhZGVyLnN0cmVhbU1ham9yVmVyc2lvbn0uJHtoZWFkZXIuc3RyZWFtTWlub3JWZXJzaW9ufWApO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29udGFpbmVyJywgJ011c2VwYWNrLCBTVjcnKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3NhbXBsZVJhdGUnLCBoZWFkZXIuc2FtcGxlRnJlcXVlbmN5KTtcbiAgICAgICAgY29uc3QgbnVtYmVyT2ZTYW1wbGVzID0gMTE1MiAqIChoZWFkZXIuZnJhbWVDb3VudCAtIDEpICsgaGVhZGVyLmxhc3RGcmFtZUxlbmd0aDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mU2FtcGxlcycsIG51bWJlck9mU2FtcGxlcyk7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBudW1iZXJPZlNhbXBsZXMgLyBoZWFkZXIuc2FtcGxlRnJlcXVlbmN5O1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCB0aGlzLmR1cmF0aW9uKTtcbiAgICAgICAgdGhpcy5iaXRyZWFkZXIgPSBuZXcgQml0UmVhZGVyXzEuQml0UmVhZGVyKHRoaXMudG9rZW5pemVyKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mQ2hhbm5lbHMnLCBoZWFkZXIubWlkU2lkZVN0ZXJlbyB8fCBoZWFkZXIuaW50ZW5zaXR5U3RlcmVvID8gMiA6IDEpO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gYXdhaXQgdGhpcy5iaXRyZWFkZXIucmVhZCg4KTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvZGVjJywgKHZlcnNpb24gLyAxMDApLnRvRml4ZWQoMikpO1xuICAgICAgICBhd2FpdCB0aGlzLnNraXBBdWRpb0RhdGEoaGVhZGVyLmZyYW1lQ291bnQpO1xuICAgICAgICBkZWJ1ZyhgRW5kIG9mIGF1ZGlvIHN0cmVhbSwgc3dpdGNoaW5nIHRvIEFQRXYyLCBvZmZzZXQ9JHt0aGlzLnRva2VuaXplci5wb3NpdGlvbn1gKTtcbiAgICAgICAgcmV0dXJuIEFQRXYyUGFyc2VyXzEuQVBFdjJQYXJzZXIudHJ5UGFyc2VBcGVIZWFkZXIodGhpcy5tZXRhZGF0YSwgdGhpcy50b2tlbml6ZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIHNraXBBdWRpb0RhdGEoZnJhbWVDb3VudCkge1xuICAgICAgICB3aGlsZSAoZnJhbWVDb3VudC0tID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZnJhbWVMZW5ndGggPSBhd2FpdCB0aGlzLmJpdHJlYWRlci5yZWFkKDIwKTtcbiAgICAgICAgICAgIHRoaXMuYXVkaW9MZW5ndGggKz0gMjAgKyBmcmFtZUxlbmd0aDtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYml0cmVhZGVyLmlnbm9yZShmcmFtZUxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGFzdCBmcmFtZVxuICAgICAgICBjb25zdCBsYXN0RnJhbWVMZW5ndGggPSBhd2FpdCB0aGlzLmJpdHJlYWRlci5yZWFkKDExKTtcbiAgICAgICAgdGhpcy5hdWRpb0xlbmd0aCArPSBsYXN0RnJhbWVMZW5ndGg7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgdGhpcy5hdWRpb0xlbmd0aCAvIHRoaXMuZHVyYXRpb24pO1xuICAgIH1cbn1cbmV4cG9ydHMuTXBjU3Y3UGFyc2VyID0gTXBjU3Y3UGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js":
/*!************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * BASIC STRUCTURE\n */\nexports.Header = {\n    len: 6 * 4,\n    get: (buf, off) => {\n        const header = {\n            // word 0\n            signature: Buffer.from(buf).toString('latin1', off, off + 3),\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\n            // word 1\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\n            // word 2\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\n            // word 3\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\n            // word 4\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\n            // word\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\n            trueGapless: util.isBitSet(buf, off + 23, 0)\n        };\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\n        return header;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2Ny9TdHJlYW1WZXJzaW9uNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxpRkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXVzZXBhY2svc3Y3L1N0cmVhbVZlcnNpb243LmpzPzY2NTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vVXRpbFwiKTtcbi8qKlxuICogQkFTSUMgU1RSVUNUVVJFXG4gKi9cbmV4cG9ydHMuSGVhZGVyID0ge1xuICAgIGxlbjogNiAqIDQsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0ge1xuICAgICAgICAgICAgLy8gd29yZCAwXG4gICAgICAgICAgICBzaWduYXR1cmU6IEJ1ZmZlci5mcm9tKGJ1ZikudG9TdHJpbmcoJ2xhdGluMScsIG9mZiwgb2ZmICsgMyksXG4gICAgICAgICAgICAvLyB2ZXJzaW9uSW5kZXggbnVtYmVyICogMTAwMCAoMy44MSA9IDM4MTApIChyZW1lbWJlciB0aGF0IDQtYnl0ZSBhbGlnbm1lbnQgY2F1c2VzIHRoaXMgdG8gdGFrZSA0LWJ5dGVzKVxuICAgICAgICAgICAgc3RyZWFtTWlub3JWZXJzaW9uOiB1dGlsLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmICsgMywgMCwgNCksXG4gICAgICAgICAgICBzdHJlYW1NYWpvclZlcnNpb246IHV0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAzLCA0LCA0KSxcbiAgICAgICAgICAgIC8vIHdvcmQgMVxuICAgICAgICAgICAgZnJhbWVDb3VudDogVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDQpLFxuICAgICAgICAgICAgLy8gd29yZCAyXG4gICAgICAgICAgICBtYXhMZXZlbDogVG9rZW4uVUlOVDE2X0xFLmdldChidWYsIG9mZiArIDgpLFxuICAgICAgICAgICAgc2FtcGxlRnJlcXVlbmN5OiBbNDQxMDAsIDQ4MDAwLCAzNzgwMCwgMzIwMDBdW3V0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxMCwgMCwgMildLFxuICAgICAgICAgICAgbGluazogdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDEwLCAyLCAyKSxcbiAgICAgICAgICAgIHByb2ZpbGU6IHV0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxMCwgNCwgNCksXG4gICAgICAgICAgICBtYXhCYW5kOiB1dGlsLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmICsgMTEsIDAsIDYpLFxuICAgICAgICAgICAgaW50ZW5zaXR5U3RlcmVvOiB1dGlsLmlzQml0U2V0KGJ1Ziwgb2ZmICsgMTEsIDYpLFxuICAgICAgICAgICAgbWlkU2lkZVN0ZXJlbzogdXRpbC5pc0JpdFNldChidWYsIG9mZiArIDExLCA3KSxcbiAgICAgICAgICAgIC8vIHdvcmQgM1xuICAgICAgICAgICAgdGl0bGVQZWFrOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTIpLFxuICAgICAgICAgICAgdGl0bGVHYWluOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KGJ1Ziwgb2ZmICsgMTQpLFxuICAgICAgICAgICAgLy8gd29yZCA0XG4gICAgICAgICAgICBhbGJ1bVBlYWs6IFRva2VuLlVJTlQxNl9MRS5nZXQoYnVmLCBvZmYgKyAxNiksXG4gICAgICAgICAgICBhbGJ1bUdhaW46IFRva2VuLlVJTlQxNl9MRS5nZXQoYnVmLCBvZmYgKyAxOCksXG4gICAgICAgICAgICAvLyB3b3JkXG4gICAgICAgICAgICBsYXN0RnJhbWVMZW5ndGg6IChUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjApID4+PiAyMCkgJiAweDdGRixcbiAgICAgICAgICAgIHRydWVHYXBsZXNzOiB1dGlsLmlzQml0U2V0KGJ1Ziwgb2ZmICsgMjMsIDApXG4gICAgICAgIH07XG4gICAgICAgIGhlYWRlci5sYXN0RnJhbWVMZW5ndGggPSBoZWFkZXIudHJ1ZUdhcGxlc3MgPyAoVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIDIwKSA+Pj4gMjApICYgMHg3RkYgOiAwO1xuICAgICAgICByZXR1cm4gaGVhZGVyO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MpcSv8Parser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../../apev2/APEv2Parser */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst SV8 = __webpack_require__(/*! ./StreamVersion8 */ \"(ssr)/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack');\nclass MpcSv8Parser extends BasicParser_1.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioLength = 0;\n    }\n    async parse() {\n        const signature = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        if (signature !== 'MPCK')\n            throw new Error('Invalid Magic number');\n        this.metadata.setFormat('container', 'Musepack, SV8');\n        return this.parsePacket();\n    }\n    async parsePacket() {\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\n        do {\n            const header = await sv8reader.readPacketHeader();\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\n            switch (header.key) {\n                case 'SH': // Stream Header\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\n                    break;\n                case 'AP': // Audio Packet\n                    this.audioLength += header.payloadLength;\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'RG': // Replaygain\n                case 'EI': // Encoder Info\n                case 'SO': // Seek Table Offset\n                case 'ST': // Seek Table\n                case 'CT': // Chapter-Tag\n                    await this.tokenizer.ignore(header.payloadLength);\n                    break;\n                case 'SE': // Stream End\n                    this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\n                    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n                default:\n                    throw new Error(`Unexpected header: ${header.key}`);\n            }\n        } while (true);\n    }\n}\nexports.MpcSv8Parser = MpcSv8Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2OC9NcGNTdjhQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLHNCQUFzQixtQkFBTyxDQUFDLCtGQUEwQjtBQUN4RCxzQkFBc0IsbUJBQU8sQ0FBQyw2RkFBeUI7QUFDdkQsaUJBQWlCLG1CQUFPLENBQUMscUZBQXFCO0FBQzlDLFlBQVksbUJBQU8sQ0FBQyxnR0FBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxXQUFXLGtCQUFrQixxQkFBcUI7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxXQUFXO0FBQ3JFO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXVzZXBhY2svc3Y4L01wY1N2OFBhcnNlci5qcz81YWVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NcGNTdjhQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgQmFzaWNQYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vQmFzaWNQYXJzZXJcIik7XG5jb25zdCBBUEV2MlBhcnNlcl8xID0gcmVxdWlyZShcIi4uLy4uL2FwZXYyL0FQRXYyUGFyc2VyXCIpO1xuY29uc3QgRm91ckNDXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL0ZvdXJDQ1wiKTtcbmNvbnN0IFNWOCA9IHJlcXVpcmUoXCIuL1N0cmVhbVZlcnNpb244XCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOm11c2VwYWNrJyk7XG5jbGFzcyBNcGNTdjhQYXJzZXIgZXh0ZW5kcyBCYXNpY1BhcnNlcl8xLkJhc2ljUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5hdWRpb0xlbmd0aCA9IDA7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlKCkge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oRm91ckNDXzEuRm91ckNjVG9rZW4pO1xuICAgICAgICBpZiAoc2lnbmF0dXJlICE9PSAnTVBDSycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTWFnaWMgbnVtYmVyJyk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb250YWluZXInLCAnTXVzZXBhY2ssIFNWOCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVBhY2tldCgpO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZVBhY2tldCgpIHtcbiAgICAgICAgY29uc3Qgc3Y4cmVhZGVyID0gbmV3IFNWOC5TdHJlYW1SZWFkZXIodGhpcy50b2tlbml6ZXIpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBhd2FpdCBzdjhyZWFkZXIucmVhZFBhY2tldEhlYWRlcigpO1xuICAgICAgICAgICAgZGVidWcoYHBhY2tldC1oZWFkZXIga2V5PSR7aGVhZGVyLmtleX0sIHBheWxvYWRMZW5ndGg9JHtoZWFkZXIucGF5bG9hZExlbmd0aH1gKTtcbiAgICAgICAgICAgIHN3aXRjaCAoaGVhZGVyLmtleSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1NIJzogLy8gU3RyZWFtIEhlYWRlclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaCA9IGF3YWl0IHN2OHJlYWRlci5yZWFkU3RyZWFtSGVhZGVyKGhlYWRlci5wYXlsb2FkTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mU2FtcGxlcycsIHNoLnNhbXBsZUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3NhbXBsZVJhdGUnLCBzaC5zYW1wbGVGcmVxdWVuY3kpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBzaC5zYW1wbGVDb3VudCAvIHNoLnNhbXBsZUZyZXF1ZW5jeSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZkNoYW5uZWxzJywgc2guY2hhbm5lbENvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQVAnOiAvLyBBdWRpbyBQYWNrZXRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpb0xlbmd0aCArPSBoZWFkZXIucGF5bG9hZExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlbml6ZXIuaWdub3JlKGhlYWRlci5wYXlsb2FkTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnUkcnOiAvLyBSZXBsYXlnYWluXG4gICAgICAgICAgICAgICAgY2FzZSAnRUknOiAvLyBFbmNvZGVyIEluZm9cbiAgICAgICAgICAgICAgICBjYXNlICdTTyc6IC8vIFNlZWsgVGFibGUgT2Zmc2V0XG4gICAgICAgICAgICAgICAgY2FzZSAnU1QnOiAvLyBTZWVrIFRhYmxlXG4gICAgICAgICAgICAgICAgY2FzZSAnQ1QnOiAvLyBDaGFwdGVyLVRhZ1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoaGVhZGVyLnBheWxvYWRMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdTRSc6IC8vIFN0cmVhbSBFbmRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCB0aGlzLmF1ZGlvTGVuZ3RoICogOCAvIHRoaXMubWV0YWRhdGEuZm9ybWF0LmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFQRXYyUGFyc2VyXzEuQVBFdjJQYXJzZXIudHJ5UGFyc2VBcGVIZWFkZXIodGhpcy5tZXRhZGF0YSwgdGhpcy50b2tlbml6ZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGhlYWRlcjogJHtoZWFkZXIua2V5fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICB9XG59XG5leHBvcnRzLk1wY1N2OFBhcnNlciA9IE1wY1N2OFBhcnNlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js":
/*!************************************************************************!*\
  !*** ./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamReader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst util = __webpack_require__(/*! ../../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:musepack:sv8');\nconst PacketKey = new Token.StringType(2, 'binary');\n/**\n * Stream Header Packet part 1\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part1 = {\n    len: 5,\n    get: (buf, off) => {\n        return {\n            crc: Token.UINT32_LE.get(buf, off),\n            streamVersion: Token.UINT8.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Stream Header Packet part 3\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\n */\nconst SH_part3 = {\n    len: 2,\n    get: (buf, off) => {\n        return {\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\n            msUsed: util.isBitSet(buf, off + 1, 4),\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\n        };\n    }\n};\nclass StreamReader {\n    constructor(tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n    async readPacketHeader() {\n        const key = await this.tokenizer.readToken(PacketKey);\n        const size = await this.readVariableSizeField();\n        return {\n            key,\n            payloadLength: size.value - 2 - size.len\n        };\n    }\n    async readStreamHeader(size) {\n        const streamHeader = {};\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\n        const part1 = await this.tokenizer.readToken(SH_part1);\n        size -= SH_part1.len;\n        Object.assign(streamHeader, part1);\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\n        const sampleCount = await this.readVariableSizeField();\n        size -= sampleCount.len;\n        streamHeader.sampleCount = sampleCount.value;\n        const bs = await this.readVariableSizeField();\n        size -= bs.len;\n        streamHeader.beginningOfSilence = bs.value;\n        const part3 = await this.tokenizer.readToken(SH_part3);\n        size -= SH_part3.len;\n        Object.assign(streamHeader, part3);\n        // assert.equal(size, 0);\n        await this.tokenizer.ignore(size);\n        return streamHeader;\n    }\n    async readVariableSizeField(len = 1, hb = 0) {\n        let n = await this.tokenizer.readNumber(Token.UINT8);\n        if ((n & 0x80) === 0) {\n            return { len, value: hb + n };\n        }\n        n &= 0x7F;\n        n += hb;\n        return this.readVariableSizeField(len + 1, n << 7);\n    }\n}\nexports.StreamReader = StreamReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL211c2VwYWNrL3N2OC9TdHJlYW1WZXJzaW9uOC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLHNEQUFPO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQyxpRkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHdCQUF3QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msb0JBQW9CO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tdXNlcGFjay9zdjgvU3RyZWFtVmVyc2lvbjguanM/NTVlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtUmVhZGVyID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vVXRpbFwiKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjptdXNlcGFjazpzdjgnKTtcbmNvbnN0IFBhY2tldEtleSA9IG5ldyBUb2tlbi5TdHJpbmdUeXBlKDIsICdiaW5hcnknKTtcbi8qKlxuICogU3RyZWFtIEhlYWRlciBQYWNrZXQgcGFydCAxXG4gKiBSZWY6IGh0dHA6Ly90cmFjLm11c2VwYWNrLm5ldC9tdXNlcGFjay93aWtpL1NWOFNwZWNpZmljYXRpb24jU3RyZWFtSGVhZGVyUGFja2V0XG4gKi9cbmNvbnN0IFNIX3BhcnQxID0ge1xuICAgIGxlbjogNSxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JjOiBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIHN0cmVhbVZlcnNpb246IFRva2VuLlVJTlQ4LmdldChidWYsIG9mZiArIDQpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogU3RyZWFtIEhlYWRlciBQYWNrZXQgcGFydCAzXG4gKiBSZWY6IGh0dHA6Ly90cmFjLm11c2VwYWNrLm5ldC9tdXNlcGFjay93aWtpL1NWOFNwZWNpZmljYXRpb24jU3RyZWFtSGVhZGVyUGFja2V0XG4gKi9cbmNvbnN0IFNIX3BhcnQzID0ge1xuICAgIGxlbjogMixcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2FtcGxlRnJlcXVlbmN5OiBbNDQxMDAsIDQ4MDAwLCAzNzgwMCwgMzIwMDBdW3V0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDAsIDMpXSxcbiAgICAgICAgICAgIG1heFVzZWRCYW5kczogdXRpbC5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgMywgNSksXG4gICAgICAgICAgICBjaGFubmVsQ291bnQ6IHV0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxLCAwLCA0KSArIDEsXG4gICAgICAgICAgICBtc1VzZWQ6IHV0aWwuaXNCaXRTZXQoYnVmLCBvZmYgKyAxLCA0KSxcbiAgICAgICAgICAgIGF1ZGlvQmxvY2tGcmFtZXM6IHV0aWwuZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxLCA1LCAzKVxuICAgICAgICB9O1xuICAgIH1cbn07XG5jbGFzcyBTdHJlYW1SZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuaXplcikge1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICB9XG4gICAgYXN5bmMgcmVhZFBhY2tldEhlYWRlcigpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKFBhY2tldEtleSk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBhd2FpdCB0aGlzLnJlYWRWYXJpYWJsZVNpemVGaWVsZCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgcGF5bG9hZExlbmd0aDogc2l6ZS52YWx1ZSAtIDIgLSBzaXplLmxlblxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyByZWFkU3RyZWFtSGVhZGVyKHNpemUpIHtcbiAgICAgICAgY29uc3Qgc3RyZWFtSGVhZGVyID0ge307XG4gICAgICAgIGRlYnVnKGBSZWFkaW5nIFNIIGF0IG9mZnNldD0ke3RoaXMudG9rZW5pemVyLnBvc2l0aW9ufWApO1xuICAgICAgICBjb25zdCBwYXJ0MSA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihTSF9wYXJ0MSk7XG4gICAgICAgIHNpemUgLT0gU0hfcGFydDEubGVuO1xuICAgICAgICBPYmplY3QuYXNzaWduKHN0cmVhbUhlYWRlciwgcGFydDEpO1xuICAgICAgICBkZWJ1ZyhgU0guc3RyZWFtVmVyc2lvbiA9ICR7cGFydDEuc3RyZWFtVmVyc2lvbn1gKTtcbiAgICAgICAgY29uc3Qgc2FtcGxlQ291bnQgPSBhd2FpdCB0aGlzLnJlYWRWYXJpYWJsZVNpemVGaWVsZCgpO1xuICAgICAgICBzaXplIC09IHNhbXBsZUNvdW50LmxlbjtcbiAgICAgICAgc3RyZWFtSGVhZGVyLnNhbXBsZUNvdW50ID0gc2FtcGxlQ291bnQudmFsdWU7XG4gICAgICAgIGNvbnN0IGJzID0gYXdhaXQgdGhpcy5yZWFkVmFyaWFibGVTaXplRmllbGQoKTtcbiAgICAgICAgc2l6ZSAtPSBicy5sZW47XG4gICAgICAgIHN0cmVhbUhlYWRlci5iZWdpbm5pbmdPZlNpbGVuY2UgPSBicy52YWx1ZTtcbiAgICAgICAgY29uc3QgcGFydDMgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oU0hfcGFydDMpO1xuICAgICAgICBzaXplIC09IFNIX3BhcnQzLmxlbjtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzdHJlYW1IZWFkZXIsIHBhcnQzKTtcbiAgICAgICAgLy8gYXNzZXJ0LmVxdWFsKHNpemUsIDApO1xuICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoc2l6ZSk7XG4gICAgICAgIHJldHVybiBzdHJlYW1IZWFkZXI7XG4gICAgfVxuICAgIGFzeW5jIHJlYWRWYXJpYWJsZVNpemVGaWVsZChsZW4gPSAxLCBoYiA9IDApIHtcbiAgICAgICAgbGV0IG4gPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkTnVtYmVyKFRva2VuLlVJTlQ4KTtcbiAgICAgICAgaWYgKChuICYgMHg4MCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IGxlbiwgdmFsdWU6IGhiICsgbiB9O1xuICAgICAgICB9XG4gICAgICAgIG4gJj0gMHg3RjtcbiAgICAgICAgbiArPSBoYjtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFZhcmlhYmxlU2l6ZUZpZWxkKGxlbiArIDEsIG4gPDwgNyk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJlYW1SZWFkZXIgPSBTdHJlYW1SZWFkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/OggParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/OggParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OggParser = exports.SegmentTable = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst core_1 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ./vorbis/VorbisParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst OpusParser_1 = __webpack_require__(/*! ./opus/OpusParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/opus/OpusParser.js\");\nconst SpeexParser_1 = __webpack_require__(/*! ./speex/SpeexParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js\");\nconst TheoraParser_1 = __webpack_require__(/*! ./theora/TheoraParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg');\nclass SegmentTable {\n    static sum(buf, off, len) {\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += buf[i];\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\nexports.SegmentTable = SegmentTable;\n/**\n * Parser for Ogg logical bitstream framing\n */\nclass OggParser extends BasicParser_1.BasicParser {\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        debug('pos=%s, parsePage()', this.tokenizer.position);\n        try {\n            let header;\n            do {\n                header = await this.tokenizer.readToken(OggParser.Header);\n                if (header.capturePattern !== 'OggS')\n                    throw new Error('Invalid Ogg capture pattern');\n                this.metadata.setFormat('container', 'Ogg');\n                this.header = header;\n                this.pageNumber = header.pageSequenceNo;\n                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\n                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\n                debug('totalPageSize=%s', segmentTable.totalPageSize);\n                const pageData = await this.tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n                if (header.headerType.firstPage) {\n                    const id = new Token.StringType(7, 'ascii').get(Buffer.from(pageData), 0);\n                    switch (id) {\n                        case '\\x01vorbis': // Ogg/Vorbis\n                            debug('Set page consumer to Ogg/Vorbis');\n                            this.pageConsumer = new VorbisParser_1.VorbisParser(this.metadata, this.options);\n                            break;\n                        case 'OpusHea': // Ogg/Opus\n                            debug('Set page consumer to Ogg/Opus');\n                            this.pageConsumer = new OpusParser_1.OpusParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'Speex  ': // Ogg/Speex\n                            debug('Set page consumer to Ogg/Speex');\n                            this.pageConsumer = new SpeexParser_1.SpeexParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'fishead':\n                        case '\\x00theora': // Ogg/Theora\n                            debug('Set page consumer to Ogg/Theora');\n                            this.pageConsumer = new TheoraParser_1.TheoraParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        default:\n                            throw new Error('gg audio-codec not recognized (id=' + id + ')');\n                    }\n                }\n                this.pageConsumer.parsePage(header, pageData);\n            } while (!header.headerType.lastPage);\n        }\n        catch (err) {\n            if (err instanceof core_1.EndOfStreamError) {\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                debug(`End-of-stream`);\n                this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                if (this.header) {\n                    this.pageConsumer.calculateDuration(this.header);\n                }\n            }\n            else if (err.message.startsWith('FourCC')) {\n                if (this.pageNumber > 0) {\n                    // ignore this error: work-around if last OGG-page is not marked with last-page flag\n                    this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\n                    this.pageConsumer.flush();\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n}\nOggParser.Header = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: FourCC_1.FourCcToken.get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: buf.readUInt8(off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\nexports.OggParser = OggParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/OggParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/opus/Opus.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/Opus.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nclass IdHeader {\n    constructor(len) {\n        this.len = len;\n        if (len < 19) {\n            throw new Error(\"ID-header-page 0 should be at least 19 bytes long\");\n        }\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: buf.readUInt8(off + 8),\n            channelCount: buf.readUInt8(off + 9),\n            preSkip: buf.readInt16LE(off + 10),\n            inputSampleRate: buf.readInt32LE(off + 12),\n            outputGain: buf.readInt16LE(off + 16),\n            channelMapping: buf.readUInt8(off + 18)\n        };\n    }\n}\nexports.IdHeader = IdHeader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9vcHVzL09wdXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLGNBQWMsbUJBQU8sQ0FBQyxrRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9vcHVzL09wdXMuanM/NjY4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSWRIZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbi8qKlxuICogT3B1cyBJRCBIZWFkZXIgcGFyc2VyXG4gKiBSZWY6IGh0dHBzOi8vd2lraS54aXBoLm9yZy9PZ2dPcHVzI0lEX0hlYWRlclxuICovXG5jbGFzcyBJZEhlYWRlciB7XG4gICAgY29uc3RydWN0b3IobGVuKSB7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgICAgICBpZiAobGVuIDwgMTkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklELWhlYWRlci1wYWdlIDAgc2hvdWxkIGJlIGF0IGxlYXN0IDE5IGJ5dGVzIGxvbmdcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYWdpY1NpZ25hdHVyZTogbmV3IFRva2VuLlN0cmluZ1R5cGUoOCwgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmICsgMCksXG4gICAgICAgICAgICB2ZXJzaW9uOiBidWYucmVhZFVJbnQ4KG9mZiArIDgpLFxuICAgICAgICAgICAgY2hhbm5lbENvdW50OiBidWYucmVhZFVJbnQ4KG9mZiArIDkpLFxuICAgICAgICAgICAgcHJlU2tpcDogYnVmLnJlYWRJbnQxNkxFKG9mZiArIDEwKSxcbiAgICAgICAgICAgIGlucHV0U2FtcGxlUmF0ZTogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDEyKSxcbiAgICAgICAgICAgIG91dHB1dEdhaW46IGJ1Zi5yZWFkSW50MTZMRShvZmYgKyAxNiksXG4gICAgICAgICAgICBjaGFubmVsTWFwcGluZzogYnVmLnJlYWRVSW50OChvZmYgKyAxOClcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLklkSGVhZGVyID0gSWRIZWFkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/opus/Opus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/opus/OpusParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/opus/OpusParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OpusParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ../vorbis/VorbisParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst Opus = __webpack_require__(/*! ./Opus */ \"(ssr)/./node_modules/music-metadata/lib/ogg/opus/Opus.js\");\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggParser\n */\nclass OpusParser extends VorbisParser_1.VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n        this.lastPos = -1;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new Error(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n    }\n    parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\nexports.OpusParser = OpusParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9vcHVzL09wdXNQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGNBQWMsbUJBQU8sQ0FBQyxrRUFBYTtBQUNuQyx1QkFBdUIsbUJBQU8sQ0FBQyxrR0FBd0I7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLHdFQUFRO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9vZ2cvb3B1cy9PcHVzUGFyc2VyLmpzPzkxODIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wdXNQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IFZvcmJpc1BhcnNlcl8xID0gcmVxdWlyZShcIi4uL3ZvcmJpcy9Wb3JiaXNQYXJzZXJcIik7XG5jb25zdCBPcHVzID0gcmVxdWlyZShcIi4vT3B1c1wiKTtcbi8qKlxuICogT3B1cyBwYXJzZXJcbiAqIEludGVybmV0IEVuZ2luZWVyaW5nIFRhc2sgRm9yY2UgKElFVEYpIC0gUkZDIDY3MTZcbiAqIFVzZWQgYnkgT2dnUGFyc2VyXG4gKi9cbmNsYXNzIE9wdXNQYXJzZXIgZXh0ZW5kcyBWb3JiaXNQYXJzZXJfMS5Wb3JiaXNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKG1ldGFkYXRhLCBvcHRpb25zLCB0b2tlbml6ZXIpIHtcbiAgICAgICAgc3VwZXIobWV0YWRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgdGhpcy5sYXN0UG9zID0gLTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIGZpcnN0IE9wdXMgT2dnIHBhZ2VcbiAgICAgKiBAcGFyYW0ge0lQYWdlSGVhZGVyfSBoZWFkZXJcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gcGFnZURhdGFcbiAgICAgKi9cbiAgICBwYXJzZUZpcnN0UGFnZShoZWFkZXIsIHBhZ2VEYXRhKSB7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb2RlYycsICdPcHVzJyk7XG4gICAgICAgIC8vIFBhcnNlIE9wdXMgSUQgSGVhZGVyXG4gICAgICAgIHRoaXMuaWRIZWFkZXIgPSBuZXcgT3B1cy5JZEhlYWRlcihwYWdlRGF0YS5sZW5ndGgpLmdldChwYWdlRGF0YSwgMCk7XG4gICAgICAgIGlmICh0aGlzLmlkSGVhZGVyLm1hZ2ljU2lnbmF0dXJlICE9PSBcIk9wdXNIZWFkXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIG9nZy9PcHVzIG1hZ2ljLXNpZ25hdHVyZVwiKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3NhbXBsZVJhdGUnLCB0aGlzLmlkSGVhZGVyLmlucHV0U2FtcGxlUmF0ZSk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZkNoYW5uZWxzJywgdGhpcy5pZEhlYWRlci5jaGFubmVsQ291bnQpO1xuICAgIH1cbiAgICBwYXJzZUZ1bGxQYWdlKHBhZ2VEYXRhKSB7XG4gICAgICAgIGNvbnN0IG1hZ2ljU2lnbmF0dXJlID0gbmV3IFRva2VuLlN0cmluZ1R5cGUoOCwgJ2FzY2lpJykuZ2V0KHBhZ2VEYXRhLCAwKTtcbiAgICAgICAgc3dpdGNoIChtYWdpY1NpZ25hdHVyZSkge1xuICAgICAgICAgICAgY2FzZSAnT3B1c1RhZ3MnOlxuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VVc2VyQ29tbWVudExpc3QocGFnZURhdGEsIDgpO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFBvcyA9IHRoaXMudG9rZW5pemVyLnBvc2l0aW9uIC0gcGFnZURhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYWxjdWxhdGVEdXJhdGlvbihoZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMubWV0YWRhdGEuZm9ybWF0LnNhbXBsZVJhdGUgJiYgaGVhZGVyLmFic29sdXRlR3JhbnVsZVBvc2l0aW9uID49IDApIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBkdXJhdGlvblxuICAgICAgICAgICAgY29uc3QgcG9zXzQ4Yml0ID0gaGVhZGVyLmFic29sdXRlR3JhbnVsZVBvc2l0aW9uIC0gdGhpcy5pZEhlYWRlci5wcmVTa2lwO1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mU2FtcGxlcycsIHBvc180OGJpdCk7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBwb3NfNDhiaXQgLyA0ODAwMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0UG9zICE9PSAtMSAmJiB0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplICYmIHRoaXMubWV0YWRhdGEuZm9ybWF0LmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVNpemUgPSB0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplIC0gdGhpcy5sYXN0UG9zO1xuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgOCAqIGRhdGFTaXplIC8gdGhpcy5tZXRhZGF0YS5mb3JtYXQuZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5PcHVzUGFyc2VyID0gT3B1c1BhcnNlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/opus/OpusParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/speex/Speex.js":
/*!************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/Speex.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst util = __webpack_require__(/*! ../../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexports.Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: buf.readInt32LE(off + 28),\n            header_size: buf.readInt32LE(off + 32),\n            rate: buf.readInt32LE(off + 36),\n            mode: buf.readInt32LE(off + 40),\n            mode_bitstream_version: buf.readInt32LE(off + 44),\n            nb_channels: buf.readInt32LE(off + 48),\n            bitrate: buf.readInt32LE(off + 52),\n            frame_size: buf.readInt32LE(off + 56),\n            vbr: buf.readInt32LE(off + 60),\n            frames_per_packet: buf.readInt32LE(off + 64),\n            extra_headers: buf.readInt32LE(off + 68),\n            reserved1: buf.readInt32LE(off + 72),\n            reserved2: buf.readInt32LE(off + 76)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9zcGVleC9TcGVleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxpRkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9zcGVleC9TcGVleC5qcz9lYmNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL1V0aWxcIik7XG4vKipcbiAqIFNwZWV4IEhlYWRlciBQYWNrZXRcbiAqIFJlZjogaHR0cHM6Ly93d3cuc3BlZXgub3JnL2RvY3MvbWFudWFsL3NwZWV4LW1hbnVhbC9ub2RlOC5odG1sI1NFQ1RJT04wMDgzMDAwMDAwMDAwMDAwMDAwMFxuICovXG5leHBvcnRzLkhlYWRlciA9IHtcbiAgICBsZW46IDgwLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcGVleDogbmV3IFRva2VuLlN0cmluZ1R5cGUoOCwgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmICsgMCksXG4gICAgICAgICAgICB2ZXJzaW9uOiB1dGlsLnRyaW1SaWdodE51bGwobmV3IFRva2VuLlN0cmluZ1R5cGUoMjAsICdhc2NpaScpLmdldChidWYsIG9mZiArIDgpKSxcbiAgICAgICAgICAgIHZlcnNpb25faWQ6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyAyOCksXG4gICAgICAgICAgICBoZWFkZXJfc2l6ZTogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDMyKSxcbiAgICAgICAgICAgIHJhdGU6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyAzNiksXG4gICAgICAgICAgICBtb2RlOiBidWYucmVhZEludDMyTEUob2ZmICsgNDApLFxuICAgICAgICAgICAgbW9kZV9iaXRzdHJlYW1fdmVyc2lvbjogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDQ0KSxcbiAgICAgICAgICAgIG5iX2NoYW5uZWxzOiBidWYucmVhZEludDMyTEUob2ZmICsgNDgpLFxuICAgICAgICAgICAgYml0cmF0ZTogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDUyKSxcbiAgICAgICAgICAgIGZyYW1lX3NpemU6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA1NiksXG4gICAgICAgICAgICB2YnI6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA2MCksXG4gICAgICAgICAgICBmcmFtZXNfcGVyX3BhY2tldDogYnVmLnJlYWRJbnQzMkxFKG9mZiArIDY0KSxcbiAgICAgICAgICAgIGV4dHJhX2hlYWRlcnM6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA2OCksXG4gICAgICAgICAgICByZXNlcnZlZDE6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA3MiksXG4gICAgICAgICAgICByZXNlcnZlZDI6IGJ1Zi5yZWFkSW50MzJMRShvZmYgKyA3NilcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/speex/Speex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpeexParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst VorbisParser_1 = __webpack_require__(/*! ../vorbis/VorbisParser */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\");\nconst Speex = __webpack_require__(/*! ./Speex */ \"(ssr)/./node_modules/music-metadata/lib/ogg/speex/Speex.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nclass SpeexParser extends VorbisParser_1.VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n    }\n}\nexports.SpeexParser = SpeexParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy9zcGVleC9TcGVleFBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0JBQWdCLG1CQUFPLENBQUMsc0RBQU87QUFDL0IsdUJBQXVCLG1CQUFPLENBQUMsa0dBQXdCO0FBQ3ZELGNBQWMsbUJBQU8sQ0FBQywyRUFBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL3NwZWV4L1NwZWV4UGFyc2VyLmpzPzUzOGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNwZWV4UGFyc2VyID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTtcbmNvbnN0IFZvcmJpc1BhcnNlcl8xID0gcmVxdWlyZShcIi4uL3ZvcmJpcy9Wb3JiaXNQYXJzZXJcIik7XG5jb25zdCBTcGVleCA9IHJlcXVpcmUoXCIuL1NwZWV4XCIpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOm9nZzpzcGVleCcpO1xuLyoqXG4gKiBTcGVleCwgUkZDIDU1NzRcbiAqIFJlZjpcbiAqIC0gaHR0cHM6Ly93d3cuc3BlZXgub3JnL2RvY3MvbWFudWFsL3NwZWV4LW1hbnVhbC9cbiAqIC0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU1NzRcbiAqL1xuY2xhc3MgU3BlZXhQYXJzZXIgZXh0ZW5kcyBWb3JiaXNQYXJzZXJfMS5Wb3JiaXNQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKG1ldGFkYXRhLCBvcHRpb25zLCB0b2tlbml6ZXIpIHtcbiAgICAgICAgc3VwZXIobWV0YWRhdGEsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgZmlyc3QgU3BlZXggT2dnIHBhZ2VcbiAgICAgKiBAcGFyYW0ge0lQYWdlSGVhZGVyfSBoZWFkZXJcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gcGFnZURhdGFcbiAgICAgKi9cbiAgICBwYXJzZUZpcnN0UGFnZShoZWFkZXIsIHBhZ2VEYXRhKSB7XG4gICAgICAgIGRlYnVnKCdGaXJzdCBPZ2cvU3BlZXggcGFnZScpO1xuICAgICAgICBjb25zdCBzcGVleEhlYWRlciA9IFNwZWV4LkhlYWRlci5nZXQocGFnZURhdGEsIDApO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29kZWMnLCBgU3BlZXggJHtzcGVleEhlYWRlci52ZXJzaW9ufWApO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZDaGFubmVscycsIHNwZWV4SGVhZGVyLm5iX2NoYW5uZWxzKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3NhbXBsZVJhdGUnLCBzcGVleEhlYWRlci5yYXRlKTtcbiAgICAgICAgaWYgKHNwZWV4SGVhZGVyLmJpdHJhdGUgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnYml0cmF0ZScsIHNwZWV4SGVhZGVyLmJpdHJhdGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TcGVleFBhcnNlciA9IFNwZWV4UGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/theora/Theora.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/Theora.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdentificationHeader = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexports.IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: buf.readUInt8(off + 7),\n            vmin: buf.readUInt8(off + 8),\n            vrev: buf.readUInt8(off + 9),\n            vmbw: buf.readUInt16BE(off + 10),\n            vmbh: buf.readUInt16BE(off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: buf.readUInt8(off + 40)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy90aGVvcmEvVGhlb3JhLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9vZ2cvdGhlb3JhL1RoZW9yYS5qcz85MGY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JZGVudGlmaWNhdGlvbkhlYWRlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuLyoqXG4gKiA2LjIgSWRlbnRpZmljYXRpb24gSGVhZGVyXG4gKiBSZWY6IGh0dHBzOi8vdGhlb3JhLm9yZy9kb2MvVGhlb3JhLnBkZjogNi4yIElkZW50aWZpY2F0aW9uIEhlYWRlciBEZWNvZGVcbiAqL1xuZXhwb3J0cy5JZGVudGlmaWNhdGlvbkhlYWRlciA9IHtcbiAgICBsZW46IDQyLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogbmV3IFRva2VuLlN0cmluZ1R5cGUoNywgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIHZtYWo6IGJ1Zi5yZWFkVUludDgob2ZmICsgNyksXG4gICAgICAgICAgICB2bWluOiBidWYucmVhZFVJbnQ4KG9mZiArIDgpLFxuICAgICAgICAgICAgdnJldjogYnVmLnJlYWRVSW50OChvZmYgKyA5KSxcbiAgICAgICAgICAgIHZtYnc6IGJ1Zi5yZWFkVUludDE2QkUob2ZmICsgMTApLFxuICAgICAgICAgICAgdm1iaDogYnVmLnJlYWRVSW50MTZCRShvZmYgKyAxNyksXG4gICAgICAgICAgICBub21icjogVG9rZW4uVUlOVDI0X0JFLmdldChidWYsIG9mZiArIDM3KSxcbiAgICAgICAgICAgIG5xdWFsOiBidWYucmVhZFVJbnQ4KG9mZiArIDQwKVxuICAgICAgICB9O1xuICAgIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/theora/Theora.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TheoraParser = void 0;\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst Theora_1 = __webpack_require__(/*! ./Theora */ \"(ssr)/./node_modules/music-metadata/lib/ogg/theora/Theora.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nclass TheoraParser {\n    constructor(metadata, options, tokenizer) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n    }\n    flush() {\n        debug('flush');\n    }\n    calculateDuration(header) {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = Theora_1.IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n    }\n}\nexports.TheoraParser = TheoraParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy90aGVvcmEvVGhlb3JhUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixnQkFBZ0IsbUJBQU8sQ0FBQyxzREFBTztBQUMvQixpQkFBaUIsbUJBQU8sQ0FBQyw4RUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9vZ2cvdGhlb3JhL1RoZW9yYVBhcnNlci5qcz9lNWYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UaGVvcmFQYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgVGhlb3JhXzEgPSByZXF1aXJlKFwiLi9UaGVvcmFcIik7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtdXNpYy1tZXRhZGF0YTpwYXJzZXI6b2dnOnRoZW9yYScpO1xuLyoqXG4gKiBSZWY6XG4gKiAtIGh0dHBzOi8vdGhlb3JhLm9yZy9kb2MvVGhlb3JhLnBkZlxuICovXG5jbGFzcyBUaGVvcmFQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKG1ldGFkYXRhLCBvcHRpb25zLCB0b2tlbml6ZXIpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVm9yYmlzIDEgcGFyc2VyXG4gICAgICogQHBhcmFtIGhlYWRlciBPZ2cgUGFnZSBIZWFkZXJcbiAgICAgKiBAcGFyYW0gcGFnZURhdGEgUGFnZSBkYXRhXG4gICAgICovXG4gICAgcGFyc2VQYWdlKGhlYWRlciwgcGFnZURhdGEpIHtcbiAgICAgICAgaWYgKGhlYWRlci5oZWFkZXJUeXBlLmZpcnN0UGFnZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUZpcnN0UGFnZShoZWFkZXIsIHBhZ2VEYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgZGVidWcoJ2ZsdXNoJyk7XG4gICAgfVxuICAgIGNhbGN1bGF0ZUR1cmF0aW9uKGhlYWRlcikge1xuICAgICAgICBkZWJ1ZygnZHVyYXRpb24gY2FsY3VsYXRpb24gbm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIGZpcnN0IFRoZW9yYSBPZ2cgcGFnZS4gdGhlIGluaXRpYWwgaWRlbnRpZmljYXRpb24gaGVhZGVyIHBhY2tldFxuICAgICAqIEBwYXJhbSB7SVBhZ2VIZWFkZXJ9IGhlYWRlclxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBwYWdlRGF0YVxuICAgICAqL1xuICAgIHBhcnNlRmlyc3RQYWdlKGhlYWRlciwgcGFnZURhdGEpIHtcbiAgICAgICAgZGVidWcoJ0ZpcnN0IE9nZy9UaGVvcmEgcGFnZScpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29kZWMnLCAnVGhlb3JhJyk7XG4gICAgICAgIGNvbnN0IGlkSGVhZGVyID0gVGhlb3JhXzEuSWRlbnRpZmljYXRpb25IZWFkZXIuZ2V0KHBhZ2VEYXRhLCAwKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCBpZEhlYWRlci5ub21icik7XG4gICAgfVxufVxuZXhwb3J0cy5UaGVvcmFQYXJzZXIgPSBUaGVvcmFQYXJzZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js":
/*!**************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IdentificationHeader = exports.CommonHeader = exports.VorbisPictureToken = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst ID3v2Token_1 = __webpack_require__(/*! ../../id3v2/ID3v2Token */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nclass VorbisPictureToken {\n    static fromBase64(base64str) {\n        return this.fromBuffer(Buffer.from(base64str, 'base64'));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = ID3v2Token_1.AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        const mimeLen = Token.UINT32_BE.get(buffer, offset += 4);\n        const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\n        const descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);\n        const description = buffer.toString('utf-8', offset += 4, offset + descLen);\n        const width = Token.UINT32_BE.get(buffer, offset += descLen);\n        const height = Token.UINT32_BE.get(buffer, offset += 4);\n        const colour_depth = Token.UINT32_BE.get(buffer, offset += 4);\n        const indexed_color = Token.UINT32_BE.get(buffer, offset += 4);\n        const picDataLen = Token.UINT32_BE.get(buffer, offset += 4);\n        const data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\nexports.VorbisPictureToken = VorbisPictureToken;\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexports.CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: buf.readUInt8(off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexports.IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        const dataView = new DataView(uint8Array.buffer, uint8Array.byteOffset);\n        return {\n            version: dataView.getUint32(off + 0, true),\n            channelMode: dataView.getUint8(off + 4),\n            sampleRate: dataView.getUint32(off + 5, true),\n            bitrateMax: dataView.getUint32(off + 9, true),\n            bitrateNominal: dataView.getUint32(off + 13, true),\n            bitrateMin: dataView.getUint32(off + 17, true)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLG9CQUFvQixHQUFHLDBCQUEwQjtBQUNoRixjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkMscUJBQXFCLG1CQUFPLENBQUMsMkZBQXdCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzLmpzP2RlODYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklkZW50aWZpY2F0aW9uSGVhZGVyID0gZXhwb3J0cy5Db21tb25IZWFkZXIgPSBleHBvcnRzLlZvcmJpc1BpY3R1cmVUb2tlbiA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY29uc3QgSUQzdjJUb2tlbl8xID0gcmVxdWlyZShcIi4uLy4uL2lkM3YyL0lEM3YyVG9rZW5cIik7XG4vKipcbiAqIFBhcnNlIHRoZSBNRVRBREFUQV9CTE9DS19QSUNUVVJFXG4gKiBSZWY6IGh0dHBzOi8vd2lraS54aXBoLm9yZy9Wb3JiaXNDb21tZW50I01FVEFEQVRBX0JMT0NLX1BJQ1RVUkVcbiAqIFJlZjogaHR0cHM6Ly94aXBoLm9yZy9mbGFjL2Zvcm1hdC5odG1sI21ldGFkYXRhX2Jsb2NrX3BpY3R1cmVcbiAqIC8vIFRvRG86IG1vdmUgdG8gSUQzIC8gQVBJQz9cbiAqL1xuY2xhc3MgVm9yYmlzUGljdHVyZVRva2VuIHtcbiAgICBzdGF0aWMgZnJvbUJhc2U2NChiYXNlNjRzdHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUJ1ZmZlcihCdWZmZXIuZnJvbShiYXNlNjRzdHIsICdiYXNlNjQnKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQnVmZmVyKGJ1ZmZlcikge1xuICAgICAgICBjb25zdCBwaWMgPSBuZXcgVm9yYmlzUGljdHVyZVRva2VuKGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gcGljLmdldChidWZmZXIsIDApO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgfVxuICAgIGdldChidWZmZXIsIG9mZnNldCkge1xuICAgICAgICBjb25zdCB0eXBlID0gSUQzdjJUb2tlbl8xLkF0dGFjaGVkUGljdHVyZVR5cGVbVG9rZW4uVUlOVDMyX0JFLmdldChidWZmZXIsIG9mZnNldCldO1xuICAgICAgICBjb25zdCBtaW1lTGVuID0gVG9rZW4uVUlOVDMyX0JFLmdldChidWZmZXIsIG9mZnNldCArPSA0KTtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gYnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcsIG9mZnNldCArPSA0LCBvZmZzZXQgKyBtaW1lTGVuKTtcbiAgICAgICAgY29uc3QgZGVzY0xlbiA9IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmZmVyLCBvZmZzZXQgKz0gbWltZUxlbik7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gYnVmZmVyLnRvU3RyaW5nKCd1dGYtOCcsIG9mZnNldCArPSA0LCBvZmZzZXQgKyBkZXNjTGVuKTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1ZmZlciwgb2Zmc2V0ICs9IGRlc2NMZW4pO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1ZmZlciwgb2Zmc2V0ICs9IDQpO1xuICAgICAgICBjb25zdCBjb2xvdXJfZGVwdGggPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1ZmZlciwgb2Zmc2V0ICs9IDQpO1xuICAgICAgICBjb25zdCBpbmRleGVkX2NvbG9yID0gVG9rZW4uVUlOVDMyX0JFLmdldChidWZmZXIsIG9mZnNldCArPSA0KTtcbiAgICAgICAgY29uc3QgcGljRGF0YUxlbiA9IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmZmVyLCBvZmZzZXQgKz0gNCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBCdWZmZXIuZnJvbShidWZmZXIuc2xpY2Uob2Zmc2V0ICs9IDQsIG9mZnNldCArIHBpY0RhdGFMZW4pKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgY29sb3VyX2RlcHRoLFxuICAgICAgICAgICAgaW5kZXhlZF9jb2xvcixcbiAgICAgICAgICAgIGRhdGFcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlZvcmJpc1BpY3R1cmVUb2tlbiA9IFZvcmJpc1BpY3R1cmVUb2tlbjtcbi8qKlxuICogQ29tbWVudCBoZWFkZXIgZGVjb2RlclxuICogUmVmOiBodHRwczovL3hpcGgub3JnL3ZvcmJpcy9kb2MvVm9yYmlzX0lfc3BlYy5odG1sI3gxLTYyMDAwNC4yLjFcbiAqL1xuZXhwb3J0cy5Db21tb25IZWFkZXIgPSB7XG4gICAgbGVuOiA3LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWNrZXRUeXBlOiBidWYucmVhZFVJbnQ4KG9mZiksXG4gICAgICAgICAgICB2b3JiaXM6IG5ldyBUb2tlbi5TdHJpbmdUeXBlKDYsICdhc2NpaScpLmdldChidWYsIG9mZiArIDEpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogSWRlbnRpZmljYXRpb24gaGVhZGVyIGRlY29kZXJcbiAqIFJlZjogaHR0cHM6Ly94aXBoLm9yZy92b3JiaXMvZG9jL1ZvcmJpc19JX3NwZWMuaHRtbCN4MS02MzAwMDQuMi4yXG4gKi9cbmV4cG9ydHMuSWRlbnRpZmljYXRpb25IZWFkZXIgPSB7XG4gICAgbGVuOiAyMyxcbiAgICBnZXQ6ICh1aW50OEFycmF5LCBvZmYpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodWludDhBcnJheS5idWZmZXIsIHVpbnQ4QXJyYXkuYnl0ZU9mZnNldCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBkYXRhVmlldy5nZXRVaW50MzIob2ZmICsgMCwgdHJ1ZSksXG4gICAgICAgICAgICBjaGFubmVsTW9kZTogZGF0YVZpZXcuZ2V0VWludDgob2ZmICsgNCksXG4gICAgICAgICAgICBzYW1wbGVSYXRlOiBkYXRhVmlldy5nZXRVaW50MzIob2ZmICsgNSwgdHJ1ZSksXG4gICAgICAgICAgICBiaXRyYXRlTWF4OiBkYXRhVmlldy5nZXRVaW50MzIob2ZmICsgOSwgdHJ1ZSksXG4gICAgICAgICAgICBiaXRyYXRlTm9taW5hbDogZGF0YVZpZXcuZ2V0VWludDMyKG9mZiArIDEzLCB0cnVlKSxcbiAgICAgICAgICAgIGJpdHJhdGVNaW46IGRhdGFWaWV3LmdldFVpbnQzMihvZmYgKyAxNywgdHJ1ZSlcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VorbisDecoder = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nclass VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = Buffer.from(this.data).toString('utf-8', this.offset, this.offset + len);\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.slice(0, idx).toUpperCase(),\n            value: v.slice(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\nexports.VorbisDecoder = VorbisDecoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzRGVjb2Rlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc2FmaW8xLy4vbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9vZ2cvdm9yYmlzL1ZvcmJpc0RlY29kZXIuanM/ZTViNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVm9yYmlzRGVjb2RlciA9IHZvaWQgMDtcbmNvbnN0IFRva2VuID0gcmVxdWlyZShcInRva2VuLXR5cGVzXCIpO1xuY2xhc3MgVm9yYmlzRGVjb2RlciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgb2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgICByZWFkSW50MzIoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gVG9rZW4uVUlOVDMyX0xFLmdldCh0aGlzLmRhdGEsIHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZWFkU3RyaW5nVXRmOCgpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5yZWFkSW50MzIoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBCdWZmZXIuZnJvbSh0aGlzLmRhdGEpLnRvU3RyaW5nKCd1dGYtOCcsIHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBwYXJzZVVzZXJDb21tZW50KCkge1xuICAgICAgICBjb25zdCBvZmZzZXQwID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLnJlYWRTdHJpbmdVdGY4KCk7XG4gICAgICAgIGNvbnN0IGlkeCA9IHYuaW5kZXhPZignPScpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiB2LnNsaWNlKDAsIGlkeCkudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgIHZhbHVlOiB2LnNsaWNlKGlkeCArIDEpLFxuICAgICAgICAgICAgbGVuOiB0aGlzLm9mZnNldCAtIG9mZnNldDBcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlZvcmJpc0RlY29kZXIgPSBWb3JiaXNEZWNvZGVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VorbisParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst VorbisDecoder_1 = __webpack_require__(/*! ./VorbisDecoder */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js\");\nconst Vorbis_1 = __webpack_require__(/*! ./Vorbis */ \"(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:ogg:vorbis1');\n/**\n * Vorbis 1 Parser.\n * Used by OggParser\n */\nclass VorbisParser {\n    constructor(metadata, options) {\n        this.metadata = metadata;\n        this.options = options;\n        this.pageSegments = [];\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new Error(\"Cannot continue on previous page\");\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = Buffer.concat(this.pageSegments);\n                    this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.calculateDuration(header);\n        }\n    }\n    flush() {\n        this.parseFullPage(Buffer.concat(this.pageSegments));\n    }\n    parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder_1.VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(`Ignore picture`);\n                return;\n            }\n            value = Vorbis_1.VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\n            this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        debug(\"Parse first page\");\n        // Parse  Vorbis common header\n        const commonHeader = Vorbis_1.CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new Error('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = Vorbis_1.IdentificationHeader.get(pageData, Vorbis_1.CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug(\"sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s\", idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new Error('First Ogg page should be type 1: the identification header');\n    }\n    parseFullPage(pageData) {\n        // New page\n        const commonHeader = Vorbis_1.CommonHeader.get(pageData, 0);\n        debug(\"Parse full page: type=%s, byteLength=%s\", commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, Vorbis_1.CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += this.parseUserComment(pageData, offset);\n        }\n    }\n}\nexports.VorbisParser = VorbisParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VorbisTagMapper = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../../common/GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * Vorbis tag mappings\n *\n * Mapping from native header format to one or possibly more 'common' entries\n * The common entries aim to read the same information from different media files\n * independent of the underlying format\n */\nconst vorbisTagMap = {\n    TITLE: 'title',\n    ARTIST: 'artist',\n    ARTISTS: 'artists',\n    ALBUMARTIST: 'albumartist',\n    'ALBUM ARTIST': 'albumartist',\n    ALBUM: 'album',\n    DATE: 'date',\n    ORIGINALDATE: 'originaldate',\n    ORIGINALYEAR: 'originalyear',\n    COMMENT: 'comment',\n    TRACKNUMBER: 'track',\n    DISCNUMBER: 'disk',\n    GENRE: 'genre',\n    METADATA_BLOCK_PICTURE: 'picture',\n    COMPOSER: 'composer',\n    LYRICS: 'lyrics',\n    ALBUMSORT: 'albumsort',\n    TITLESORT: 'titlesort',\n    WORK: 'work',\n    ARTISTSORT: 'artistsort',\n    ALBUMARTISTSORT: 'albumartistsort',\n    COMPOSERSORT: 'composersort',\n    LYRICIST: 'lyricist',\n    WRITER: 'writer',\n    CONDUCTOR: 'conductor',\n    // 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo\n    REMIXER: 'remixer',\n    ARRANGER: 'arranger',\n    ENGINEER: 'engineer',\n    PRODUCER: 'producer',\n    DJMIXER: 'djmixer',\n    MIXER: 'mixer',\n    LABEL: 'label',\n    GROUPING: 'grouping',\n    SUBTITLE: 'subtitle',\n    DISCSUBTITLE: 'discsubtitle',\n    TRACKTOTAL: 'totaltracks',\n    DISCTOTAL: 'totaldiscs',\n    COMPILATION: 'compilation',\n    RATING: 'rating',\n    BPM: 'bpm',\n    KEY: 'key',\n    MOOD: 'mood',\n    MEDIA: 'media',\n    CATALOGNUMBER: 'catalognumber',\n    RELEASESTATUS: 'releasestatus',\n    RELEASETYPE: 'releasetype',\n    RELEASECOUNTRY: 'releasecountry',\n    SCRIPT: 'script',\n    LANGUAGE: 'language',\n    COPYRIGHT: 'copyright',\n    LICENSE: 'license',\n    ENCODEDBY: 'encodedby',\n    ENCODERSETTINGS: 'encodersettings',\n    BARCODE: 'barcode',\n    ISRC: 'isrc',\n    ASIN: 'asin',\n    MUSICBRAINZ_TRACKID: 'musicbrainz_recordingid',\n    MUSICBRAINZ_RELEASETRACKID: 'musicbrainz_trackid',\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\n    ACOUSTID_ID: 'acoustid_id',\n    ACOUSTID_ID_FINGERPRINT: 'acoustid_fingerprint',\n    MUSICIP_PUID: 'musicip_puid',\n    // 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo\n    WEBSITE: 'website',\n    NOTES: 'notes',\n    TOTALTRACKS: 'totaltracks',\n    TOTALDISCS: 'totaldiscs',\n    // Discogs\n    DISCOGS_ARTIST_ID: 'discogs_artist_id',\n    DISCOGS_ARTISTS: 'artists',\n    DISCOGS_ARTIST_NAME: 'artists',\n    DISCOGS_ALBUM_ARTISTS: 'albumartist',\n    DISCOGS_CATALOG: 'catalognumber',\n    DISCOGS_COUNTRY: 'releasecountry',\n    DISCOGS_DATE: 'originaldate',\n    DISCOGS_LABEL: 'label',\n    DISCOGS_LABEL_ID: 'discogs_label_id',\n    DISCOGS_MASTER_RELEASE_ID: 'discogs_master_release_id',\n    DISCOGS_RATING: 'discogs_rating',\n    DISCOGS_RELEASED: 'date',\n    DISCOGS_RELEASE_ID: 'discogs_release_id',\n    DISCOGS_VOTES: 'discogs_votes',\n    CATALOGID: 'catalognumber',\n    STYLE: 'genre',\n    //\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\n    REPLAYGAIN_ALBUM_GAIN: 'replaygain_album_gain',\n    REPLAYGAIN_ALBUM_PEAK: 'replaygain_album_peak',\n    // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:\n    REPLAYGAIN_MINMAX: 'replaygain_track_minmax',\n    REPLAYGAIN_ALBUM_MINMAX: 'replaygain_album_minmax',\n    REPLAYGAIN_UNDO: 'replaygain_undo'\n};\nclass VorbisTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    static toRating(email, rating, maxScore) {\n        return {\n            source: email ? email.toLowerCase() : email,\n            rating: (parseFloat(rating) / maxScore) * GenericTagMapper_1.CommonTagMapper.maxRatingScore\n        };\n    }\n    constructor() {\n        super(['vorbis'], vorbisTagMap);\n    }\n    postMap(tag) {\n        if (tag.id === 'RATING') {\n            // The way Winamp 5.666 assigns rating\n            tag.value = VorbisTagMapper.toRating(undefined, tag.value, 100);\n        }\n        else if (tag.id.indexOf('RATING:') === 0) {\n            const keys = tag.id.split(':');\n            tag.value = VorbisTagMapper.toRating(keys[1], tag.value, 1);\n            tag.id = keys[0];\n        }\n    }\n}\nexports.VorbisTagMapper = VorbisTagMapper;\n//# sourceMappingURL=VorbisTagMapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL29nZy92b3JiaXMvVm9yYmlzVGFnTWFwcGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QiwyQkFBMkIsbUJBQU8sQ0FBQyx5R0FBK0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxZQUFZO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvb2dnL3ZvcmJpcy9Wb3JiaXNUYWdNYXBwZXIuanM/MzQ3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVm9yYmlzVGFnTWFwcGVyID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyXCIpO1xuLyoqXG4gKiBWb3JiaXMgdGFnIG1hcHBpbmdzXG4gKlxuICogTWFwcGluZyBmcm9tIG5hdGl2ZSBoZWFkZXIgZm9ybWF0IHRvIG9uZSBvciBwb3NzaWJseSBtb3JlICdjb21tb24nIGVudHJpZXNcbiAqIFRoZSBjb21tb24gZW50cmllcyBhaW0gdG8gcmVhZCB0aGUgc2FtZSBpbmZvcm1hdGlvbiBmcm9tIGRpZmZlcmVudCBtZWRpYSBmaWxlc1xuICogaW5kZXBlbmRlbnQgb2YgdGhlIHVuZGVybHlpbmcgZm9ybWF0XG4gKi9cbmNvbnN0IHZvcmJpc1RhZ01hcCA9IHtcbiAgICBUSVRMRTogJ3RpdGxlJyxcbiAgICBBUlRJU1Q6ICdhcnRpc3QnLFxuICAgIEFSVElTVFM6ICdhcnRpc3RzJyxcbiAgICBBTEJVTUFSVElTVDogJ2FsYnVtYXJ0aXN0JyxcbiAgICAnQUxCVU0gQVJUSVNUJzogJ2FsYnVtYXJ0aXN0JyxcbiAgICBBTEJVTTogJ2FsYnVtJyxcbiAgICBEQVRFOiAnZGF0ZScsXG4gICAgT1JJR0lOQUxEQVRFOiAnb3JpZ2luYWxkYXRlJyxcbiAgICBPUklHSU5BTFlFQVI6ICdvcmlnaW5hbHllYXInLFxuICAgIENPTU1FTlQ6ICdjb21tZW50JyxcbiAgICBUUkFDS05VTUJFUjogJ3RyYWNrJyxcbiAgICBESVNDTlVNQkVSOiAnZGlzaycsXG4gICAgR0VOUkU6ICdnZW5yZScsXG4gICAgTUVUQURBVEFfQkxPQ0tfUElDVFVSRTogJ3BpY3R1cmUnLFxuICAgIENPTVBPU0VSOiAnY29tcG9zZXInLFxuICAgIExZUklDUzogJ2x5cmljcycsXG4gICAgQUxCVU1TT1JUOiAnYWxidW1zb3J0JyxcbiAgICBUSVRMRVNPUlQ6ICd0aXRsZXNvcnQnLFxuICAgIFdPUks6ICd3b3JrJyxcbiAgICBBUlRJU1RTT1JUOiAnYXJ0aXN0c29ydCcsXG4gICAgQUxCVU1BUlRJU1RTT1JUOiAnYWxidW1hcnRpc3Rzb3J0JyxcbiAgICBDT01QT1NFUlNPUlQ6ICdjb21wb3NlcnNvcnQnLFxuICAgIExZUklDSVNUOiAnbHlyaWNpc3QnLFxuICAgIFdSSVRFUjogJ3dyaXRlcicsXG4gICAgQ09ORFVDVE9SOiAnY29uZHVjdG9yJyxcbiAgICAvLyAnUEVSRk9STUVSPWFydGlzdMKgKGluc3RydW1lbnQpJzogJ3BlcmZvcm1lcjppbnN0cnVtZW50JywgLy8gVG9Eb1xuICAgIFJFTUlYRVI6ICdyZW1peGVyJyxcbiAgICBBUlJBTkdFUjogJ2FycmFuZ2VyJyxcbiAgICBFTkdJTkVFUjogJ2VuZ2luZWVyJyxcbiAgICBQUk9EVUNFUjogJ3Byb2R1Y2VyJyxcbiAgICBESk1JWEVSOiAnZGptaXhlcicsXG4gICAgTUlYRVI6ICdtaXhlcicsXG4gICAgTEFCRUw6ICdsYWJlbCcsXG4gICAgR1JPVVBJTkc6ICdncm91cGluZycsXG4gICAgU1VCVElUTEU6ICdzdWJ0aXRsZScsXG4gICAgRElTQ1NVQlRJVExFOiAnZGlzY3N1YnRpdGxlJyxcbiAgICBUUkFDS1RPVEFMOiAndG90YWx0cmFja3MnLFxuICAgIERJU0NUT1RBTDogJ3RvdGFsZGlzY3MnLFxuICAgIENPTVBJTEFUSU9OOiAnY29tcGlsYXRpb24nLFxuICAgIFJBVElORzogJ3JhdGluZycsXG4gICAgQlBNOiAnYnBtJyxcbiAgICBLRVk6ICdrZXknLFxuICAgIE1PT0Q6ICdtb29kJyxcbiAgICBNRURJQTogJ21lZGlhJyxcbiAgICBDQVRBTE9HTlVNQkVSOiAnY2F0YWxvZ251bWJlcicsXG4gICAgUkVMRUFTRVNUQVRVUzogJ3JlbGVhc2VzdGF0dXMnLFxuICAgIFJFTEVBU0VUWVBFOiAncmVsZWFzZXR5cGUnLFxuICAgIFJFTEVBU0VDT1VOVFJZOiAncmVsZWFzZWNvdW50cnknLFxuICAgIFNDUklQVDogJ3NjcmlwdCcsXG4gICAgTEFOR1VBR0U6ICdsYW5ndWFnZScsXG4gICAgQ09QWVJJR0hUOiAnY29weXJpZ2h0JyxcbiAgICBMSUNFTlNFOiAnbGljZW5zZScsXG4gICAgRU5DT0RFREJZOiAnZW5jb2RlZGJ5JyxcbiAgICBFTkNPREVSU0VUVElOR1M6ICdlbmNvZGVyc2V0dGluZ3MnLFxuICAgIEJBUkNPREU6ICdiYXJjb2RlJyxcbiAgICBJU1JDOiAnaXNyYycsXG4gICAgQVNJTjogJ2FzaW4nLFxuICAgIE1VU0lDQlJBSU5aX1RSQUNLSUQ6ICdtdXNpY2JyYWluel9yZWNvcmRpbmdpZCcsXG4gICAgTVVTSUNCUkFJTlpfUkVMRUFTRVRSQUNLSUQ6ICdtdXNpY2JyYWluel90cmFja2lkJyxcbiAgICBNVVNJQ0JSQUlOWl9BTEJVTUlEOiAnbXVzaWNicmFpbnpfYWxidW1pZCcsXG4gICAgTVVTSUNCUkFJTlpfQVJUSVNUSUQ6ICdtdXNpY2JyYWluel9hcnRpc3RpZCcsXG4gICAgTVVTSUNCUkFJTlpfQUxCVU1BUlRJU1RJRDogJ211c2ljYnJhaW56X2FsYnVtYXJ0aXN0aWQnLFxuICAgIE1VU0lDQlJBSU5aX1JFTEVBU0VHUk9VUElEOiAnbXVzaWNicmFpbnpfcmVsZWFzZWdyb3VwaWQnLFxuICAgIE1VU0lDQlJBSU5aX1dPUktJRDogJ211c2ljYnJhaW56X3dvcmtpZCcsXG4gICAgTVVTSUNCUkFJTlpfVFJNSUQ6ICdtdXNpY2JyYWluel90cm1pZCcsXG4gICAgTVVTSUNCUkFJTlpfRElTQ0lEOiAnbXVzaWNicmFpbnpfZGlzY2lkJyxcbiAgICBBQ09VU1RJRF9JRDogJ2Fjb3VzdGlkX2lkJyxcbiAgICBBQ09VU1RJRF9JRF9GSU5HRVJQUklOVDogJ2Fjb3VzdGlkX2ZpbmdlcnByaW50JyxcbiAgICBNVVNJQ0lQX1BVSUQ6ICdtdXNpY2lwX3B1aWQnLFxuICAgIC8vICdGSU5HRVJQUklOVD1NdXNpY01hZ2ljIEZpbmdlcnByaW50wqB7ZmluZ2VycHJpbnR9JzogJ211c2ljaXBfZmluZ2VycHJpbnQnLCAvLyBUb0RvXG4gICAgV0VCU0lURTogJ3dlYnNpdGUnLFxuICAgIE5PVEVTOiAnbm90ZXMnLFxuICAgIFRPVEFMVFJBQ0tTOiAndG90YWx0cmFja3MnLFxuICAgIFRPVEFMRElTQ1M6ICd0b3RhbGRpc2NzJyxcbiAgICAvLyBEaXNjb2dzXG4gICAgRElTQ09HU19BUlRJU1RfSUQ6ICdkaXNjb2dzX2FydGlzdF9pZCcsXG4gICAgRElTQ09HU19BUlRJU1RTOiAnYXJ0aXN0cycsXG4gICAgRElTQ09HU19BUlRJU1RfTkFNRTogJ2FydGlzdHMnLFxuICAgIERJU0NPR1NfQUxCVU1fQVJUSVNUUzogJ2FsYnVtYXJ0aXN0JyxcbiAgICBESVNDT0dTX0NBVEFMT0c6ICdjYXRhbG9nbnVtYmVyJyxcbiAgICBESVNDT0dTX0NPVU5UUlk6ICdyZWxlYXNlY291bnRyeScsXG4gICAgRElTQ09HU19EQVRFOiAnb3JpZ2luYWxkYXRlJyxcbiAgICBESVNDT0dTX0xBQkVMOiAnbGFiZWwnLFxuICAgIERJU0NPR1NfTEFCRUxfSUQ6ICdkaXNjb2dzX2xhYmVsX2lkJyxcbiAgICBESVNDT0dTX01BU1RFUl9SRUxFQVNFX0lEOiAnZGlzY29nc19tYXN0ZXJfcmVsZWFzZV9pZCcsXG4gICAgRElTQ09HU19SQVRJTkc6ICdkaXNjb2dzX3JhdGluZycsXG4gICAgRElTQ09HU19SRUxFQVNFRDogJ2RhdGUnLFxuICAgIERJU0NPR1NfUkVMRUFTRV9JRDogJ2Rpc2NvZ3NfcmVsZWFzZV9pZCcsXG4gICAgRElTQ09HU19WT1RFUzogJ2Rpc2NvZ3Nfdm90ZXMnLFxuICAgIENBVEFMT0dJRDogJ2NhdGFsb2dudW1iZXInLFxuICAgIFNUWUxFOiAnZ2VucmUnLFxuICAgIC8vXG4gICAgUkVQTEFZR0FJTl9UUkFDS19HQUlOOiAncmVwbGF5Z2Fpbl90cmFja19nYWluJyxcbiAgICBSRVBMQVlHQUlOX1RSQUNLX1BFQUs6ICdyZXBsYXlnYWluX3RyYWNrX3BlYWsnLFxuICAgIFJFUExBWUdBSU5fQUxCVU1fR0FJTjogJ3JlcGxheWdhaW5fYWxidW1fZ2FpbicsXG4gICAgUkVQTEFZR0FJTl9BTEJVTV9QRUFLOiAncmVwbGF5Z2Fpbl9hbGJ1bV9wZWFrJyxcbiAgICAvLyBUbyBTdXJlIGlmIHRoZXNlIChSRVBMQVlHQUlOX01JTk1BWCwgUkVQTEFZR0FJTl9BTEJVTV9NSU5NQVggJiBSRVBMQVlHQUlOX1VORE8pIGFyZSB1c2VkIGZvciBWb3JiaXM6XG4gICAgUkVQTEFZR0FJTl9NSU5NQVg6ICdyZXBsYXlnYWluX3RyYWNrX21pbm1heCcsXG4gICAgUkVQTEFZR0FJTl9BTEJVTV9NSU5NQVg6ICdyZXBsYXlnYWluX2FsYnVtX21pbm1heCcsXG4gICAgUkVQTEFZR0FJTl9VTkRPOiAncmVwbGF5Z2Fpbl91bmRvJ1xufTtcbmNsYXNzIFZvcmJpc1RhZ01hcHBlciBleHRlbmRzIEdlbmVyaWNUYWdNYXBwZXJfMS5Db21tb25UYWdNYXBwZXIge1xuICAgIHN0YXRpYyB0b1JhdGluZyhlbWFpbCwgcmF0aW5nLCBtYXhTY29yZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBlbWFpbCA/IGVtYWlsLnRvTG93ZXJDYXNlKCkgOiBlbWFpbCxcbiAgICAgICAgICAgIHJhdGluZzogKHBhcnNlRmxvYXQocmF0aW5nKSAvIG1heFNjb3JlKSAqIEdlbmVyaWNUYWdNYXBwZXJfMS5Db21tb25UYWdNYXBwZXIubWF4UmF0aW5nU2NvcmVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFsndm9yYmlzJ10sIHZvcmJpc1RhZ01hcCk7XG4gICAgfVxuICAgIHBvc3RNYXAodGFnKSB7XG4gICAgICAgIGlmICh0YWcuaWQgPT09ICdSQVRJTkcnKSB7XG4gICAgICAgICAgICAvLyBUaGUgd2F5IFdpbmFtcCA1LjY2NiBhc3NpZ25zIHJhdGluZ1xuICAgICAgICAgICAgdGFnLnZhbHVlID0gVm9yYmlzVGFnTWFwcGVyLnRvUmF0aW5nKHVuZGVmaW5lZCwgdGFnLnZhbHVlLCAxMDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRhZy5pZC5pbmRleE9mKCdSQVRJTkc6JykgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSB0YWcuaWQuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIHRhZy52YWx1ZSA9IFZvcmJpc1RhZ01hcHBlci50b1JhdGluZyhrZXlzWzFdLCB0YWcudmFsdWUsIDEpO1xuICAgICAgICAgICAgdGFnLmlkID0ga2V5c1swXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuVm9yYmlzVGFnTWFwcGVyID0gVm9yYmlzVGFnTWFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vm9yYmlzVGFnTWFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/riff/RiffChunk.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/riff/RiffChunk.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListInfoTagValue = exports.Header = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\n/**\n * Common RIFF chunk header\n */\nexports.Header = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: buf.toString('binary', off, off + 4),\n            // Size\n            chunkSize: Token.UINT32_LE.get(buf, 4)\n        };\n    }\n};\n/**\n * Token to parse RIFF-INFO tag value\n */\nclass ListInfoTagValue {\n    constructor(tagHeader) {\n        this.tagHeader = tagHeader;\n        this.len = tagHeader.chunkSize;\n        this.len += this.len & 1; // if it is an odd length, round up to even\n    }\n    get(buf, off) {\n        return new Token.StringType(this.tagHeader.chunkSize, 'ascii').get(buf, off);\n    }\n}\nexports.ListInfoTagValue = ListInfoTagValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3JpZmYvUmlmZkNodW5rLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLGNBQWM7QUFDekMsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvcmlmZi9SaWZmQ2h1bmsuanM/ZDBlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdEluZm9UYWdWYWx1ZSA9IGV4cG9ydHMuSGVhZGVyID0gdm9pZCAwO1xuY29uc3QgVG9rZW4gPSByZXF1aXJlKFwidG9rZW4tdHlwZXNcIik7XG4vKipcbiAqIENvbW1vbiBSSUZGIGNodW5rIGhlYWRlclxuICovXG5leHBvcnRzLkhlYWRlciA9IHtcbiAgICBsZW46IDgsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIEdyb3VwLUlEXG4gICAgICAgICAgICBjaHVua0lEOiBidWYudG9TdHJpbmcoJ2JpbmFyeScsIG9mZiwgb2ZmICsgNCksXG4gICAgICAgICAgICAvLyBTaXplXG4gICAgICAgICAgICBjaHVua1NpemU6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCA0KVxuICAgICAgICB9O1xuICAgIH1cbn07XG4vKipcbiAqIFRva2VuIHRvIHBhcnNlIFJJRkYtSU5GTyB0YWcgdmFsdWVcbiAqL1xuY2xhc3MgTGlzdEluZm9UYWdWYWx1ZSB7XG4gICAgY29uc3RydWN0b3IodGFnSGVhZGVyKSB7XG4gICAgICAgIHRoaXMudGFnSGVhZGVyID0gdGFnSGVhZGVyO1xuICAgICAgICB0aGlzLmxlbiA9IHRhZ0hlYWRlci5jaHVua1NpemU7XG4gICAgICAgIHRoaXMubGVuICs9IHRoaXMubGVuICYgMTsgLy8gaWYgaXQgaXMgYW4gb2RkIGxlbmd0aCwgcm91bmQgdXAgdG8gZXZlblxuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbi5TdHJpbmdUeXBlKHRoaXMudGFnSGVhZGVyLmNodW5rU2l6ZSwgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmKTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RJbmZvVGFnVmFsdWUgPSBMaXN0SW5mb1RhZ1ZhbHVlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/riff/RiffChunk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RiffInfoTagMapper = exports.riffInfoTagMap = void 0;\nconst GenericTagMapper_1 = __webpack_require__(/*! ../common/GenericTagMapper */ \"(ssr)/./node_modules/music-metadata/lib/common/GenericTagMapper.js\");\n/**\n * RIFF Info Tags; part of the EXIF 2.3\n * Ref: http://owl.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info\n */\nexports.riffInfoTagMap = {\n    IART: 'artist',\n    ICRD: 'date',\n    INAM: 'title',\n    TITL: 'title',\n    IPRD: 'album',\n    ITRK: 'track',\n    IPRT: 'track',\n    COMM: 'comment',\n    ICMT: 'comment',\n    ICNT: 'releasecountry',\n    GNRE: 'genre',\n    IWRI: 'writer',\n    RATE: 'rating',\n    YEAR: 'year',\n    ISFT: 'encodedby',\n    CODE: 'encodedby',\n    TURL: 'website',\n    IGNR: 'genre',\n    IENG: 'engineer',\n    ITCH: 'technician',\n    IMED: 'media',\n    IRPD: 'album' // Product, where the file was intended for\n};\nclass RiffInfoTagMapper extends GenericTagMapper_1.CommonTagMapper {\n    constructor() {\n        super(['exif'], exports.riffInfoTagMap);\n    }\n}\nexports.RiffInfoTagMapper = RiffInfoTagMapper;\n//# sourceMappingURL=RiffInfoTagMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3JpZmYvUmlmZkluZm9UYWdNYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsc0JBQXNCO0FBQ2xELDJCQUEyQixtQkFBTyxDQUFDLHNHQUE0QjtBQUMvRDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3JpZmYvUmlmZkluZm9UYWdNYXAuanM/ZWJlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmlmZkluZm9UYWdNYXBwZXIgPSBleHBvcnRzLnJpZmZJbmZvVGFnTWFwID0gdm9pZCAwO1xuY29uc3QgR2VuZXJpY1RhZ01hcHBlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9HZW5lcmljVGFnTWFwcGVyXCIpO1xuLyoqXG4gKiBSSUZGIEluZm8gVGFnczsgcGFydCBvZiB0aGUgRVhJRiAyLjNcbiAqIFJlZjogaHR0cDovL293bC5waHkucXVlZW5zdS5jYS9+cGhpbC9leGlmdG9vbC9UYWdOYW1lcy9SSUZGLmh0bWwjSW5mb1xuICovXG5leHBvcnRzLnJpZmZJbmZvVGFnTWFwID0ge1xuICAgIElBUlQ6ICdhcnRpc3QnLFxuICAgIElDUkQ6ICdkYXRlJyxcbiAgICBJTkFNOiAndGl0bGUnLFxuICAgIFRJVEw6ICd0aXRsZScsXG4gICAgSVBSRDogJ2FsYnVtJyxcbiAgICBJVFJLOiAndHJhY2snLFxuICAgIElQUlQ6ICd0cmFjaycsXG4gICAgQ09NTTogJ2NvbW1lbnQnLFxuICAgIElDTVQ6ICdjb21tZW50JyxcbiAgICBJQ05UOiAncmVsZWFzZWNvdW50cnknLFxuICAgIEdOUkU6ICdnZW5yZScsXG4gICAgSVdSSTogJ3dyaXRlcicsXG4gICAgUkFURTogJ3JhdGluZycsXG4gICAgWUVBUjogJ3llYXInLFxuICAgIElTRlQ6ICdlbmNvZGVkYnknLFxuICAgIENPREU6ICdlbmNvZGVkYnknLFxuICAgIFRVUkw6ICd3ZWJzaXRlJyxcbiAgICBJR05SOiAnZ2VucmUnLFxuICAgIElFTkc6ICdlbmdpbmVlcicsXG4gICAgSVRDSDogJ3RlY2huaWNpYW4nLFxuICAgIElNRUQ6ICdtZWRpYScsXG4gICAgSVJQRDogJ2FsYnVtJyAvLyBQcm9kdWN0LCB3aGVyZSB0aGUgZmlsZSB3YXMgaW50ZW5kZWQgZm9yXG59O1xuY2xhc3MgUmlmZkluZm9UYWdNYXBwZXIgZXh0ZW5kcyBHZW5lcmljVGFnTWFwcGVyXzEuQ29tbW9uVGFnTWFwcGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoWydleGlmJ10sIGV4cG9ydHMucmlmZkluZm9UYWdNYXApO1xuICAgIH1cbn1cbmV4cG9ydHMuUmlmZkluZm9UYWdNYXBwZXIgPSBSaWZmSW5mb1RhZ01hcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJpZmZJbmZvVGFnTWFwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/riff/RiffInfoTagMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/type.js":
/*!*************************************************!*\
  !*** ./node_modules/music-metadata/lib/type.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TrackType = void 0;\nvar types_1 = __webpack_require__(/*! ./matroska/types */ \"(ssr)/./node_modules/music-metadata/lib/matroska/types.js\");\nObject.defineProperty(exports, \"TrackType\", ({ enumerable: true, get: function () { return types_1.TrackType; } }));\n//# sourceMappingURL=type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGNBQWMsbUJBQU8sQ0FBQyxtRkFBa0I7QUFDeEMsNkNBQTRDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2pIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3R5cGUuanM/ZTRiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHJhY2tUeXBlID0gdm9pZCAwO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi9tYXRyb3NrYS90eXBlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRyYWNrVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5UcmFja1R5cGU7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/wav/BwfChunk.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/BwfChunk.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BroadcastAudioExtensionChunk = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst Util_1 = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\n/**\n * Broadcast Audio Extension Chunk\n * Ref: https://tech.ebu.ch/docs/tech/tech3285.pdf\n */\nexports.BroadcastAudioExtensionChunk = {\n    len: 420,\n    get: (uint8array, off) => {\n        return {\n            description: (0, Util_1.stripNulls)(new Token.StringType(256, 'ascii').get(uint8array, off)).trim(),\n            originator: (0, Util_1.stripNulls)(new Token.StringType(32, 'ascii').get(uint8array, off + 256)).trim(),\n            originatorReference: (0, Util_1.stripNulls)(new Token.StringType(32, 'ascii').get(uint8array, off + 288)).trim(),\n            originationDate: (0, Util_1.stripNulls)(new Token.StringType(10, 'ascii').get(uint8array, off + 320)).trim(),\n            originationTime: (0, Util_1.stripNulls)(new Token.StringType(8, 'ascii').get(uint8array, off + 330)).trim(),\n            timeReferenceLow: Token.UINT32_LE.get(uint8array, off + 338),\n            timeReferenceHigh: Token.UINT32_LE.get(uint8array, off + 342),\n            version: Token.UINT16_LE.get(uint8array, off + 346),\n            umid: new Token.Uint8ArrayType(64).get(uint8array, off + 348),\n            loudnessValue: Token.UINT16_LE.get(uint8array, off + 412),\n            maxTruePeakLevel: Token.UINT16_LE.get(uint8array, off + 414),\n            maxMomentaryLoudness: Token.UINT16_LE.get(uint8array, off + 416),\n            maxShortTermLoudness: Token.UINT16_LE.get(uint8array, off + 418)\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdi9Cd2ZDaHVuay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEMsY0FBYyxtQkFBTyxDQUFDLGtFQUFhO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvd2F2L0J3ZkNodW5rLmpzPzQ5MDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJyb2FkY2FzdEF1ZGlvRXh0ZW5zaW9uQ2h1bmsgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IFV0aWxfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vVXRpbFwiKTtcbi8qKlxuICogQnJvYWRjYXN0IEF1ZGlvIEV4dGVuc2lvbiBDaHVua1xuICogUmVmOiBodHRwczovL3RlY2guZWJ1LmNoL2RvY3MvdGVjaC90ZWNoMzI4NS5wZGZcbiAqL1xuZXhwb3J0cy5Ccm9hZGNhc3RBdWRpb0V4dGVuc2lvbkNodW5rID0ge1xuICAgIGxlbjogNDIwLFxuICAgIGdldDogKHVpbnQ4YXJyYXksIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICgwLCBVdGlsXzEuc3RyaXBOdWxscykobmV3IFRva2VuLlN0cmluZ1R5cGUoMjU2LCAnYXNjaWknKS5nZXQodWludDhhcnJheSwgb2ZmKSkudHJpbSgpLFxuICAgICAgICAgICAgb3JpZ2luYXRvcjogKDAsIFV0aWxfMS5zdHJpcE51bGxzKShuZXcgVG9rZW4uU3RyaW5nVHlwZSgzMiwgJ2FzY2lpJykuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDI1NikpLnRyaW0oKSxcbiAgICAgICAgICAgIG9yaWdpbmF0b3JSZWZlcmVuY2U6ICgwLCBVdGlsXzEuc3RyaXBOdWxscykobmV3IFRva2VuLlN0cmluZ1R5cGUoMzIsICdhc2NpaScpLmdldCh1aW50OGFycmF5LCBvZmYgKyAyODgpKS50cmltKCksXG4gICAgICAgICAgICBvcmlnaW5hdGlvbkRhdGU6ICgwLCBVdGlsXzEuc3RyaXBOdWxscykobmV3IFRva2VuLlN0cmluZ1R5cGUoMTAsICdhc2NpaScpLmdldCh1aW50OGFycmF5LCBvZmYgKyAzMjApKS50cmltKCksXG4gICAgICAgICAgICBvcmlnaW5hdGlvblRpbWU6ICgwLCBVdGlsXzEuc3RyaXBOdWxscykobmV3IFRva2VuLlN0cmluZ1R5cGUoOCwgJ2FzY2lpJykuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDMzMCkpLnRyaW0oKSxcbiAgICAgICAgICAgIHRpbWVSZWZlcmVuY2VMb3c6IFRva2VuLlVJTlQzMl9MRS5nZXQodWludDhhcnJheSwgb2ZmICsgMzM4KSxcbiAgICAgICAgICAgIHRpbWVSZWZlcmVuY2VIaWdoOiBUb2tlbi5VSU5UMzJfTEUuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDM0MiksXG4gICAgICAgICAgICB2ZXJzaW9uOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDM0NiksXG4gICAgICAgICAgICB1bWlkOiBuZXcgVG9rZW4uVWludDhBcnJheVR5cGUoNjQpLmdldCh1aW50OGFycmF5LCBvZmYgKyAzNDgpLFxuICAgICAgICAgICAgbG91ZG5lc3NWYWx1ZTogVG9rZW4uVUlOVDE2X0xFLmdldCh1aW50OGFycmF5LCBvZmYgKyA0MTIpLFxuICAgICAgICAgICAgbWF4VHJ1ZVBlYWtMZXZlbDogVG9rZW4uVUlOVDE2X0xFLmdldCh1aW50OGFycmF5LCBvZmYgKyA0MTQpLFxuICAgICAgICAgICAgbWF4TW9tZW50YXJ5TG91ZG5lc3M6IFRva2VuLlVJTlQxNl9MRS5nZXQodWludDhhcnJheSwgb2ZmICsgNDE2KSxcbiAgICAgICAgICAgIG1heFNob3J0VGVybUxvdWRuZXNzOiBUb2tlbi5VSU5UMTZfTEUuZ2V0KHVpbnQ4YXJyYXksIG9mZiArIDQxOClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/wav/BwfChunk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/wav/WaveChunk.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/WaveChunk.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FactChunk = exports.Format = exports.WaveFormat = void 0;\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd317599(v=vs.85).aspx\n */\nvar WaveFormat;\n(function (WaveFormat) {\n    WaveFormat[WaveFormat[\"PCM\"] = 1] = \"PCM\";\n    // MPEG-4 and AAC Audio Types\n    WaveFormat[WaveFormat[\"ADPCM\"] = 2] = \"ADPCM\";\n    WaveFormat[WaveFormat[\"IEEE_FLOAT\"] = 3] = \"IEEE_FLOAT\";\n    WaveFormat[WaveFormat[\"MPEG_ADTS_AAC\"] = 5632] = \"MPEG_ADTS_AAC\";\n    WaveFormat[WaveFormat[\"MPEG_LOAS\"] = 5634] = \"MPEG_LOAS\";\n    WaveFormat[WaveFormat[\"RAW_AAC1\"] = 255] = \"RAW_AAC1\";\n    // Dolby Audio Types\n    WaveFormat[WaveFormat[\"DOLBY_AC3_SPDIF\"] = 146] = \"DOLBY_AC3_SPDIF\";\n    WaveFormat[WaveFormat[\"DVM\"] = 8192] = \"DVM\";\n    WaveFormat[WaveFormat[\"RAW_SPORT\"] = 576] = \"RAW_SPORT\";\n    WaveFormat[WaveFormat[\"ESST_AC3\"] = 577] = \"ESST_AC3\";\n    WaveFormat[WaveFormat[\"DRM\"] = 9] = \"DRM\";\n    WaveFormat[WaveFormat[\"DTS2\"] = 8193] = \"DTS2\";\n    WaveFormat[WaveFormat[\"MPEG\"] = 80] = \"MPEG\";\n})(WaveFormat = exports.WaveFormat || (exports.WaveFormat = {}));\n/**\n * format chunk; chunk-id is \"fmt \"\n * http://soundfile.sapp.org/doc/WaveFormat/\n */\nclass Format {\n    constructor(header) {\n        if (header.chunkSize < 16)\n            throw new Error('Invalid chunk size');\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            wFormatTag: buf.readUInt16LE(off),\n            nChannels: buf.readUInt16LE(off + 2),\n            nSamplesPerSec: buf.readUInt32LE(off + 4),\n            nAvgBytesPerSec: buf.readUInt32LE(off + 8),\n            nBlockAlign: buf.readUInt16LE(off + 12),\n            wBitsPerSample: buf.readUInt16LE(off + 14)\n        };\n    }\n}\nexports.Format = Format;\n/**\n * Fact chunk; chunk-id is \"fact\"\n * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\n * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file\n */\nclass FactChunk {\n    constructor(header) {\n        if (header.chunkSize < 4) {\n            throw new Error('Invalid fact chunk size.');\n        }\n        this.len = header.chunkSize;\n    }\n    get(buf, off) {\n        return {\n            dwSampleLength: buf.readUInt32LE(off)\n        };\n    }\n}\nexports.FactChunk = FactChunk;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdi9XYXZlQ2h1bmsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsY0FBYyxHQUFHLGtCQUFrQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvd2F2L1dhdmVDaHVuay5qcz85Y2I5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GYWN0Q2h1bmsgPSBleHBvcnRzLkZvcm1hdCA9IGV4cG9ydHMuV2F2ZUZvcm1hdCA9IHZvaWQgMDtcbi8qKlxuICogUmVmOiBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9kZDMxNzU5OSh2PXZzLjg1KS5hc3B4XG4gKi9cbnZhciBXYXZlRm9ybWF0O1xuKGZ1bmN0aW9uIChXYXZlRm9ybWF0KSB7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiUENNXCJdID0gMV0gPSBcIlBDTVwiO1xuICAgIC8vIE1QRUctNCBhbmQgQUFDIEF1ZGlvIFR5cGVzXG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiQURQQ01cIl0gPSAyXSA9IFwiQURQQ01cIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJJRUVFX0ZMT0FUXCJdID0gM10gPSBcIklFRUVfRkxPQVRcIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJNUEVHX0FEVFNfQUFDXCJdID0gNTYzMl0gPSBcIk1QRUdfQURUU19BQUNcIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJNUEVHX0xPQVNcIl0gPSA1NjM0XSA9IFwiTVBFR19MT0FTXCI7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiUkFXX0FBQzFcIl0gPSAyNTVdID0gXCJSQVdfQUFDMVwiO1xuICAgIC8vIERvbGJ5IEF1ZGlvIFR5cGVzXG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiRE9MQllfQUMzX1NQRElGXCJdID0gMTQ2XSA9IFwiRE9MQllfQUMzX1NQRElGXCI7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiRFZNXCJdID0gODE5Ml0gPSBcIkRWTVwiO1xuICAgIFdhdmVGb3JtYXRbV2F2ZUZvcm1hdFtcIlJBV19TUE9SVFwiXSA9IDU3Nl0gPSBcIlJBV19TUE9SVFwiO1xuICAgIFdhdmVGb3JtYXRbV2F2ZUZvcm1hdFtcIkVTU1RfQUMzXCJdID0gNTc3XSA9IFwiRVNTVF9BQzNcIjtcbiAgICBXYXZlRm9ybWF0W1dhdmVGb3JtYXRbXCJEUk1cIl0gPSA5XSA9IFwiRFJNXCI7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiRFRTMlwiXSA9IDgxOTNdID0gXCJEVFMyXCI7XG4gICAgV2F2ZUZvcm1hdFtXYXZlRm9ybWF0W1wiTVBFR1wiXSA9IDgwXSA9IFwiTVBFR1wiO1xufSkoV2F2ZUZvcm1hdCA9IGV4cG9ydHMuV2F2ZUZvcm1hdCB8fCAoZXhwb3J0cy5XYXZlRm9ybWF0ID0ge30pKTtcbi8qKlxuICogZm9ybWF0IGNodW5rOyBjaHVuay1pZCBpcyBcImZtdCBcIlxuICogaHR0cDovL3NvdW5kZmlsZS5zYXBwLm9yZy9kb2MvV2F2ZUZvcm1hdC9cbiAqL1xuY2xhc3MgRm9ybWF0IHtcbiAgICBjb25zdHJ1Y3RvcihoZWFkZXIpIHtcbiAgICAgICAgaWYgKGhlYWRlci5jaHVua1NpemUgPCAxNilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaHVuayBzaXplJyk7XG4gICAgICAgIHRoaXMubGVuID0gaGVhZGVyLmNodW5rU2l6ZTtcbiAgICB9XG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3Rm9ybWF0VGFnOiBidWYucmVhZFVJbnQxNkxFKG9mZiksXG4gICAgICAgICAgICBuQ2hhbm5lbHM6IGJ1Zi5yZWFkVUludDE2TEUob2ZmICsgMiksXG4gICAgICAgICAgICBuU2FtcGxlc1BlclNlYzogYnVmLnJlYWRVSW50MzJMRShvZmYgKyA0KSxcbiAgICAgICAgICAgIG5BdmdCeXRlc1BlclNlYzogYnVmLnJlYWRVSW50MzJMRShvZmYgKyA4KSxcbiAgICAgICAgICAgIG5CbG9ja0FsaWduOiBidWYucmVhZFVJbnQxNkxFKG9mZiArIDEyKSxcbiAgICAgICAgICAgIHdCaXRzUGVyU2FtcGxlOiBidWYucmVhZFVJbnQxNkxFKG9mZiArIDE0KVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRm9ybWF0ID0gRm9ybWF0O1xuLyoqXG4gKiBGYWN0IGNodW5rOyBjaHVuay1pZCBpcyBcImZhY3RcIlxuICogaHR0cDovL3d3dy1tbXNwLmVjZS5tY2dpbGwuY2EvRG9jdW1lbnRzL0F1ZGlvRm9ybWF0cy9XQVZFL1dBVkUuaHRtbFxuICogaHR0cDovL3d3dy5yZWNvcmRpbmdibG9ncy5jb20vd2lraS9mYWN0LWNodW5rLW9mLWEtd2F2ZS1maWxlXG4gKi9cbmNsYXNzIEZhY3RDaHVuayB7XG4gICAgY29uc3RydWN0b3IoaGVhZGVyKSB7XG4gICAgICAgIGlmIChoZWFkZXIuY2h1bmtTaXplIDwgNCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZhY3QgY2h1bmsgc2l6ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbiA9IGhlYWRlci5jaHVua1NpemU7XG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZHdTYW1wbGVMZW5ndGg6IGJ1Zi5yZWFkVUludDMyTEUob2ZmKVxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRmFjdENodW5rID0gRmFjdENodW5rO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/wav/WaveChunk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/wav/WaveParser.js":
/*!***********************************************************!*\
  !*** ./node_modules/music-metadata/lib/wav/WaveParser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaveParser = void 0;\nconst strtok3 = __webpack_require__(/*! strtok3/lib/core */ \"(ssr)/./node_modules/strtok3/lib/core.js\");\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst riff = __webpack_require__(/*! ../riff/RiffChunk */ \"(ssr)/./node_modules/music-metadata/lib/riff/RiffChunk.js\");\nconst WaveChunk = __webpack_require__(/*! ./../wav/WaveChunk */ \"(ssr)/./node_modules/music-metadata/lib/wav/WaveChunk.js\");\nconst ID3v2Parser_1 = __webpack_require__(/*! ../id3v2/ID3v2Parser */ \"(ssr)/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\nconst util = __webpack_require__(/*! ../common/Util */ \"(ssr)/./node_modules/music-metadata/lib/common/Util.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst BwfChunk_1 = __webpack_require__(/*! ../wav/BwfChunk */ \"(ssr)/./node_modules/music-metadata/lib/wav/BwfChunk.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:RIFF');\n/**\n * Resource Interchange File Format (RIFF) Parser\n *\n * WAVE PCM soundfile format\n *\n * Ref:\n * - http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html\n * - http://soundfile.sapp.org/doc/WaveFormat\n *\n * ToDo: Split WAVE part from RIFF parser\n */\nclass WaveParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const riffHeader = await this.tokenizer.readToken(riff.Header);\n        debug(`pos=${this.tokenizer.position}, parse: chunkID=${riffHeader.chunkID}`);\n        if (riffHeader.chunkID !== 'RIFF')\n            return; // Not RIFF format\n        return this.parseRiffChunk(riffHeader.chunkSize).catch(err => {\n            if (!(err instanceof strtok3.EndOfStreamError)) {\n                throw err;\n            }\n        });\n    }\n    async parseRiffChunk(chunkSize) {\n        const type = await this.tokenizer.readToken(FourCC_1.FourCcToken);\n        this.metadata.setFormat('container', type);\n        switch (type) {\n            case 'WAVE':\n                return this.readWaveChunk(chunkSize - FourCC_1.FourCcToken.len);\n            default:\n                throw new Error(`Unsupported RIFF format: RIFF/${type}`);\n        }\n    }\n    async readWaveChunk(remaining) {\n        while (remaining >= riff.Header.len) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            remaining -= riff.Header.len + header.chunkSize;\n            if (header.chunkSize > remaining) {\n                this.metadata.addWarning('Data chunk size exceeds file size');\n            }\n            this.header = header;\n            debug(`pos=${this.tokenizer.position}, readChunk: chunkID=RIFF/WAVE/${header.chunkID}`);\n            switch (header.chunkID) {\n                case 'LIST':\n                    await this.parseListTag(header);\n                    break;\n                case 'fact': // extended Format chunk,\n                    this.metadata.setFormat('lossless', false);\n                    this.fact = await this.tokenizer.readToken(new WaveChunk.FactChunk(header));\n                    break;\n                case 'fmt ': // The Util Chunk, non-PCM Formats\n                    const fmt = await this.tokenizer.readToken(new WaveChunk.Format(header));\n                    let subFormat = WaveChunk.WaveFormat[fmt.wFormatTag];\n                    if (!subFormat) {\n                        debug('WAVE/non-PCM format=' + fmt.wFormatTag);\n                        subFormat = 'non-PCM (' + fmt.wFormatTag + ')';\n                    }\n                    this.metadata.setFormat('codec', subFormat);\n                    this.metadata.setFormat('bitsPerSample', fmt.wBitsPerSample);\n                    this.metadata.setFormat('sampleRate', fmt.nSamplesPerSec);\n                    this.metadata.setFormat('numberOfChannels', fmt.nChannels);\n                    this.metadata.setFormat('bitrate', fmt.nBlockAlign * fmt.nSamplesPerSec * 8);\n                    this.blockAlign = fmt.nBlockAlign;\n                    break;\n                case 'id3 ': // The way Picard, FooBar currently stores, ID3 meta-data\n                case 'ID3 ': // The way Mp3Tags stores ID3 meta-data\n                    const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(header.chunkSize));\n                    const rst = strtok3.fromBuffer(id3_data);\n                    await new ID3v2Parser_1.ID3v2Parser().parse(this.metadata, rst, this.options);\n                    break;\n                case 'data': // PCM-data\n                    if (this.metadata.format.lossless !== false) {\n                        this.metadata.setFormat('lossless', true);\n                    }\n                    let chunkSize = header.chunkSize;\n                    if (this.tokenizer.fileInfo.size) {\n                        const calcRemaining = this.tokenizer.fileInfo.size - this.tokenizer.position;\n                        if (calcRemaining < chunkSize) {\n                            this.metadata.addWarning('data chunk length exceeding file length');\n                            chunkSize = calcRemaining;\n                        }\n                    }\n                    const numberOfSamples = this.fact ? this.fact.dwSampleLength : (chunkSize === 0xffffffff ? undefined : chunkSize / this.blockAlign);\n                    if (numberOfSamples) {\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        this.metadata.setFormat('duration', numberOfSamples / this.metadata.format.sampleRate);\n                    }\n                    if (this.metadata.format.codec === 'ADPCM') { // ADPCM is 4 bits lossy encoding resulting in 352kbps\n                        this.metadata.setFormat('bitrate', 352000);\n                    }\n                    else {\n                        this.metadata.setFormat('bitrate', this.blockAlign * this.metadata.format.sampleRate * 8);\n                    }\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                case 'bext': // Broadcast Audio Extension chunk\thttps://tech.ebu.ch/docs/tech/tech3285.pdf\n                    const bext = await this.tokenizer.readToken(BwfChunk_1.BroadcastAudioExtensionChunk);\n                    Object.keys(bext).forEach(key => {\n                        this.metadata.addTag('exif', 'bext.' + key, bext[key]);\n                    });\n                    const bextRemaining = header.chunkSize - BwfChunk_1.BroadcastAudioExtensionChunk.len;\n                    await this.tokenizer.ignore(bextRemaining);\n                    break;\n                case '\\x00\\x00\\x00\\x00': // padding ??\n                    debug(`Ignore padding chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);\n                    await this.tokenizer.ignore(header.chunkSize);\n                    break;\n                default:\n                    debug(`Ignore chunk: RIFF/${header.chunkID} of ${header.chunkSize} bytes`);\n                    this.metadata.addWarning('Ignore chunk: RIFF/' + header.chunkID);\n                    await this.tokenizer.ignore(header.chunkSize);\n            }\n            if (this.header.chunkSize % 2 === 1) {\n                debug('Read odd padding byte'); // https://wiki.multimedia.cx/index.php/RIFF\n                await this.tokenizer.ignore(1);\n            }\n        }\n    }\n    async parseListTag(listHeader) {\n        const listType = await this.tokenizer.readToken(new Token.StringType(4, 'binary'));\n        debug('pos=%s, parseListTag: chunkID=RIFF/WAVE/LIST/%s', this.tokenizer.position, listType);\n        switch (listType) {\n            case 'INFO':\n                return this.parseRiffInfoTags(listHeader.chunkSize - 4);\n            case 'adtl':\n            default:\n                this.metadata.addWarning('Ignore chunk: RIFF/WAVE/LIST/' + listType);\n                debug('Ignoring chunkID=RIFF/WAVE/LIST/' + listType);\n                return this.tokenizer.ignore(listHeader.chunkSize - 4).then();\n        }\n    }\n    async parseRiffInfoTags(chunkSize) {\n        while (chunkSize >= 8) {\n            const header = await this.tokenizer.readToken(riff.Header);\n            const valueToken = new riff.ListInfoTagValue(header);\n            const value = await this.tokenizer.readToken(valueToken);\n            this.addTag(header.chunkID, util.stripNulls(value));\n            chunkSize -= (8 + valueToken.len);\n        }\n        if (chunkSize !== 0) {\n            throw Error('Illegal remaining size: ' + chunkSize);\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag('exif', id, value);\n    }\n}\nexports.WaveParser = WaveParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/wav/WaveParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/wavpack/WavPackParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/music-metadata/lib/wavpack/WavPackParser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WavPackParser = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst APEv2Parser_1 = __webpack_require__(/*! ../apev2/APEv2Parser */ \"(ssr)/./node_modules/music-metadata/lib/apev2/APEv2Parser.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst BasicParser_1 = __webpack_require__(/*! ../common/BasicParser */ \"(ssr)/./node_modules/music-metadata/lib/common/BasicParser.js\");\nconst WavPackToken_1 = __webpack_require__(/*! ./WavPackToken */ \"(ssr)/./node_modules/music-metadata/lib/wavpack/WavPackToken.js\");\nconst debug_1 = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nconst debug = (0, debug_1.default)('music-metadata:parser:WavPack');\n/**\n * WavPack Parser\n */\nclass WavPackParser extends BasicParser_1.BasicParser {\n    async parse() {\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new Error('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\n        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param remainingLength\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << data.readUInt8(0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new Error('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remainingLength}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remainingLength !== 0)\n            throw new Error('metadata-sub-block should fit it remaining length');\n    }\n}\nexports.WavPackParser = WavPackParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/wavpack/WavPackParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/lib/wavpack/WavPackToken.js":
/*!*****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/wavpack/WavPackToken.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WavPack = void 0;\nconst Token = __webpack_require__(/*! token-types */ \"(ssr)/./node_modules/token-types/lib/index.js\");\nconst FourCC_1 = __webpack_require__(/*! ../common/FourCC */ \"(ssr)/./node_modules/music-metadata/lib/common/FourCC.js\");\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\n    48000, 64000, 88200, 96000, 192000, -1];\nclass WavPack {\n    static isBitSet(flags, bitOffset) {\n        return WavPack.getBitAllignedNumber(flags, bitOffset, 1) === 1;\n    }\n    static getBitAllignedNumber(flags, bitOffset, len) {\n        return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\n    }\n}\n/**\n * WavPack Block Header\n *\n * 32-byte little-endian header at the front of every WavPack block\n *\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\n */\nWavPack.BlockHeaderToken = {\n    len: 32,\n    get: (buf, off) => {\n        const flags = Token.UINT32_LE.get(buf, off + 24);\n        const res = {\n            // should equal 'wvpk'\n            BlockID: FourCC_1.FourCcToken.get(buf, off),\n            //  0x402 to 0x410 are valid for decode\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\n            //  0x402 (1026) to 0x410 are valid for decode\n            version: Token.UINT16_LE.get(buf, off + 8),\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\n            // 40-bit block_index\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\n            // various flags for id and decoding\n            flags: {\n                bitsPerSample: (1 + WavPack.getBitAllignedNumber(flags, 0, 2)) * 8,\n                isMono: WavPack.isBitSet(flags, 2),\n                isHybrid: WavPack.isBitSet(flags, 3),\n                isJointStereo: WavPack.isBitSet(flags, 4),\n                crossChannel: WavPack.isBitSet(flags, 5),\n                hybridNoiseShaping: WavPack.isBitSet(flags, 6),\n                floatingPoint: WavPack.isBitSet(flags, 7),\n                samplingRate: SampleRates[WavPack.getBitAllignedNumber(flags, 23, 4)],\n                isDSD: WavPack.isBitSet(flags, 31)\n            },\n            // crc for actual decoded data\n            crc: new Token.Uint8ArrayType(4).get(buf, off + 28)\n        };\n        if (res.flags.isDSD) {\n            res.totalSamples *= 8;\n        }\n        return res;\n    }\n};\n/**\n * 3.0 Metadata Sub-Blocks\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\n */\nWavPack.MetadataIdToken = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            functionId: WavPack.getBitAllignedNumber(buf[off], 0, 6),\n            isOptional: WavPack.isBitSet(buf[off], 5),\n            isOddSize: WavPack.isBitSet(buf[off], 6),\n            largeBlock: WavPack.isBitSet(buf[off], 7)\n        };\n    }\n};\nexports.WavPack = WavPack;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdnBhY2svV2F2UGFja1Rva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsa0VBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMsa0ZBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzYWZpbzEvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL3dhdnBhY2svV2F2UGFja1Rva2VuLmpzPzU3MWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhdlBhY2sgPSB2b2lkIDA7XG5jb25zdCBUb2tlbiA9IHJlcXVpcmUoXCJ0b2tlbi10eXBlc1wiKTtcbmNvbnN0IEZvdXJDQ18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9Gb3VyQ0NcIik7XG5jb25zdCBTYW1wbGVSYXRlcyA9IFs2MDAwLCA4MDAwLCA5NjAwLCAxMTAyNSwgMTIwMDAsIDE2MDAwLCAyMjA1MCwgMjQwMDAsIDMyMDAwLCA0NDEwMCxcbiAgICA0ODAwMCwgNjQwMDAsIDg4MjAwLCA5NjAwMCwgMTkyMDAwLCAtMV07XG5jbGFzcyBXYXZQYWNrIHtcbiAgICBzdGF0aWMgaXNCaXRTZXQoZmxhZ3MsIGJpdE9mZnNldCkge1xuICAgICAgICByZXR1cm4gV2F2UGFjay5nZXRCaXRBbGxpZ25lZE51bWJlcihmbGFncywgYml0T2Zmc2V0LCAxKSA9PT0gMTtcbiAgICB9XG4gICAgc3RhdGljIGdldEJpdEFsbGlnbmVkTnVtYmVyKGZsYWdzLCBiaXRPZmZzZXQsIGxlbikge1xuICAgICAgICByZXR1cm4gKGZsYWdzID4+PiBiaXRPZmZzZXQpICYgKDB4ZmZmZmZmZmYgPj4+ICgzMiAtIGxlbikpO1xuICAgIH1cbn1cbi8qKlxuICogV2F2UGFjayBCbG9jayBIZWFkZXJcbiAqXG4gKiAzMi1ieXRlIGxpdHRsZS1lbmRpYW4gaGVhZGVyIGF0IHRoZSBmcm9udCBvZiBldmVyeSBXYXZQYWNrIGJsb2NrXG4gKlxuICogUmVmOiBodHRwOi8vd3d3LndhdnBhY2suY29tL1dhdlBhY2s1RmlsZUZvcm1hdC5wZGYgKHBhZ2UgMi82OiAyLjAgXCJCbG9jayBIZWFkZXJcIilcbiAqL1xuV2F2UGFjay5CbG9ja0hlYWRlclRva2VuID0ge1xuICAgIGxlbjogMzIsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgY29uc3QgZmxhZ3MgPSBUb2tlbi5VSU5UMzJfTEUuZ2V0KGJ1Ziwgb2ZmICsgMjQpO1xuICAgICAgICBjb25zdCByZXMgPSB7XG4gICAgICAgICAgICAvLyBzaG91bGQgZXF1YWwgJ3d2cGsnXG4gICAgICAgICAgICBCbG9ja0lEOiBGb3VyQ0NfMS5Gb3VyQ2NUb2tlbi5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgLy8gIDB4NDAyIHRvIDB4NDEwIGFyZSB2YWxpZCBmb3IgZGVjb2RlXG4gICAgICAgICAgICBibG9ja1NpemU6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIC8vICAweDQwMiAoMTAyNikgdG8gMHg0MTAgYXJlIHZhbGlkIGZvciBkZWNvZGVcbiAgICAgICAgICAgIHZlcnNpb246IFRva2VuLlVJTlQxNl9MRS5nZXQoYnVmLCBvZmYgKyA4KSxcbiAgICAgICAgICAgIC8vICA0MC1iaXQgdG90YWwgc2FtcGxlcyBmb3IgZW50aXJlIGZpbGUgKGlmIGJsb2NrX2luZGV4ID09IDAgYW5kIGEgdmFsdWUgb2YgLTEgaW5kaWNhdGVzIGFuIHVua25vd24gbGVuZ3RoKVxuICAgICAgICAgICAgdG90YWxTYW1wbGVzOiAvKiByZXBsYWNlIHdpdGggYmlnaW50PyAoVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgMTEpIDw8IDMyKSArICovIFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAxMiksXG4gICAgICAgICAgICAvLyA0MC1iaXQgYmxvY2tfaW5kZXhcbiAgICAgICAgICAgIGJsb2NrSW5kZXg6IC8qIHJlcGxhY2Ugd2l0aCBiaWdpbnQ/IChUb2tlbi5VSU5UOC5nZXQoYnVmLCBvZmYgKyAxMCkgPDwgMzIpICsgKi8gVG9rZW4uVUlOVDMyX0xFLmdldChidWYsIG9mZiArIDE2KSxcbiAgICAgICAgICAgIC8vIDQwLWJpdCB0b3RhbCBzYW1wbGVzIGZvciBlbnRpcmUgZmlsZSAoaWYgYmxvY2tfaW5kZXggPT0gMCBhbmQgYSB2YWx1ZSBvZiAtMSBpbmRpY2F0ZXMgYW4gdW5rbm93biBsZW5ndGgpXG4gICAgICAgICAgICBibG9ja1NhbXBsZXM6IFRva2VuLlVJTlQzMl9MRS5nZXQoYnVmLCBvZmYgKyAyMCksXG4gICAgICAgICAgICAvLyB2YXJpb3VzIGZsYWdzIGZvciBpZCBhbmQgZGVjb2RpbmdcbiAgICAgICAgICAgIGZsYWdzOiB7XG4gICAgICAgICAgICAgICAgYml0c1BlclNhbXBsZTogKDEgKyBXYXZQYWNrLmdldEJpdEFsbGlnbmVkTnVtYmVyKGZsYWdzLCAwLCAyKSkgKiA4LFxuICAgICAgICAgICAgICAgIGlzTW9ubzogV2F2UGFjay5pc0JpdFNldChmbGFncywgMiksXG4gICAgICAgICAgICAgICAgaXNIeWJyaWQ6IFdhdlBhY2suaXNCaXRTZXQoZmxhZ3MsIDMpLFxuICAgICAgICAgICAgICAgIGlzSm9pbnRTdGVyZW86IFdhdlBhY2suaXNCaXRTZXQoZmxhZ3MsIDQpLFxuICAgICAgICAgICAgICAgIGNyb3NzQ2hhbm5lbDogV2F2UGFjay5pc0JpdFNldChmbGFncywgNSksXG4gICAgICAgICAgICAgICAgaHlicmlkTm9pc2VTaGFwaW5nOiBXYXZQYWNrLmlzQml0U2V0KGZsYWdzLCA2KSxcbiAgICAgICAgICAgICAgICBmbG9hdGluZ1BvaW50OiBXYXZQYWNrLmlzQml0U2V0KGZsYWdzLCA3KSxcbiAgICAgICAgICAgICAgICBzYW1wbGluZ1JhdGU6IFNhbXBsZVJhdGVzW1dhdlBhY2suZ2V0Qml0QWxsaWduZWROdW1iZXIoZmxhZ3MsIDIzLCA0KV0sXG4gICAgICAgICAgICAgICAgaXNEU0Q6IFdhdlBhY2suaXNCaXRTZXQoZmxhZ3MsIDMxKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIGNyYyBmb3IgYWN0dWFsIGRlY29kZWQgZGF0YVxuICAgICAgICAgICAgY3JjOiBuZXcgVG9rZW4uVWludDhBcnJheVR5cGUoNCkuZ2V0KGJ1Ziwgb2ZmICsgMjgpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXMuZmxhZ3MuaXNEU0QpIHtcbiAgICAgICAgICAgIHJlcy50b3RhbFNhbXBsZXMgKj0gODtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG4vKipcbiAqIDMuMCBNZXRhZGF0YSBTdWItQmxvY2tzXG4gKiBSZWY6IGh0dHA6Ly93d3cud2F2cGFjay5jb20vV2F2UGFjazVGaWxlRm9ybWF0LnBkZiAocGFnZSA0LzY6IDMuMCBcIk1ldGFkYXRhIFN1Yi1CbG9ja1wiKVxuICovXG5XYXZQYWNrLk1ldGFkYXRhSWRUb2tlbiA9IHtcbiAgICBsZW46IDEsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uSWQ6IFdhdlBhY2suZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmW29mZl0sIDAsIDYpLFxuICAgICAgICAgICAgaXNPcHRpb25hbDogV2F2UGFjay5pc0JpdFNldChidWZbb2ZmXSwgNSksXG4gICAgICAgICAgICBpc09kZFNpemU6IFdhdlBhY2suaXNCaXRTZXQoYnVmW29mZl0sIDYpLFxuICAgICAgICAgICAgbGFyZ2VCbG9jazogV2F2UGFjay5pc0JpdFNldChidWZbb2ZmXSwgNylcbiAgICAgICAgfTtcbiAgICB9XG59O1xuZXhwb3J0cy5XYXZQYWNrID0gV2F2UGFjaztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/lib/wavpack/WavPackToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/music-metadata/node_modules/media-typer/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/music-metadata/node_modules/media-typer/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * media-typer\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\nexports.test = test\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  return string\n}\n\n/**\n * Test media type.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction test (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  return TYPE_REGEXP.test(string.toLowerCase())\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  return new MediaType(type, subtype, suffix)\n}\n\n/**\n * Class for MediaType object.\n * @public\n */\n\nfunction MediaType (type, subtype, suffix) {\n  this.type = type\n  this.subtype = subtype\n  this.suffix = suffix\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbm9kZV9tb2R1bGVzL21lZGlhLXR5cGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFDbEMsa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFDbEM7QUFDQSwyREFBMkQsTUFBTTtBQUNqRSx1REFBdUQsTUFBTTtBQUM3RCxxREFBcUQsTUFBTSxvQ0FBb0MsTUFBTTs7QUFFckc7QUFDQTtBQUNBOztBQUVBLGNBQWM7QUFDZCxhQUFhO0FBQ2IsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNhZmlvMS8uL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9ub2RlX21vZHVsZXMvbWVkaWEtdHlwZXIvaW5kZXguanM/YzE5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIG1lZGlhLXR5cGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxNC0yMDE3IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBSZWdFeHAgdG8gbWF0Y2ggdHlwZSBpbiBSRkMgNjgzOFxuICpcbiAqIHR5cGUtbmFtZSA9IHJlc3RyaWN0ZWQtbmFtZVxuICogc3VidHlwZS1uYW1lID0gcmVzdHJpY3RlZC1uYW1lXG4gKiByZXN0cmljdGVkLW5hbWUgPSByZXN0cmljdGVkLW5hbWUtZmlyc3QgKjEyNnJlc3RyaWN0ZWQtbmFtZS1jaGFyc1xuICogcmVzdHJpY3RlZC1uYW1lLWZpcnN0ICA9IEFMUEhBIC8gRElHSVRcbiAqIHJlc3RyaWN0ZWQtbmFtZS1jaGFycyAgPSBBTFBIQSAvIERJR0lUIC8gXCIhXCIgLyBcIiNcIiAvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgXCIkXCIgLyBcIiZcIiAvIFwiLVwiIC8gXCJeXCIgLyBcIl9cIlxuICogcmVzdHJpY3RlZC1uYW1lLWNoYXJzID0vIFwiLlwiIDsgQ2hhcmFjdGVycyBiZWZvcmUgZmlyc3QgZG90IGFsd2F5c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7IHNwZWNpZnkgYSBmYWNldCBuYW1lXG4gKiByZXN0cmljdGVkLW5hbWUtY2hhcnMgPS8gXCIrXCIgOyBDaGFyYWN0ZXJzIGFmdGVyIGxhc3QgcGx1cyBhbHdheXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOyBzcGVjaWZ5IGEgc3RydWN0dXJlZCBzeW50YXggc3VmZml4XG4gKiBBTFBIQSA9ICAleDQxLTVBIC8gJXg2MS03QSAgIDsgQS1aIC8gYS16XG4gKiBESUdJVCA9ICAleDMwLTM5ICAgICAgICAgICAgIDsgMC05XG4gKi9cbnZhciBTVUJUWVBFX05BTUVfUkVHRVhQID0gL15bQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8uLV17MCwxMjZ9JC9cbnZhciBUWVBFX05BTUVfUkVHRVhQID0gL15bQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8tXXswLDEyNn0kL1xudmFyIFRZUEVfUkVHRVhQID0gL14gKihbQS1aYS16MC05XVtBLVphLXowLTkhIyQmXl8tXXswLDEyNn0pXFwvKFtBLVphLXowLTldW0EtWmEtejAtOSEjJCZeXy4rLV17MCwxMjZ9KSAqJC9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdCA9IGZvcm1hdFxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5leHBvcnRzLnRlc3QgPSB0ZXN0XG5cbi8qKlxuICogRm9ybWF0IG9iamVjdCB0byBtZWRpYSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXQgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IG9iaiBpcyByZXF1aXJlZCcpXG4gIH1cblxuICB2YXIgc3VidHlwZSA9IG9iai5zdWJ0eXBlXG4gIHZhciBzdWZmaXggPSBvYmouc3VmZml4XG4gIHZhciB0eXBlID0gb2JqLnR5cGVcblxuICBpZiAoIXR5cGUgfHwgIVRZUEVfTkFNRV9SRUdFWFAudGVzdCh0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgdHlwZScpXG4gIH1cblxuICBpZiAoIXN1YnR5cGUgfHwgIVNVQlRZUEVfTkFNRV9SRUdFWFAudGVzdChzdWJ0eXBlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VidHlwZScpXG4gIH1cblxuICAvLyBmb3JtYXQgYXMgdHlwZS9zdWJ0eXBlXG4gIHZhciBzdHJpbmcgPSB0eXBlICsgJy8nICsgc3VidHlwZVxuXG4gIC8vIGFwcGVuZCArc3VmZml4XG4gIGlmIChzdWZmaXgpIHtcbiAgICBpZiAoIVRZUEVfTkFNRV9SRUdFWFAudGVzdChzdWZmaXgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1ZmZpeCcpXG4gICAgfVxuXG4gICAgc3RyaW5nICs9ICcrJyArIHN1ZmZpeFxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1xufVxuXG4vKipcbiAqIFRlc3QgbWVkaWEgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gdGVzdCAoc3RyaW5nKSB7XG4gIGlmICghc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc3RyaW5nIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCB0byBiZSBhIHN0cmluZycpXG4gIH1cblxuICByZXR1cm4gVFlQRV9SRUdFWFAudGVzdChzdHJpbmcudG9Mb3dlckNhc2UoKSlcbn1cblxuLyoqXG4gKiBQYXJzZSBtZWRpYSB0eXBlIHRvIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2UgKHN0cmluZykge1xuICBpZiAoIXN0cmluZykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHN0cmluZyBpcyByZXF1aXJlZCcpXG4gIH1cblxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzdHJpbmcgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIG1hdGNoID0gVFlQRV9SRUdFWFAuZXhlYyhzdHJpbmcudG9Mb3dlckNhc2UoKSlcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBtZWRpYSB0eXBlJylcbiAgfVxuXG4gIHZhciB0eXBlID0gbWF0Y2hbMV1cbiAgdmFyIHN1YnR5cGUgPSBtYXRjaFsyXVxuICB2YXIgc3VmZml4XG5cbiAgLy8gc3VmZml4IGFmdGVyIGxhc3QgK1xuICB2YXIgaW5kZXggPSBzdWJ0eXBlLmxhc3RJbmRleE9mKCcrJylcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHN1ZmZpeCA9IHN1YnR5cGUuc3Vic3RyKGluZGV4ICsgMSlcbiAgICBzdWJ0eXBlID0gc3VidHlwZS5zdWJzdHIoMCwgaW5kZXgpXG4gIH1cblxuICByZXR1cm4gbmV3IE1lZGlhVHlwZSh0eXBlLCBzdWJ0eXBlLCBzdWZmaXgpXG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIE1lZGlhVHlwZSBvYmplY3QuXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gTWVkaWFUeXBlICh0eXBlLCBzdWJ0eXBlLCBzdWZmaXgpIHtcbiAgdGhpcy50eXBlID0gdHlwZVxuICB0aGlzLnN1YnR5cGUgPSBzdWJ0eXBlXG4gIHRoaXMuc3VmZml4ID0gc3VmZml4XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata/node_modules/media-typer/index.js\n");

/***/ })

};
;