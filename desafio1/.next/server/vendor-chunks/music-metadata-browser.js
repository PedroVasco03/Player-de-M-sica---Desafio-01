"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/music-metadata-browser";
exports.ids = ["vendor-chunks/music-metadata-browser"];
exports.modules = {

/***/ "(ssr)/./node_modules/music-metadata-browser/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata-browser/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.fetchFromUrl = exports.parseBlob = exports.parseReadableStream = exports.parseNodeStream = exports.selectCover = exports.ratingToStars = exports.orderTags = exports.parseFromTokenizer = exports.parseBuffer = void 0;\r\nconst initDebug = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\r\nconst mm = __webpack_require__(/*! music-metadata/lib/core */ \"(ssr)/./node_modules/music-metadata/lib/core.js\");\r\nconst readable_web_to_node_stream_1 = __webpack_require__(/*! readable-web-to-node-stream */ \"(ssr)/./node_modules/readable-web-to-node-stream/lib/index.js\");\r\nconst debug = initDebug('music-metadata-browser:main');\r\nvar core_1 = __webpack_require__(/*! music-metadata/lib/core */ \"(ssr)/./node_modules/music-metadata/lib/core.js\");\r\nObject.defineProperty(exports, \"parseBuffer\", ({ enumerable: true, get: function () { return core_1.parseBuffer; } }));\r\nObject.defineProperty(exports, \"parseFromTokenizer\", ({ enumerable: true, get: function () { return core_1.parseFromTokenizer; } }));\r\nObject.defineProperty(exports, \"orderTags\", ({ enumerable: true, get: function () { return core_1.orderTags; } }));\r\nObject.defineProperty(exports, \"ratingToStars\", ({ enumerable: true, get: function () { return core_1.ratingToStars; } }));\r\nObject.defineProperty(exports, \"selectCover\", ({ enumerable: true, get: function () { return core_1.selectCover; } }));\r\n/**\r\n * Parse audio Stream\r\n * @param stream - ReadableStream\r\n * @param contentType - MIME-Type\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nexports.parseNodeStream = mm.parseStream;\r\n/**\r\n * Parse Web API ReadableStream: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\r\n * @param stream - ReadableStream (web stream according WTWG Streams Standard)\r\n * @param fileInfo FileInfo object or MIME-Type\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nasync function parseReadableStream(stream, fileInfo, options) {\r\n    const ns = new readable_web_to_node_stream_1.ReadableWebToNodeStream(stream);\r\n    const res = await (0, exports.parseNodeStream)(ns, typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo, options);\r\n    await ns.close();\r\n    return res;\r\n}\r\nexports.parseReadableStream = parseReadableStream;\r\n/**\r\n * Parse Web API File\r\n * @param blob - Blob to parse\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nasync function parseBlob(blob, options) {\r\n    const fileInfo = { mimeType: blob.type, size: blob.size };\r\n    if (blob instanceof File) {\r\n        fileInfo.path = blob.name;\r\n    }\r\n    const stream = (blob.stream ? blob.stream() : convertBlobToReadableStream(blob));\r\n    return parseReadableStream(stream, { mimeType: blob.type, size: blob.size }, options);\r\n}\r\nexports.parseBlob = parseBlob;\r\n/**\r\n * Convert Blob to ReadableStream\r\n * Fallback for Safari versions < 14.1\r\n * @param blob\r\n */\r\nfunction convertBlobToReadableStream(blob) {\r\n    const fileReader = new FileReader();\r\n    return new ReadableStream({\r\n        start(controller) {\r\n            // The following function handles each data chunk\r\n            fileReader.onloadend = event => {\r\n                let data = event.target.result;\r\n                if (data instanceof ArrayBuffer) {\r\n                    data = new Uint8Array(data);\r\n                }\r\n                controller.enqueue(data);\r\n                controller.close();\r\n            };\r\n            fileReader.onerror = error => {\r\n                controller.close();\r\n            };\r\n            fileReader.onabort = error => {\r\n                controller.close();\r\n            };\r\n            fileReader.readAsArrayBuffer(blob);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Parse fetched file, using the Web Fetch API\r\n * @param audioTrackUrl - URL to download the audio track from\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nasync function fetchFromUrl(audioTrackUrl, options) {\r\n    const response = await fetch(audioTrackUrl);\r\n    const fileInfo = {\r\n        size: parseInt(response.headers.get('Content-Length'), 10),\r\n        mimeType: response.headers.get('Content-Type')\r\n    };\r\n    if (response.ok) {\r\n        if (response.body) {\r\n            const res = await parseReadableStream(response.body, fileInfo, options);\r\n            debug('Closing HTTP-readable-stream...');\r\n            if (!response.body.locked) { // Prevent error in Firefox\r\n                await response.body.cancel();\r\n            }\r\n            debug('HTTP-readable-stream closed.');\r\n            return res;\r\n        }\r\n        else {\r\n            // Fall back on Blob\r\n            return parseBlob(await response.blob(), options);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(`HTTP error status=${response.status}: ${response.statusText}`);\r\n    }\r\n}\r\nexports.fetchFromUrl = fetchFromUrl;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/music-metadata-browser/lib/index.js\n");

/***/ })

};
;